<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020/10/18 20:20 第一篇博客正式诞生！</title>
    <url>/2020/10/19/201018first/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Coursera | Introduction to Data Science in Python（University of Michigan）| quiz答案</title>
    <url>/2020/11/07/Coursera%20Introduction%20to%20Data%20Science%20in%20Python%EF%BC%88University%20of%20Michigan%EF%BC%89%20quiz%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>&emsp;&emsp; 继续Coursera学习哈，有助学金申请还是比较爽的（有需求下次放个助学金申请模板？）。因为打算往DS靠，找到密歇根大学的 Applied Data Science with Python 专项课程，共有5门课程，目前用了5天薅完了第一门Introduction to Data Science in Python。<br><img src="https://img-blog.csdnimg.cn/20201107110233146.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20201107110218196.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>&emsp;&emsp; 不愧是密歇根大学，感觉质量很高，原本还打算和离散数学那个一样划水摸鱼过的，结果被编程assignment按在地上摩擦，还是很刺激的。这里放上每个quiz的答案。assignment的代码嘛，看情况，想要的可以评论区留言，多的话我就把整个上课资源上传到Github，包括Quiz编程实现，Assignment代码，上课代码等，貌似容易被和谐掉。因为比起前不久，quiz和assignment都更新了挺多，不知道放上来会不会被和谐(特别是最后一个assignment，新题，没有往届参考快猝死了)，讨论参考肯定没问题 :)<br>&emsp;&emsp; Anway，想自学的推荐哈，Introduction to Data Science in Python这门课程学完能学会很多，包括Pandas的用法以及实例实践等。</p>
<h1 id="quiz答案"><a href="#quiz答案" class="headerlink" title="quiz答案"></a>quiz答案</h1><p>&emsp;&emsp;U1S1，这个课程是真的严谨，题目换的那叫个快，最近是直接第三方平台，连上密歇根自己的学校网站，做题然后提交。不过值得吐槽的是，每次提交到出成绩要24h，一般也就10道选择题啊，气(•́へ•́╬)。而且要求是低于70%正确率可以反复做，但是一旦高于70%就不能反复提交刷分了，所以博主第一个quiz粗心错了一个，非常后悔。<br>&emsp;&emsp;不废话了，放答案，总共4周，前三周都是第三方平台，最后一周是Coursera自己的平台。</p>
<h2 id="Week1-Fundamentals-of-Data-Manipulation-with-Python"><a href="#Week1-Fundamentals-of-Data-Manipulation-with-Python" class="headerlink" title="Week1 : Fundamentals of Data Manipulation with Python"></a>Week1 : Fundamentals of Data Manipulation with Python</h2><p>&emsp;&emsp;第一周的，下面这个就是密歇根的平台啦，没错，我就是第一题就错了，o(╥﹏╥)o，然后也放下批改后会告诉你错在哪了，还是挺人性化的。</p>
<p><img src="https://img-blog.csdnimg.cn/20201107110942876.png?x-oss-process=image" alt="在这里插入图片描述"><br>&emsp;&emsp; 如果做错了，会显示正确答案和解释。<br><img src="https://img-blog.csdnimg.cn/20201107110949320.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<p>&emsp;&emsp;其他都没问题啦。<br><img src="https://img-blog.csdnimg.cn/20201107111055589.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107111059370.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107111113142.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107111120540.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107111127751.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107111133810.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107111138183.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2020110711114326.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107111148404.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h2 id="Week2-Basic-Data-Processing-with-Pandas"><a href="#Week2-Basic-Data-Processing-with-Pandas" class="headerlink" title="Week2 : Basic Data Processing with Pandas"></a>Week2 : Basic Data Processing with Pandas</h2><p><img src="https://img-blog.csdnimg.cn/20201107111220234.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107111225223.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107111231749.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2020110711130620.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107111311780.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107111317739.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107111327139.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107111952781.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107111336815.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107111342674.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h2 id="Week3-More-Data-Processing-with-Pandas"><a href="#Week3-More-Data-Processing-with-Pandas" class="headerlink" title="Week3 : More Data Processing with Pandas"></a>Week3 : More Data Processing with Pandas</h2><p><img src="https://img-blog.csdnimg.cn/20201107112051583.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112219521.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112230793.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112235981.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112242658.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112247270.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112253186.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112257585.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2020110711230320.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112313865.png?x-oss-process=image" alt="在这里插入图片描述"></p>
<h2 id="Week4-Answering-Questions-with-Messy-Data"><a href="#Week4-Answering-Questions-with-Messy-Data" class="headerlink" title="Week4 : Answering Questions with Messy Data"></a>Week4 : Answering Questions with Messy Data</h2><p><img src="https://img-blog.csdnimg.cn/20201107112356488.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112402351.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112407693.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112412858.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112420955.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112429840.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2020110711243871.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112443963.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112450774.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112459810.png?x-oss-process=image" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20201107112506153.png?x-oss-process=image" alt="在这里插入图片描述"><br>&emsp;&emsp; Quiz的实现代码应该还是可以分享的<br>&emsp;&emsp; 过段时间再薅后续课程（缓下）<br>&emsp;&emsp; 欢迎评论区讨论呀</p>]]></content>
      <categories>
        <category>DataScience</category>
        <category>Coursera</category>
      </categories>
      <tags>
        <tag>DataScience</tag>
        <tag>Pandas</tag>
        <tag>Coursera</tag>
      </tags>
  </entry>
  <entry>
    <title>Coursera | 离散数学概论（北大）| quiz答案</title>
    <url>/2020/10/23/Coursera%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E6%A6%82%E8%AE%BAquiz%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>&emsp;&emsp;先放下Coursera上找的离散数学部分相关课程：</p>
<p><img src="https://img-blog.csdnimg.cn/20201011161356603.png#pic_center" alt="在这里插入图片描述"><br>&emsp;&emsp;btw.线上学习拿证书还有很多，MOOC、edm等都可。</p>
<p>&emsp;&emsp;博主选了北京大学离散数学概论Discrete Mathematics Generality。Mooc上貌似也有，但是上课时间貌似不如Coursera灵活，Coursera时间自己调度，规定时间上完即可。目前课程感觉良好，比较推荐，具体课程安排可上网站找。</p>
<h1 id="quiz答案"><a href="#quiz答案" class="headerlink" title="quiz答案"></a>quiz答案</h1><p>&emsp;&emsp;这里对每周的quiz答案做个记录，更新中…(emmm 不知道放答案有没有事，大家做个参考就好)<br>&emsp;&emsp;btw.选项顺序可能有不同，请对准选项内容！</p>
<h2 id="Week1-数理逻辑：基本概念"><a href="#Week1-数理逻辑：基本概念" class="headerlink" title="Week1:数理逻辑：基本概念"></a>Week1:数理逻辑：基本概念</h2><p><img src="https://img-blog.csdnimg.cn/20201011163102777.png?x-oss-process" alt="在这里插入图片描述"></p>
<h2 id="Week2-数理逻辑：命题逻辑及形式系统"><a href="#Week2-数理逻辑：命题逻辑及形式系统" class="headerlink" title="Week2:数理逻辑：命题逻辑及形式系统"></a>Week2:数理逻辑：命题逻辑及形式系统</h2><p><img src="https://img-blog.csdnimg.cn/20201011162628215.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201011162639811.png?x-oss-process" alt="在这里插入图片描述"></p>
<h2 id="Week3-数理逻辑：谓词逻辑及形式系统"><a href="#Week3-数理逻辑：谓词逻辑及形式系统" class="headerlink" title="Week3:数理逻辑：谓词逻辑及形式系统"></a>Week3:数理逻辑：谓词逻辑及形式系统</h2><p><img src="https://img-blog.csdnimg.cn/20201011162508828.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201011162525258.png?x-oss-process" alt="在这里插入图片描述"></p>
<h2 id="Week4-集合论：集合代数"><a href="#Week4-集合论：集合代数" class="headerlink" title="Week4:集合论：集合代数"></a>Week4:集合论：集合代数</h2><p><img src="https://img-blog.csdnimg.cn/20201011162326593.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201011162347178.png?x-oss-process" alt="在这里插入图片描述"></p>
<h2 id="Week5-集合论：关系基本概念"><a href="#Week5-集合论：关系基本概念" class="headerlink" title="Week5:集合论：关系基本概念"></a>Week5:集合论：关系基本概念</h2><p><img src="https://img-blog.csdnimg.cn/20201012212513840.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201012212842680.png?x-oss-process" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20201012212548228.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="Week6-集合论：特殊关系及函数"><a href="#Week6-集合论：特殊关系及函数" class="headerlink" title="Week6:集合论：特殊关系及函数"></a>Week6:集合论：特殊关系及函数</h2><p><img src="https://img-blog.csdnimg.cn/20201013211743866.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201013211752252.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020101321180692.png?x-oss-process" alt="在这里插入图片描述"></p>
<h2 id="Week6-图论：图的定义"><a href="#Week6-图论：图的定义" class="headerlink" title="Week6:图论：图的定义"></a>Week6:图论：图的定义</h2><p><img src="https://img-blog.csdnimg.cn/20201014121204171.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201014121211493.png?x-oss-process" alt="在这里插入图片描述"></p>
<h2 id="Week8-图论：特殊图"><a href="#Week8-图论：特殊图" class="headerlink" title="Week8:图论：特殊图"></a>Week8:图论：特殊图</h2><p><img src="https://img-blog.csdnimg.cn/20201014202701175.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201014202711729.png?x-oss-process" alt="在这里插入图片描述"></p>
<h2 id="Week9-抽象代数"><a href="#Week9-抽象代数" class="headerlink" title="Week9:抽象代数"></a>Week9:抽象代数</h2><p><img src="https://img-blog.csdnimg.cn/20201015161014123.png?x-oss-process" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/2020101516102858.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201015161037701.png?x-oss-process" alt="在这里插入图片描述"></p>
<h2 id="Week10-形式语言与自动机：基本概念"><a href="#Week10-形式语言与自动机：基本概念" class="headerlink" title="Week10:形式语言与自动机：基本概念"></a>Week10:形式语言与自动机：基本概念</h2><p><img src="https://img-blog.csdnimg.cn/20201015173558247.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/202010151736060.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201015173617589.png?x-oss-process" alt="在这里插入图片描述"></p>
<h2 id="Week11-形式语言与自动机：有限状态机"><a href="#Week11-形式语言与自动机：有限状态机" class="headerlink" title="Week11:形式语言与自动机：有限状态机"></a>Week11:形式语言与自动机：有限状态机</h2><p><img src="https://img-blog.csdnimg.cn/20201015222037136.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201015222045940.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201015222052882.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201015222100400.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201015222105285.png?x-oss-process" alt="在这里插入图片描述"></p>
<h2 id="Week12-形式语言与自动机：图灵机与计算理论"><a href="#Week12-形式语言与自动机：图灵机与计算理论" class="headerlink" title="Week12:形式语言与自动机：图灵机与计算理论"></a>Week12:形式语言与自动机：图灵机与计算理论</h2><p><img src="https://img-blog.csdnimg.cn/20201016193658316.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201016193735658.png?x-oss-process" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20201016193718272.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201016193751471.png?x-oss-process" alt="在这里插入图片描述"></p>
<h2 id="Week13-期末测试"><a href="#Week13-期末测试" class="headerlink" title="Week13:期末测试"></a>Week13:期末测试</h2><p><img src="https://img-blog.csdnimg.cn/20201016203518392.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201016203526219.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201016203534413.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201016203541890.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201016203550692.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201016203602649.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201016203610291.png?x-oss-process" alt="在这里插入图片描述"></p>]]></content>
      <categories>
        <category>数学</category>
        <category>离散数学</category>
      </categories>
      <tags>
        <tag>Coursera</tag>
        <tag>数学</tag>
        <tag>离散数学</tag>
      </tags>
  </entry>
  <entry>
    <title>GEE入门[1] | Python环境配置</title>
    <url>/2020/10/23/GEE%E5%85%A5%E9%97%A8%E3%80%901%E3%80%91Python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="GEE简介"><a href="#GEE简介" class="headerlink" title="GEE简介"></a>GEE简介</h2><p>&emsp;&emsp;GEE（Google Earth Engine）是谷歌的一个可以批量处理卫星影像数据的工具，属于Google Earth一系列的工具。相比于ENVI等传统的处理影像工具，GEE可以快速、批量处理数量“巨大”的影像，比如可以快速计算NDVI植被指数等。GEE数据集包括Landsat4、5、7、8、Modis、Sentinel、Atmospheric等超过 200 个公共的数据集，超过500万张影像，具有免费、云计算、数据获取方便等优点，缺点是需要科学上网，以及下载速度和tz质量有关。<br>&emsp;&emsp;GEE提供了两个平台，分别是在线的JavaScript API和离线的Python API。通过这些API可以快速的建立基于Google Earth Engine 以及 Google云的Web服务。在线JavaScript API平台无需环境搭配，可直接线上下载处理卫星影像（<a href="https://code.earthengine.google.com/">https://code.earthengine.google.com</a>），如图。JavaScript平台使用方便，图形交互体验较强，但是如果需要进行深度学习的训练以及测试等时需要将线下使用python等完成训练。<br><img src="https://img-blog.csdnimg.cn/2020082221443350.png?x-oss-process" alt="1"></p>
 <br>

<h2 id="python-API配置相关"><a href="#python-API配置相关" class="headerlink" title="python API配置相关"></a>python API配置相关</h2><p>&emsp;&emsp;本教程以python API为平台，结合Google Colab与GEE完成深度学习。使用python运行GEE需要进行环境配置，分为云端环境配置和本地环境配置，本地环境配置的优点是配置一次即可，由于本教程使用Colab云端运行，所以需要进行云端配置，云端配置需要每次重新配置，所幸Colab配置简单。本教程先介绍Colab云端配置，GEE本地python环境配置见后续教程。</p>
<h3 id="Colab环境配置"><a href="#Colab环境配置" class="headerlink" title="Colab环境配置"></a>Colab环境配置</h3><p>&emsp;&emsp;Google Colab是一个 Google 研究项目，旨在帮助传播机器学习培训和研究成果。它是一个 Jupyter 笔记本环境，不需要进行任何设置就可以使用，并且完全在云端运行。Colaboratory 笔记本存储在 Google 云端硬盘 (<a href="https://drive.google.com/">https://drive.google.com/</a>) 中，并且可以共享。由于Google Colab在linux系统下，所以我们可以用linux系统命令来控制Colab。优点即可以免费试用各个谷歌应用，在无可用GPU时比较合适，缺点仍然是使用谷歌相关需要科学上网。<br>&emsp;&emsp;建议在Google drive中新建Colab。因为编辑运行完程序后，程序是存在Google drive里的，下一次可以直接进入。而Colab的硬盘是云端的，如果直接新建Colaboratory，那么下次打开colab可能上次编写的程序就没有了。具体步骤如下：</p>
<ol>
<li><p>首先登录谷歌云端硬盘（Google Drive），使用Google邮箱登入即可，由于需要使用GEE，因此需要与GEE邮箱一致。Google Drive免费提供了15GB的存储空间，拓宽空间需要购买。<br><img src="https://img-blog.csdnimg.cn/20200822214552414.png?x-oss-process" alt="2"></p>
</li>
<li><p>添加关联程序，本用户已经关联，未关联用户可以通过新建-更多-关联更多应用，然后搜索Colab关联，已关联用户可直接新建-更多-Colaboratory新建ipynb文件。ipynb文件格式即jupyter notebook格式，适合在线分段运行以及做注释，详细操作不做过多介绍。</p>
<img src="https://img-blog.csdnimg.cn/20200822214624840.png?x-oss-process#pic_center" width="300px">
</li>
<li><p>更改运行时类型。点击代码执行程序中的“更改运行时类型”，更改环境和CPU/GPU/TPU。，选择GPU会分配一个云端GPU，一般为K80或者P100。</p>
</li>
</ol>
<img src="https://img-blog.csdnimg.cn/20200822214755269.png?x-oss-process" width="300px">
&emsp;&emsp;选择None(CPU)/GPU/TPU，这里选择GPU。
<img src="https://img-blog.csdnimg.cn/20200822215349649.png?x-oss-process" width="300px">
&emsp;&emsp;通过代码查看分配的GPU型号。
<img src="https://img-blog.csdnimg.cn/20200822215458410.png?x-oss-process">

<ol start="4">
<li>挂载Google Drive。Colab的运行原理实际上就是给你分配一台远程的带GPU的主机，所以它的原始路径不是你的Google Drive所在的路径。所以要先把Google Drive挂载带到那台远程主机上。<br><img src="https://img-blog.csdnimg.cn/20200822215544497.png?x-oss-process" alt="3"><br> 也可通过左侧栏，选择装载或卸载云端硬盘。其中的My Drive中的文件即为Google Drive中的文件。<img src="https://img-blog.csdnimg.cn/20200822215621509.png?x-oss-process" width="200px">
 载入后，读入图片测试，如图。

</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200822215717923.png?x-oss-process" alt="4"></p>
<ol start="5">
<li>注：在Colab中，单元格不仅仅可以写代码，还可以当命令行使用。比如，!ls查看当前目录文件。<br><img src="https://img-blog.csdnimg.cn/20200822215735282.png#pic_center" alt="5"><br>同时，如果有一些包原始环境里没有，就可以直接在单元格里安装，但是注意需要在前面加入”!”。同时，也可直接运行py文件，如图。<img src="https://img-blog.csdnimg.cn/2020082221575378.png" width="200px">
具体其他操作可参考网上教程或者官方文档。


</li>
</ol>
<h3 id="GEE开发环境配置"><a href="#GEE开发环境配置" class="headerlink" title="GEE开发环境配置"></a>GEE开发环境配置</h3><p>具体步骤如下：</p>
<ol>
<li>安装必要的库 !pip install earthengine-api<br><img src="https://img-blog.csdnimg.cn/2020082222014432.png?x-oss-process" alt="12"></li>
<li>初始化验证消息，使用GEE等谷歌平台时需要验证信息，由于每次打开Colaboratory，它的后台会启动新的虚拟机器，所以这个验证步骤需要重新走一遍 。<br>首先点击验证网站。<br><img src="https://img-blog.csdnimg.cn/20200822220209893.png?x-oss-process" alt="13"><br>选择Google账号。<img src="https://img-blog.csdnimg.cn/20200822220229668.png?x-oss-process" width="200px">
允许访问。
<img src="https://img-blog.csdnimg.cn/20200822220302234.png?x-oss-process" width="200px">
点击右侧粘贴将复制代码放入Colab输入行，按回车即可验证。
<img src="https://img-blog.csdnimg.cn/20200822220437670.png?x-oss-process" width="300px">
<img src="https://img-blog.csdnimg.cn/20200822220504326.png?x-oss-process">
显示”Successfully saved authorization token”即验证通过。
<img src="https://img-blog.csdnimg.cn/20200822220521198.png?x-oss-process">


</li>
</ol>
<h3 id="GEE的本地python环境搭建"><a href="#GEE的本地python环境搭建" class="headerlink" title="GEE的本地python环境搭建"></a>GEE的本地python环境搭建</h3><p>本教程主要面向Windows系统，Mac或者Linux配置相对简单，出现的问题可能较少，网上有大量线上资源。主要步骤如下。</p>
<ol>
<li>安装python和pip（略</li>
<li>安装Google的 python API的客户端，命令行如下：<br>pip install google-api-python-client</li>
<li>安装鉴权验证依赖库：<br>pip install pyCrypto</li>
<li>安装GEE的python库：<br>pip install earthengine-api</li>
<li>第一次运行GEE需要先验证GEE账户，命令行运行如下：<br>earthengine authenticate<br>其中，如果运行缺少相关安装包，安装即可。<br>接下来同Colab线上验证。<br>1）选择Google账号。<img src="https://img-blog.csdnimg.cn/20200822220229668.png?x-oss-process" width="200px">
2）允许访问。
<img src="https://img-blog.csdnimg.cn/20200822220302234.png?x-oss-process" width="200px">
3）点击右侧粘贴将复制代码放入**命令行**，按回车即可验证。
<img src="https://img-blog.csdnimg.cn/20200822220437670.png?x-oss-process" width="300px"></li>
<li>运行、初始化GEE，检查本地环境是否搭建完成：<br>python -c “import ee; ee.Initialize()”  <br>
注：其中可能遇到“[WinError 10060] 由于连接方在一段时间没有正确答复…”问题。一方面检查注册账号是否授权，电脑用户名中文也有可能造成问题。另一方面，检查科学上网软件是否为全局模式。

</li>
</ol>
<h2 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h2><p>JavaScript在线平台： <a href="https://code.earthengine.google.com/">https://code.earthengine.google.com/</a><br>入门介绍文档：<a href="https://developers.google.com/earth-engine/">https://developers.google.com/earth-engine/</a></p>
<h3 id="Python-API相关资源"><a href="#Python-API相关资源" class="headerlink" title="Python API相关资源"></a>Python API相关资源</h3><p><a href="https://github.com/google/earthengine-api">https://github.com/google/earthengine-api</a><br>（包含基本操作，决策树等机器学习代码，无深度学习相关）<br><a href="https://github.com/shiweihappy/earthengine-py-notebooks">https://github.com/shiweihappy/earthengine-py-notebooks</a><br>（包含javascript在线平台教程以及python结合深度学习代码，主要结合TensorFlow以及Google Colab运行，代码需要适当修改）<br><img src="https://img-blog.csdnimg.cn/20200822222103455.png?x-oss-process" width="300px"></p>]]></content>
      <categories>
        <category>GEE</category>
        <category>GEE入门</category>
      </categories>
      <tags>
        <tag>Google Earth Engine</tag>
        <tag>Remote sensing</tag>
      </tags>
  </entry>
  <entry>
    <title>GEE入门[2] | 上传、导出</title>
    <url>/2020/10/27/GEE%E5%85%A5%E9%97%A8%E3%80%902%E3%80%91%E4%B8%8A%E4%BC%A0%E3%80%81%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<h1 id="GEE数据库"><a href="#GEE数据库" class="headerlink" title="GEE数据库"></a>GEE数据库</h1><p>&emsp;&emsp;GEE自带了非常多的各种影像矢量文件等资源。包括卫星影像，气候、地形数据，以及各种处理后的数据，比如土地覆盖分类，NDVI，水体检测等。详见<a href="https://developers.google.com/earth-engine/datasets/catalog">数据库列表</a><br><img src="https://img-blog.csdnimg.cn/20200826171606563.png?x-oss-process" width="600px"><br>&emsp; &emsp;顺带列下整理的GEE提供的LULC相关的数据库：<br><img src="https://img-blog.csdnimg.cn/20200826171658572.png?x-oss-process" alt="在这里插入图片描述"></p>
<h1 id="Upload资源"><a href="#Upload资源" class="headerlink" title="Upload资源"></a>Upload资源</h1><p>&emsp; &emsp;一方面我们可以使用GEE自带的各种影像矢量文件等资源，另外一方面我们可以上传我们自己的资源。GEE的Assets提供了250G的空间。</p>
<ol>
<li>在GEE在线平台左侧任务栏，选择Assets，点击”New”按钮。<br><img src="https://img-blog.csdnimg.cn/20200826162300714.png?x-oss-process" alt="在这里插入图片描述"></li>
</ol>
<ol start="2">
<li>选择要上传的文件类型。本教程以tfrecord和json为例上传图片数据。</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200826162255879.png?x-oss-process" alt="在这里插入图片描述"></p>
<ol start="3">
<li>选择本地资源，填写相关信息。上传TFRecord数据时，需要上传mixer.json文件。<img src="https://img-blog.csdnimg.cn/20200826162034771.png?x-oss-process" width="400px">


</li>
</ol>
<ol start="4">
<li><p>通过“Task”标签可以看到资源上传进度。资源上传成功后显示蓝色，失败显示红色。左侧任务栏”Assets”可以看到成功导入的数据。其中上传TFRecord图像比较迷，经常会出现mixer unreadable问题，多上传几次就好了。<br><img src="https://img-blog.csdnimg.cn/20200826162016986.png" alt="在这里插入图片描述"><br>注：Google Cloud Storage可以通过python代码直接上传，Google Drive尚未实现。</p>
</li>
<li><p>接着在“Assets”点击想要import的数据，选择“import”即可。</p>
<img src="https://img-blog.csdnimg.cn/20200826163326655.png?x-oss-process" width="600px">

</li>
</ol>
<p>接着可以在JavaScript在线平台看见import的数据。<br><img src="https://img-blog.csdnimg.cn/20200826163336282.png" alt="在这里插入图片描述"><br>python同理：<br>    <code>image = ee.Image(&quot;users/daviddoyle1/test_c3&quot;)</code></p>
<h1 id="Export资源"><a href="#Export资源" class="headerlink" title="Export资源"></a>Export资源</h1><p>&emsp; &emsp;GEE主要可以导出如下类型资源，分别是image影像类型、map地图地图类、table矢量文件类和video视频类。导出函数主要可以直接将数据存放于3个地方，Google Drive、Assets和Google Cloud Storage。由于Google Cloud Storage激活需要信用卡，略过不讲。<br>&emsp; &emsp;Google Drive（drive.google.com/drive）前文已介绍过，通过谷歌账号可以直接获取15G免费存储空间，而且可以通过Colab使用免费GPU，适合硬件条件不好的情况。<br>&emsp; &emsp;Assests是GEE资源存放位置，里面的资源是可以直接在GEE工作空间中使用，每个用户空间限制是250G。<br>&emsp; &emsp;GEE下载文件主要有两个方式，一个是getDownloadURL，一个是Export方式。本教程主要介绍Export方法。Export相关方法如下，其中红色的是废弃的方法。[参考无形的风]<br><img src="https://img-blog.csdnimg.cn/20200826162734735.png?x-oss-process" width="400px"><br>&emsp; &emsp;以image为例，介绍各个参数，具体见文档。</p>
<ol>
<li>导出到Asset方法简介：<br>Export.image.toAsset(image, description, assetId, pyramidingPolicy, dimensions, region, scale, crs, crsTransform, maxPixels) <br>
常用参数说明：  

</li>
</ol>
<p>&emsp; &emsp;image 需要导出的影像；   </p>
<p>&emsp; &emsp;description 导出任务描述；   </p>
<p>&emsp; &emsp;assetId 资源名称，也就是在Asset文件夹中看到的资源名称；</p>
<p>&emsp; &emsp;pyramidingPolicy 波段值计算方式，是一个对象值。计算方式包括：mean、sample、min、max、mode，默认是mean。这个值通常不会设置，都是采用默认值。示例：{‘B4’: ‘mean’} 意思是波段名称为B4的波段采用mean的方式计算；</p>
<p>&emsp; &emsp;dimensions 导出Image的宽和高；</p>
<p>&emsp; &emsp;region 导出的区域，是一个Geomtry；</p>
<p>&emsp; &emsp;scale 分辨率，单位米，比如：30；</p>
<p>&emsp; &emsp;crs 投影信息，一般是采用默认方式，通常可以设置为EPSG:4326；</p>
<p>&emsp; &emsp;maxPixels 导出影像的最大像素个数可以设置为 1e13 防止导出时候报错。</p>
<ol start="2">
<li>导出到Drive方法简介<br>Export.image.toDrive(image, description, folder, fileNamePrefix, dimensions, region, scale, crs, crsTransform, maxPixels, shardSize, fileDimensions, skipEmptyTiles, fileFormat, formatOptions)  <br>
常用参数说明：

</li>
</ol>
<p>&emsp; &emsp;image 需要导出的影像；</p>
<p>&emsp; &emsp;description 导出任务描述；</p>
<p>&emsp; &emsp;folder 在Assets中的文件夹名称，也就是用户自己创建的文件夹。如果不传此参数，那么导出的文件会直接放在Assets根目录下，通常都不会传此参数；fileNamePrefix 导出的资源名称，如果默认的不传，那么会直接采用description来作为导出的文件名称；</p>
<p>&emsp; &emsp;dimensions 导出Image的宽和高；</p>
<p>&emsp; &emsp;region 导出的区域，是一个Geomtry；</p>
<p>&emsp; &emsp;scale 分辨率，单位米，比如：30；</p>
<p>&emsp; &emsp;crs 投影信息，一般是采用默认方式，通常可以设置为EPSG:4326；</p>
<p>&emsp; &emsp;maxPixels 导出影像的最大像素个数可以设置为 1e13 防止导出时候报错。</p>
<p>&emsp; &emsp;导出矢量文件类似，可以直接看文档介绍。</p>
<h2 id="导出实例"><a href="#导出实例" class="headerlink" title="导出实例"></a>导出实例</h2><ol>
<li>导出矢量数据到”Assets”<br>&emsp; &emsp;这里的矢量数据为在线平台选取的区域，红色为trainingPolys，紫色的为evalPolys。<img src="https://img-blog.csdnimg.cn/20200826163954517.png?x-oss-process" width="500px">

</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> desc=<span class="string">&#x27;trainingPolys&#x27;</span>; </span><br><span class="line"><span class="keyword">var</span> assetId=desc</span><br><span class="line">Export.table.toAsset(&#123;</span><br><span class="line">  collection: trainingPolys,</span><br><span class="line">  description: desc,</span><br><span class="line">  assetId:assetId</span><br><span class="line">&#125;); </span><br><span class="line"><span class="keyword">var</span> desc=<span class="string">&#x27;evalPolys&#x27;</span></span><br><span class="line"><span class="keyword">var</span> assetId=desc</span><br><span class="line">Export.table.toAsset(&#123;</span><br><span class="line">  collection: evalPolys,</span><br><span class="line">  description: desc,</span><br><span class="line">  assetId:assetId</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>导出成功</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2020082616500953.png#pic_center" alt="在这里插入图片描述"></p>
<ul>
<li>import</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> evalPolys = ee.FeatureCollection(<span class="string">&quot;users/daviddoyle1/Predict_muliti_6/evalPolys&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> trainingPolys = ee.FeatureCollection(<span class="string">&quot;users/daviddoyle1/Predict_muliti_6/trainingPolys&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">evalPolys = ee.FeatureCollection(<span class="string">&quot;users/daviddoyle1/Predict_muliti_6/evalPolys&quot;</span>)</span><br><span class="line">trainingPolys = ee.FeatureCollection(<span class="string">&quot;users/daviddoyle1/Predict_muliti_6/trainingPolys&quot;</span>)</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>导出影像数据到“Assets”（重采样）</li>
</ol>
<ul>
<li>将高分辨率影像导出时重采样成30m分辨率的。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Export.image.toAsset(&#123;</span><br><span class="line">  image: test_c3,</span><br><span class="line">  description: <span class="string">&#x27;test_c3_30&#x27;</span>,</span><br><span class="line">  scale: <span class="number">30</span>,<span class="comment">//定义导出图像的分辨率</span></span><br><span class="line">  maxPixels: <span class="number">1e13</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>结果对比<br><img src="https://img-blog.csdnimg.cn/20200826170400167.png?x-oss-process" alt="在这里插入图片描述"></li>
</ul>
<ol start="3">
<li>导出矢量数据到Drive（格式为TFRecord）<br>一同导出的还有mixer.json文件。<br>偷懒中，只放Python代码：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">task = ee.batch.Export.table.toDrive(</span><br><span class="line">    collection = geomSample,</span><br><span class="line">    description = desc,</span><br><span class="line">    folder = FOLDER,</span><br><span class="line">    fileNamePrefix = desc,</span><br><span class="line">    fileFormat = <span class="string">&#x27;TFRecord&#x27;</span>,</span><br><span class="line">    selectors = BANDS + LABELS</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p>Anyway，JavaScript和python相差不大。</p>]]></content>
      <categories>
        <category>GEE</category>
        <category>GEE入门</category>
      </categories>
      <tags>
        <tag>Google Earth Engine</tag>
        <tag>Remote sensing</tag>
      </tags>
  </entry>
  <entry>
    <title>GEE入门[3] | 相关学习网站</title>
    <url>/2020/10/27/GEE%E5%85%A5%E9%97%A8%E3%80%903%E3%80%91%E7%9B%B8%E5%85%B3%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>&emsp;&emsp;好久没更新了，开学忙着瞎眼实习，这次全面介绍一些相关网站，会补充，之前第一篇<a href="https://blog.csdn.net/weixin_43360896/article/details/108174759"> GEE入门【1】| Python环境配置</a> 最后介绍了点相关网站，但是在实际运用中还是要不断线上找教程解决问题。GEE普遍度比起其他热门工具不算高，因此特此收集平时遇到的比较好的专栏、教程之类的相关网站。（如果认为侵权，请联系我删除~）<br>&nbsp; </p>
<h1 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h1><p>&emsp;&emsp;首先先放上几个官方网站，防丢失。<br>&emsp;&emsp;<a href="https://earthengine.google.com/">Google Earth Engine 官方地址</a><br>&emsp;&emsp;官方子网站系列：<br>&emsp;&emsp;<a href="https://earthengine.google.com/datasets/">GEE资源介绍</a> 或者这个<a href="https://developers.google.com/earth-engine/datasets">GEE资源列表</a>： 介绍了卫星影像和各种其他数据，放个大致图：<br><img src="https://img-blog.csdnimg.cn/20200826171606563.png?x-oss-process" width="600px"><br>&emsp;&emsp;<a href="https://earthengine.google.com/case_studies/">GEE研究项目介绍</a> ：里面挺多实际项目代码，可以看看学习下</p>
<p>&emsp;&emsp;<a href="https://code.earthengine.google.com/"><strong>JavaScript在线平台</strong></a>： 这个不用多说<br>&emsp;&emsp;<a href="https://explorer.earthengine.google.com/#workspace">GEE查看资源</a>： 一个可以自主导入显示资源的交互界面，用的比较少</p>
<p>&emsp;&emsp;接下来是GEE官方教程系列：<br>&emsp;&emsp;<a href="https://developers.google.com/earth-engine/">GEE入门介绍首页</a><br>&emsp;&emsp;<a href="https://developers.google.com/earth-engine/apidocs">API文档介绍</a>： 多看API文档！有时候比网上找教程快多了<br>&emsp;&emsp;<a href="https://developers.google.com/earth-engine/edu">官方培训资料</a>： 中英文资料都有，挺全的，下次直接补充个百度云链接<br>&emsp;&emsp;<a href="https://developers.google.com/earth-engine/guides">官方示例教程</a>： 硬核教程，值得多翻翻</p>
<p>&emsp;&emsp;<a href="https://events.withgoogle.com/google-earth-engine-user-summit-2017/#content">17年GEE开发者大会</a>： 没怎么看过<br>&emsp;&emsp;<a href="https://groups.google.com/forum/#!forum/google-earth-engine-developers">GEE 开发者论坛</a>： 需申请，申请简单，可以在上面提问并查看别人解决方案，不过由于解决概率和时间不能解决比较急的问题，用的比较少<br>&emsp;&emsp;<a href="https://www.youtube.com/playlist?list=PLWw80tqUZ5J9_3E_9C_bK8zt0mGHfvOrj">官方YouTube学习视频</a>： 22个学习视频，每个平均一个多小时，可以看看<br>&emsp;&emsp;<a href="https://gis.stackexchange.com/questions/tagged/google-earth-engine?newreg=6844c858f8ae4f7ea6febaf5d472743b">stackflow相关网站</a>： 相当于英文CSDN</p>
<h2 id="Python-API"><a href="#Python-API" class="headerlink" title="Python API"></a>Python API</h2><p>&emsp;&emsp;Python系列当然也少不了，接下来会介绍一些相关Python教程以及想关包~<br>&emsp;&emsp;<a href="https://github.com/google/earthengine-api">GEE API</a>： JavaScript和Python语言都有，包含基本操作，决策树等机器学习代码，挺全的，但是无深度学习相关<br>&nbsp; </p>
<h1 id="大佬专栏"><a href="#大佬专栏" class="headerlink" title="大佬专栏"></a>大佬专栏</h1><p>&emsp;&emsp;这里列一些平时找教程遇到的大佬们的专栏或者相关平台、教程。当然，我也会争取自己出教程hhhh。</p>
<h2 id="dl1"><a href="#dl1" class="headerlink" title="dl1"></a>dl1</h2><p>&emsp;&emsp;首先学习入门是跟着dl无形的风，其CSDN和知乎都有专栏，不过貌似后来转到知乎了？教程多且全，包含挺多实践，挺好~<br>&emsp;&emsp;<a href="https://github.com/shiweihappy/GEE-Python-API">Github Python API</a><br>&emsp;&emsp;<a href="https://blog.csdn.net/shi_weihappy/category_9282574.html">博客专栏</a><br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/c_123993183">知乎专栏</a>： JavaScript和Python相关都有，多达90+。一个个学下来会很有收获，当然，即用即学也可</p>
<h2 id="dl2"><a href="#dl2" class="headerlink" title="dl2"></a>dl2</h2><p>&emsp;&emsp;吴秋生教授的Gtihub网站上有很多教程，其在bilibili和油管已经ResearchGate等平台都有教程。而且开发了geemap包。<br>&emsp;&emsp;<a href="https://www.researchgate.net/project/Google-Earth-Engine-4">ResearchGate专栏</a><br>&emsp;&emsp;<a href="https://space.bilibili.com/527404442/channel/detail?cid=132674">bilibli视频教程</a><br>&emsp;&emsp;<a href="https://www.youtube.com/c/QiushengWu">YouTube视频教程</a><br>&emsp;&emsp;<a href="https://github.com/giswqs/earthengine-py-notebooks">Github教程</a>： jupyter Python notebook，包含javascript在线平台教程以及python结合深度学习代码，主要结合TensorFlow以及Google Colab运行，代码需要适当修改<br>&emsp;&emsp;<a href="https://github.com/giswqs/geemap/tree/master/examples">geemap包_Github专栏</a>： geemap包Github介绍，ps. geemap包有些功能在jupyter notebook 和 Google Colab两个平台无法通用。<br><img src="https://img-blog.csdnimg.cn/20200822222103455.png?x-oss-process" width="300px"></p>
<h2 id="dl3"><a href="#dl3" class="headerlink" title="dl3"></a>dl3</h2><p>&emsp;&emsp;王Mike:<a href="https://zhuanlan.zhihu.com/c_1137998284927893504">知乎专栏</a><br>&emsp;&emsp;由于GEE中的参数不一样，所以很多函数需要新学习，该专栏提供的参数类型系列非常全面，特此列出：<br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/p/75260835">String, Number</a><br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/p/75823262">Dictionary，List，Array</a><br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/p/75944017">Geometry，Feature，Feature Collection </a><br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/p/76343298">Image,Image Collection</a><br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/p/76486116">Date, Date Range </a><br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/p/76487384">Filter，Join </a><br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/p/76488695">Reducer，Kernel，Algorithm </a></p>
<h2 id="dls"><a href="#dls" class="headerlink" title="dls"></a>dls</h2><p>&emsp;&emsp;当然还有很多其他dl们的专栏也很有用，就不一一举出来了，见谅（懒）<br>&emsp;&emsp;<a href="https://github.com/jupyter-widgets/ipyleaflet">ipyleaflet包_Github</a>：用于GEE python交互可视化<br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/c_1098521918466109440">猿人充电站_知乎专栏</a><br>&emsp;&emsp;<a href="https://www.zhihu.com/column/c_1183690934108315648">Celia_知乎专栏</a></p>
<p>后续有新的会继续补充~</p>]]></content>
      <categories>
        <category>GEE</category>
        <category>GEE入门</category>
      </categories>
      <tags>
        <tag>Google Earth Engine</tag>
        <tag>Remote sensing</tag>
      </tags>
  </entry>
  <entry>
    <title>GEE入门[4] | 矢量数据FeatureCollection（行政区划分）</title>
    <url>/2020/10/27/GEE%E5%85%A5%E9%97%A8%E3%80%904%E3%80%91%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AEFeatureCollection%EF%BC%88%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E5%88%86%EF%BC%89/</url>
    <content><![CDATA[<p>&emsp;&emsp;这节介绍下FeatureCollection相关操作。以行政区域矢量数据为例，介绍如何导入行政区域矢量数据并进行相关操作~</p>
<h2 id="FeatureCollection数据"><a href="#FeatureCollection数据" class="headerlink" title="FeatureCollection数据"></a>FeatureCollection数据</h2><p>&emsp;&emsp;首先导入行政矢量数据，在GEE中是FeatureCollection类型，大家可以自己在网上找到相关资源下载后自己upload到GEE平台上。这里提供麻辣GIS的<a href="https://malagis.com/gis-data-china-province.html">下载链接</a> 。<br>&emsp;&emsp;为了进一步展示效果，导入了夜光遥感数据进行后续处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> viirsnight = ee.ImageCollection(<span class="string">&quot;NOAA/VIIRS/DNB/MONTHLY_V1/VCMSLCFG&quot;</span>),</span><br><span class="line">    province = ee.FeatureCollection(<span class="string">&quot;users/daviddoyle1/Province_region&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这是upload后属性界面：<br><img src="https://img-blog.csdnimg.cn/2020101117110632.png?x-oss-process" alt="在这里插入图片描述"><br>&emsp;&emsp;有乱码貌似是因为中文问题，暂没有处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">print(province,<span class="string">&#x27;Province&#x27;</span>)    </span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;在javascript平台print出来，可以看到共34个省级行政区：</p>
<p><img src="https://img-blog.csdnimg.cn/20201011171456710.png?x-oss-process" alt="在这里插入图片描述"></p>
<h2 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h2><p>&emsp;&emsp;接着举几个筛选的例子。先上代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// filterMetadata()通过属性筛选</span></span><br><span class="line"><span class="keyword">var</span> XJ=province.filterMetadata(<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;equals&#x27;</span>,<span class="string">&#x27;Xinjiang&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;XinJiang&#x27;</span>,XJ)     </span><br><span class="line"></span><br><span class="line"><span class="comment">// .limit(筛选数量、筛选字段（可选）、排序方式（可选，默认从小到大True）)</span></span><br><span class="line"><span class="keyword">var</span> province_limit=province.limit(<span class="number">5</span>,<span class="string">&#x27;X&#x27;</span>,<span class="literal">false</span>) <span class="comment">// 根据X轴筛选</span></span><br><span class="line">print(<span class="string">&#x27;province_limit&#x27;</span>,province_limit)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据空间位置筛选</span></span><br><span class="line"><span class="keyword">var</span> CQ_Point =ee.Geometry.Point([<span class="number">106.92371845031437</span>, <span class="number">29.430312117372274</span>]);</span><br><span class="line"><span class="keyword">var</span> CQ = province.filterBounds(CQ_Point);</span><br><span class="line">print(<span class="string">&#x27;ChongQing&#x27;</span>,CQ) </span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;简而言之，可以通过属性、空间位置等信息进行筛选，然后也可以批量筛选。<br>&emsp;&emsp;print结果如下：<br><img src="https://img-blog.csdnimg.cn/20201011172411202.png?x-oss-process" alt="在这里插入图片描述"></p>
<h2 id="要素信息"><a href="#要素信息" class="headerlink" title="要素信息"></a>要素信息</h2><p>&emsp;&emsp;当我们输错信息筛选时，比如将’Xinjiang’输成’XinJiang’，这时候不会报错，但是我们输出的结果就是0element，即没有任何元素通过筛选。<br>&emsp;&emsp;那么进行属性筛选时如何找到我们目标区域对应的属性呢，这个时候就需要掌握要素信息相关的函数了。<br>&emsp;&emsp;先放一大串代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//要素信息提取（复制）</span></span><br><span class="line"><span class="keyword">var</span> China_ID = province.select([<span class="string">&#x27;ID&#x27;</span>]);</span><br><span class="line"><span class="keyword">var</span> China_NAME = province.select([<span class="string">&#x27;NAME&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">print(China_ID,<span class="string">&quot;ID&quot;</span>);</span><br><span class="line">print(China_NAME,<span class="string">&quot;NAME&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//要素信息筛选（去除重复字段）</span></span><br><span class="line"><span class="keyword">var</span> China_ID2 = province.distinct([<span class="string">&#x27;ID&#x27;</span>]);</span><br><span class="line">print(China_ID2,<span class="string">&quot;ID2&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp; 我们提取出ID和NAME属性后，可以进行去除等操作。输出结果如下：<br>&emsp;&emsp;ID：<br><img src="https://img-blog.csdnimg.cn/20201011173457518.png?x-oss-process" alt="在这里插入图片描述"><br>&emsp;&emsp; NAME（依然乱码中）：<br><img src="https://img-blog.csdnimg.cn/20201011173547887.png?x-oss-process" alt="在这里插入图片描述"><br>&emsp;&emsp;由于该数据ID没有重复数据，即没省拼音一致，故结果没变：<br><img src="https://img-blog.csdnimg.cn/20201011173624419.png#pic_center" alt="在这里插入图片描述"></p>
<p>&emsp;&emsp;既然我们能提取出属性信息，那就方便我们进一步搞事情:)<br>我们可以根据筛选到的元素进行合并生成新矢量区域，或者改属性内容也是so easy~如下，将西藏和新疆两个矢量数据合并并属性定义为西部：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//空间信息合并（合并后会丢失原有属性信息）</span></span><br><span class="line"><span class="keyword">var</span> China_Union = province.union();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> XJ=province.filterMetadata(<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;equals&#x27;</span>,<span class="string">&#x27;Xinjiang&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> XZ=province.filterMetadata(<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;equals&#x27;</span>,<span class="string">&#x27;Xizang&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> XJ_XZ_Merge=XJ.merge(XZ);</span><br><span class="line">print(XJ_XZ_Merge,<span class="string">&#x27;XJ_XZ_Merge&#x27;</span>);    </span><br><span class="line"></span><br><span class="line"><span class="comment">//信息更改重置</span></span><br><span class="line"><span class="keyword">var</span> XJ_XZ_Merge_Set=XJ.merge(XZ).set(<span class="string">&#x27;NAME&#x27;</span>,<span class="string">&#x27;Xibu&#x27;</span>);</span><br><span class="line">print(XJ_XZ_Merge_Set,<span class="string">&#x27;XJ_XZ_Merge reset&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;结果对比，可以看到合并后仍然有个两个矢量元素而且属性信息丢失了，自己再赋予就好了：<br><img src="https://img-blog.csdnimg.cn/20201011174324984.png?x-oss-process" alt="在这里插入图片描述"><br>&emsp;&emsp;继续放代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对属性表进行排序</span></span><br><span class="line"><span class="keyword">var</span> China_Sort_X = province.sort(<span class="string">&#x27;X&#x27;</span>,<span class="literal">false</span>)</span><br><span class="line"><span class="comment">//根据X进行排序，默认都是True，从小到大，最后得到前五个的省份</span></span><br><span class="line"><span class="keyword">var</span> sort_test=China_Sort_X.limit(<span class="number">5</span>);</span><br><span class="line">print(sort_test)</span><br><span class="line"></span><br><span class="line"><span class="comment">//将多个属性字段形成新的属性字段</span></span><br><span class="line"><span class="keyword">var</span> China_Array = province.makeArray([<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>],<span class="string">&#x27;An_Array&#x27;</span>)</span><br><span class="line"><span class="comment">//将&#x27;OBJECTID&#x27;,&#x27;Shape_Area&#x27;,&#x27;Shape_Leng&#x27;三个字段结合为&#x27;An_Array&#x27;的一个字段</span></span><br><span class="line">print(China_Array)</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;btw.后续就不放太多结果图了，节省篇幅</p>
<h2 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h2><p>&emsp;&emsp;也可以将提取到的元素进行类型转换，比如提取geometry信息进行其他操作，转换成栅格数据等：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获得所有feature的Geometry信息</span></span><br><span class="line"><span class="keyword">var</span> China_Geometry = province.geometry();</span><br><span class="line">print(China_Geometry,<span class="string">&#x27;China_Geometry&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//矢量转栅格</span></span><br><span class="line"><span class="keyword">var</span> China_to_Image = province.reduceToImage([<span class="string">&#x27;X&#x27;</span>],ee.Reducer.first())</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;当然还有toList用于属性数据提取等操作，有机会会继续更新。</p>
<h2 id="夜光遥感数据提取"><a href="#夜光遥感数据提取" class="headerlink" title="夜光遥感数据提取"></a>夜光遥感数据提取</h2><p>&emsp;&emsp;提取出每个行政区矢量数据最直接的用法就是进行卫星影像的裁剪了，这里用夜光遥感数据为例，裁剪新疆区域影像：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test 夜光</span></span><br><span class="line"><span class="keyword">var</span> image=ee.ImageCollection(<span class="string">&quot;NOAA/VIIRS/DNB/MONTHLY_V1/VCMSLCFG&quot;</span>)</span><br><span class="line">                    .filterDate(<span class="string">&quot;2014-01-01&quot;</span>,<span class="string">&quot;2014-02-01&quot;</span>)</span><br><span class="line">                    .first()</span><br><span class="line">                    <span class="comment">// .clip(XJ)  // clip()针对geometry对象</span></span><br><span class="line">                    .clipToCollection(XJ)</span><br><span class="line">                    ;</span><br><span class="line"><span class="keyword">var</span> visParams = &#123;<span class="attr">bands</span>:[<span class="string">&#x27;avg_rad&#x27;</span>],<span class="attr">gain</span>:<span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.addLayer(image,visParams,<span class="string">&#x27;virrsnight1&#x27;</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>


<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>&emsp;&emsp;最后附上整个完整代码以及可视化：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> viirsnight = ee.ImageCollection(<span class="string">&quot;NOAA/VIIRS/DNB/MONTHLY_V1/VCMSLCFG&quot;</span>),</span><br><span class="line">    province = ee.FeatureCollection(<span class="string">&quot;users/daviddoyle1/Province_region&quot;</span>);</span><br><span class="line"></span><br><span class="line">print(province,<span class="string">&#x27;Province&#x27;</span>)     </span><br><span class="line"></span><br><span class="line"><span class="comment">// filterMetadata()通过属性筛选</span></span><br><span class="line"><span class="keyword">var</span> XJ=province.filterMetadata(<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;equals&#x27;</span>,<span class="string">&#x27;Xinjiang&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;XinJiang&#x27;</span>,XJ)     </span><br><span class="line"></span><br><span class="line"><span class="comment">// .limit(筛选数量、筛选字段（可选）、排序方式（可选，默认从小到大True）)</span></span><br><span class="line"><span class="keyword">var</span> province_limit=province.limit(<span class="number">5</span>,<span class="string">&#x27;X&#x27;</span>,<span class="literal">false</span>) <span class="comment">// 根据X轴筛选</span></span><br><span class="line">print(<span class="string">&#x27;province_limit&#x27;</span>,province_limit)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据空间位置筛选</span></span><br><span class="line"><span class="keyword">var</span> CQ_Point =ee.Geometry.Point([<span class="number">106.92371845031437</span>, <span class="number">29.430312117372274</span>]);</span><br><span class="line"><span class="keyword">var</span> CQ = province.filterBounds(CQ_Point);</span><br><span class="line">print(<span class="string">&#x27;ChongQing&#x27;</span>,CQ) </span><br><span class="line"></span><br><span class="line"><span class="comment">//要素信息提取（复制）</span></span><br><span class="line"><span class="keyword">var</span> China_ID = province.select([<span class="string">&#x27;ID&#x27;</span>]);</span><br><span class="line"><span class="keyword">var</span> China_NAME = province.select([<span class="string">&#x27;NAME&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">print(China_ID,<span class="string">&quot;ID&quot;</span>);</span><br><span class="line">print(China_NAME,<span class="string">&quot;NAME&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//要素信息筛选（去除重复字段）</span></span><br><span class="line"><span class="keyword">var</span> China_ID2 = province.distinct([<span class="string">&#x27;ID&#x27;</span>]);</span><br><span class="line">print(China_ID2,<span class="string">&quot;ID2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//空间信息合并（合并后会丢失原有属性信息）</span></span><br><span class="line"><span class="keyword">var</span> China_Union = province.union();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> XJ=province.filterMetadata(<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;equals&#x27;</span>,<span class="string">&#x27;Xinjiang&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> XZ=province.filterMetadata(<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;equals&#x27;</span>,<span class="string">&#x27;Xizang&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> XJ_XZ_Merge=XJ.merge(XZ);</span><br><span class="line">print(XJ_XZ_Merge,<span class="string">&#x27;XJ_XZ_Merge&#x27;</span>);    </span><br><span class="line"></span><br><span class="line"><span class="comment">//信息更改重置</span></span><br><span class="line"><span class="keyword">var</span> XJ_XZ_Merge_Set=XJ.merge(XZ).set(<span class="string">&#x27;NAME&#x27;</span>,<span class="string">&#x27;Xibu&#x27;</span>);</span><br><span class="line">print(XJ_XZ_Merge_Set,<span class="string">&#x27;XJ_XZ_Merge reset&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对属性表进行排序</span></span><br><span class="line"><span class="keyword">var</span> China_Sort_X = province.sort(<span class="string">&#x27;X&#x27;</span>,<span class="literal">false</span>)</span><br><span class="line"><span class="comment">//根据X进行排序，默认都是True，从小到大，最后得到前五个的省份</span></span><br><span class="line"><span class="keyword">var</span> sort_test=China_Sort_X.limit(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将多个属性字段形成新的属性字段</span></span><br><span class="line"><span class="keyword">var</span> China_Array = province.makeArray([<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>],<span class="string">&#x27;An_Array&#x27;</span>)</span><br><span class="line"><span class="comment">//将&#x27;OBJECTID&#x27;,&#x27;Shape_Area&#x27;,&#x27;Shape_Leng&#x27;三个字段结合为&#x27;An_Array&#x27;的一个字段</span></span><br><span class="line">print(China_Array)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得所有feature的Geometry信息</span></span><br><span class="line"><span class="keyword">var</span> China_Geometry = province.geometry();</span><br><span class="line">print(China_Geometry,<span class="string">&#x27;China_Geometry&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//矢量转栅格</span></span><br><span class="line"><span class="keyword">var</span> China_to_Image = province.reduceToImage([<span class="string">&#x27;X&#x27;</span>],ee.Reducer.first())</span><br><span class="line"></span><br><span class="line"><span class="comment">//toList命令（更便于属性数据的提取）</span></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test 夜光</span></span><br><span class="line"><span class="keyword">var</span> image=ee.ImageCollection(<span class="string">&quot;NOAA/VIIRS/DNB/MONTHLY_V1/VCMSLCFG&quot;</span>)</span><br><span class="line">                    .filterDate(<span class="string">&quot;2014-01-01&quot;</span>,<span class="string">&quot;2014-02-01&quot;</span>)</span><br><span class="line">                    .first()</span><br><span class="line">                    <span class="comment">// .clip(XJ)  // clip()针对geometry对象</span></span><br><span class="line">                    .clipToCollection(XJ)</span><br><span class="line">                    ;</span><br><span class="line"><span class="keyword">var</span> visParams = &#123;<span class="attr">bands</span>:[<span class="string">&#x27;avg_rad&#x27;</span>],<span class="attr">gain</span>:<span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.centerObject(province,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(province,&#123;&#125;,<span class="string">&#x27;Province&#x27;</span>,<span class="literal">false</span>); </span><br><span class="line"><span class="built_in">Map</span>.addLayer(image,visParams,<span class="string">&#x27;virrsnight1&#x27;</span>,<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(XJ,&#123;<span class="attr">color</span>:<span class="string">&#x27;FF0000&#x27;</span>&#125;,<span class="string">&quot;XinJiang&quot;</span>,<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(province_limit,&#123;&#125;,<span class="string">&#x27;Province_part&#x27;</span>,<span class="literal">false</span>); </span><br><span class="line"><span class="built_in">Map</span>.addLayer(CQ,&#123;<span class="attr">color</span>:<span class="string">&#x27;FF0000&#x27;</span>&#125;,<span class="string">&quot;ChongQing&quot;</span>,<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(China_Union,&#123;<span class="attr">color</span>:<span class="string">&#x27;F00000&#x27;</span>&#125;,<span class="string">&#x27;union&#x27;</span>,<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(XJ_XZ_Merge,&#123;<span class="attr">color</span>:<span class="string">&#x27;F00000&#x27;</span>&#125;,<span class="string">&#x27;merge&#x27;</span>,<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(China_to_Image,&#123;<span class="string">&quot;min&quot;</span>:<span class="number">1</span>,<span class="string">&quot;max&quot;</span>:<span class="number">40</span>,<span class="string">&quot;palette&quot;</span>:[<span class="string">&quot;ff9c07&quot;</span>,<span class="string">&quot;f0ff1b&quot;</span>,<span class="string">&quot;1aff0b&quot;</span>]&#125;,<span class="string">&#x27;image&#x27;</span>,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GEE</category>
        <category>GEE入门</category>
      </categories>
      <tags>
        <tag>Google Earth Engine</tag>
        <tag>Remote sensing</tag>
      </tags>
  </entry>
  <entry>
    <title>GEE实战 | LULC获取与处理</title>
    <url>/2020/10/27/GEE%E5%AE%9E%E6%88%98%20LULC%E8%8E%B7%E5%8F%96%E4%B8%8E%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="LULC数据库"><a href="#LULC数据库" class="headerlink" title="LULC数据库"></a>LULC数据库</h1><p>&emsp;&emsp;LULC百度百科：LULC（the land-use/land-cover 土地利用和土地覆盖）数据包括城市和建筑区、农田、牧场、林地、水、湿地、荒地、冻土带和终年积雪或终年结冰地带的有关信息。<br>&emsp;&emsp;GEE提供了大量LULC数据库，搜索相关结果如下：<br><img src="https://img-blog.csdnimg.cn/20200906170719813.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200906170732699.png?x-oss-process" alt="在这里插入图片描述"><br>&emsp;&emsp;点击进去皆有相关介绍和导入方式以及用法示例等。下面简单介绍下前几个数据库导入方式并重点介绍美国的NLCD数据库。</p>
<p><img src="https://img-blog.csdnimg.cn/2020090617101157.png?x-oss-process" alt="在这里插入图片描述"><br><br></p>
<h2 id="MCD12Q1-006"><a href="#MCD12Q1-006" class="headerlink" title="MCD12Q1.006"></a>MCD12Q1.006</h2><p>&emsp;&emsp;MCD12Q1 V6产品按六种不同的分类方案按年间隔（2001-2016年）提供全球土地覆盖类型。它是使用MODIS Terra和Aqua反射数据的监督分类得出的。然后，对受监管的分类进行额外的后处理，这些后处理结合了先前的知识和辅助信息以进一步完善特定的类别。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MCD12Q1.006</span></span><br><span class="line"><span class="keyword">var</span> dataset = ee.ImageCollection(<span class="string">&#x27;MODIS/006/MCD12Q1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> igbpLandCover = dataset.select(<span class="string">&#x27;LC_Type1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> igbpLandCoverVis = &#123;</span><br><span class="line">  min: <span class="number">1.0</span>,</span><br><span class="line">  max: <span class="number">17.0</span>,</span><br><span class="line">  palette: [</span><br><span class="line">    <span class="string">&#x27;05450a&#x27;</span>, <span class="string">&#x27;086a10&#x27;</span>, <span class="string">&#x27;54a708&#x27;</span>, <span class="string">&#x27;78d203&#x27;</span>, <span class="string">&#x27;009900&#x27;</span>, <span class="string">&#x27;c6b044&#x27;</span>, <span class="string">&#x27;dcd159&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dade48&#x27;</span>, <span class="string">&#x27;fbff13&#x27;</span>, <span class="string">&#x27;b6ff05&#x27;</span>, <span class="string">&#x27;27ff87&#x27;</span>, <span class="string">&#x27;c24f44&#x27;</span>, <span class="string">&#x27;a5a5a5&#x27;</span>, <span class="string">&#x27;ff6d4c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;69fff8&#x27;</span>, <span class="string">&#x27;f9ffa4&#x27;</span>, <span class="string">&#x27;1c0dff&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span>.setCenter(<span class="number">6.746</span>, <span class="number">46.529</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(igbpLandCover, igbpLandCoverVis, <span class="string">&#x27;IGBP Land Cover&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200906181312303.png?x-oss-process" alt="在这里插入图片描述"></p>
<br>

<h2 id="GlobCover"><a href="#GlobCover" class="headerlink" title="GlobCover"></a>GlobCover</h2><p>&emsp;&emsp;GlobCover 2009是基于ENVISAT中分辨率成像光谱仪（MERIS）1B级数据的全球土地覆盖图，该数据以全分辨率模式获取，空间分辨率约为300米。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//GlobCover</span></span><br><span class="line"><span class="keyword">var</span> dataset = ee.Image(<span class="string">&#x27;ESA/GLOBCOVER_L4_200901_200912_V2_3&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> landcover = dataset.select(<span class="string">&#x27;landcover&#x27;</span>);</span><br><span class="line"><span class="built_in">Map</span>.setCenter(-<span class="number">88.6</span>, <span class="number">26.4</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(landcover, &#123;&#125;, <span class="string">&#x27;Landcover&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200906173246181.png?x-oss-process" alt="在这里插入图片描述"></p>
<br>

<h2 id="CGLS-LC100-collection-2"><a href="#CGLS-LC100-collection-2" class="headerlink" title="CGLS-LC100 collection 2"></a>CGLS-LC100 collection 2</h2><p>&emsp;&emsp;The Copernicus Global Land Service（CGLS）在全球范围内针对陆地表面的状况和演变提供一系列生物地球物理产品。 100 m分辨率的动态土地覆盖图（CGLS-LC100）是CGLS产品组合中的新产品，可提供100 m空间分辨率的全球土地覆盖图。<br> &emsp;&emsp;CGLS土地覆盖产品除了提供了主要的土地覆盖分类，还包括所有基本土地覆盖类别的连续田地层，从而为土地覆盖类型的植被/地面覆盖提供比例估计。这种连续的分类方案可能比标准分类方案更好地描述了异类土地覆盖的区域，因此，可以针对应用进行量身定制（例如森林监测，作物监测，生物多样性和保护，监测非洲的环境和安全，气候模拟等等）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Copernicus</span></span><br><span class="line"><span class="keyword">var</span> dataset = ee.ImageCollection(<span class="string">&quot;COPERNICUS/Landcover/100m/Proba-V/Global&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> visualization = &#123;</span><br><span class="line">  bands: [<span class="string">&#x27;discrete_classification&#x27;</span>],</span><br><span class="line">  min: <span class="number">0.0</span>,</span><br><span class="line">  max: <span class="number">200.0</span>,</span><br><span class="line">  palette: [</span><br><span class="line">    <span class="string">&quot;032f7e&quot;</span>,<span class="string">&quot;02740b&quot;</span>,<span class="string">&quot;02740b&quot;</span>,<span class="string">&quot;8cf502&quot;</span>,<span class="string">&quot;8cf502&quot;</span>,<span class="string">&quot;a4da01&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ffbd05&quot;</span>,<span class="string">&quot;ffbd05&quot;</span>,<span class="string">&quot;7a5a02&quot;</span>,<span class="string">&quot;f0ff0f&quot;</span>,<span class="string">&quot;869b36&quot;</span>,<span class="string">&quot;6091b4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;999999&quot;</span>,<span class="string">&quot;ff4e4e&quot;</span>,<span class="string">&quot;ff4e4e&quot;</span>,<span class="string">&quot;ffffff&quot;</span>,<span class="string">&quot;feffc0&quot;</span>,<span class="string">&quot;020202&quot;</span>,</span><br><span class="line">    <span class="string">&quot;020202&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.setCenter(-<span class="number">88.6</span>, <span class="number">26.4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.addLayer(dataset, visualization, <span class="string">&quot;Land Cover&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200906172354362.png?x-oss-process" alt="在这里插入图片描述"></p>
<br>

<h2 id="Copernicus-CORINE-Land-Cover"><a href="#Copernicus-CORINE-Land-Cover" class="headerlink" title="Copernicus CORINE Land Cover"></a>Copernicus CORINE Land Cover</h2><p>&emsp;&emsp;Copernicus CORINE Land Cover始于1985年，以标准化欧洲土地数据收集以支持环境政策制定。该项目由欧洲环境局（EEA）在欧盟哥白尼计划的框架内进行协调，并由国家团队实施。<br>&emsp;&emsp;时间段为：<br>&emsp;&emsp;* 1990年asset：1989年至1998年<br>&emsp;&emsp;* 2000年asset：1999年至2001年<br>&emsp;&emsp;* 2006年asset：2005年至2007年<br>&emsp;&emsp;* 2012年asset：2011年至2012年<br>&emsp;&emsp;* 2018年asset：2017年至2018年</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataset = ee.Image(<span class="string">&#x27;COPERNICUS/CORINE/V20/100m/2012&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> landCover = dataset.select(<span class="string">&#x27;landcover&#x27;</span>);</span><br><span class="line"><span class="built_in">Map</span>.setCenter(<span class="number">16.436</span>, <span class="number">39.825</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(landCover, &#123;&#125;, <span class="string">&#x27;Land Cover&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200906172933962.png?x-oss-process" alt="在这里插入图片描述"></p>
<h2 id="NLCD"><a href="#NLCD" class="headerlink" title="NLCD"></a>NLCD</h2><p>&emsp;&emsp;NLCD（国家土地覆盖数据库）是一个基于Landsat的30米土地覆盖数据库，涵盖8个时间段（1992、2001、2004、2006、2008、2011、2013和2016）。其中， 1992年的图像无法与NLCD的其他时间段直接比较。 该数据集包含八个时期中每个时期的美国大陆图像，以及2001和2011年分别位于阿拉斯加，夏威夷和波多黎各的图像。<br>&emsp;&emsp;NLCD共有20类，分类如下。<a href="https://www.mrlc.gov/data/legends/national-land-cover-database-2016-nlcd2016-legend">更多信息</a><br><img src="https://img-blog.csdnimg.cn/20200906171340267.png?x-oss-process=200x600" alt="在这里插入图片描述"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataset = ee.ImageCollection(<span class="string">&#x27;USGS/NLCD&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> landcover = dataset.select(<span class="string">&#x27;landcover&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> landcoverVis = &#123;</span><br><span class="line">  min: <span class="number">0.0</span>,</span><br><span class="line">  max: <span class="number">95.0</span>,</span><br><span class="line">  palette: [</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;466b9f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d1def8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dec5c5&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d99282&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;eb0000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ab0000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b3ac9f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;68ab5f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1c5f2c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b5c58f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;af963c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ccb879&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dfdfc2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d1d182&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a3cc51&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;82ba9e&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dcd939&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ab6c28&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b8d9eb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;6c9fb8&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span>.setCenter(-<span class="number">95</span>, <span class="number">38</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(landcover, landcoverVis, <span class="string">&#x27;Landcover&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200906181816875.png?x-oss-process" alt="在这里插入图片描述"></p>
<h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>&emsp;&emsp;从分类图和代码可以看出，多分类对应的像素值并不是连续的。所以有时候为了方便处理，比如训练监督分类模型，最好将其元素值映射为连续的，那么该如何做呢，先上一个简单的例子，根据多分类结果提取水体，这里我们将11和12类都定义为水体。<br>&emsp;&emsp;通过使用remap函数可以将像素值映射到其他像素值，完成映射、合并等操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> LULC = ee.Image(<span class="string">&quot;USGS/NLCD/NLCD2016&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> landcover_water= LULC.select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">                      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">                            ,[ <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">                            .rename(<span class="string">&#x27;landcover&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wcoverVis = &#123;</span><br><span class="line">  bands:<span class="string">&#x27;landcover&#x27;</span>,</span><br><span class="line">  min: <span class="number">0.0</span>,</span><br><span class="line">  max: <span class="number">1.0</span>,</span><br><span class="line">  palette: [</span><br><span class="line">    <span class="string">&quot;000000&quot;</span>,<span class="string">&quot;00ff&quot;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.addLayer(landcover_water,wcoverVis, <span class="string">&#x27;water&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;结果如图，水体对应像素值为1，非水体为0。可视化中，水体显示为蓝色，非水体为黑色。</p>
<p><img src="https://img-blog.csdnimg.cn/20200906190009604.png?x-oss-process" alt="在这里插入图片描述"></p>
<p>&emsp;&emsp;接下来映射为8类地物。同理也可以映射为20类（本数），6类等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> LULC = ee.Image(<span class="string">&quot;USGS/NLCD/NLCD2016&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> landcover_8= LULC.select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">                 .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">                            ,[ <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>],<span class="number">7</span>)</span><br><span class="line">                            .rename(<span class="string">&#x27;landcover&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c8coverVis = &#123;</span><br><span class="line">  bands:<span class="string">&#x27;landcover&#x27;</span>,</span><br><span class="line">  min: <span class="number">0.0</span>,</span><br><span class="line">  max: <span class="number">7.0</span>,</span><br><span class="line">  palette: [</span><br><span class="line">    <span class="string">&quot;ff0000&quot;</span>,<span class="string">&quot;00ff00&quot;</span>,<span class="string">&quot;0000ff&quot;</span>,<span class="string">&quot;ffff00&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ff00ff&quot;</span>,<span class="string">&quot;00ffff&quot;</span>,<span class="string">&quot;ffffff&quot;</span>,<span class="string">&quot;000000&quot;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.addLayer(landcover_8,c8coverVis, <span class="string">&#x27;gourndtruth&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;可视化结果如图。<br><img src="https://img-blog.csdnimg.cn/20200906190252559.png?x-oss-process" alt="在这里插入图片描述"></p>
<h3 id="单独映射"><a href="#单独映射" class="headerlink" title="单独映射"></a>单独映射</h3><p>&emsp;&emsp;其中，如果不希望映射到一张图上，可以单独映射然后合并。以8分类为例。最后合成仍然是一张图，但是具有8个波段属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var LULC = ee.Image(&quot;USGS/NLCD/NLCD2016&quot;);</span></span><br><span class="line"><span class="keyword">var</span> nlcd_0 = ee.Image(<span class="string">&#x27;USGS/NLCD/NLCD2016&#x27;</span>)</span><br><span class="line">      .select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">          ,[<span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">      .rename(<span class="string">&#x27;LABEL_0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nlcd_1 = ee.Image(<span class="string">&#x27;USGS/NLCD/NLCD2016&#x27;</span>)</span><br><span class="line">      .select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">          ,[<span class="number">0</span>,<span class="number">0</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">      .rename(<span class="string">&#x27;LABEL_1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nlcd_2 = ee.Image(<span class="string">&#x27;USGS/NLCD/NLCD2016&#x27;</span>)</span><br><span class="line">      .select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">          ,[<span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">1</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">      .rename(<span class="string">&#x27;LABEL_2&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> nlcd_3 = ee.Image(<span class="string">&#x27;USGS/NLCD/NLCD2016&#x27;</span>)</span><br><span class="line">      .select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">          ,[<span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">1</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">      .rename(<span class="string">&#x27;LABEL_3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nlcd_4 = ee.Image(<span class="string">&#x27;USGS/NLCD/NLCD2016&#x27;</span>)</span><br><span class="line">      .select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">          ,[<span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">      .rename(<span class="string">&#x27;LABEL_4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nlcd_5 = ee.Image(<span class="string">&#x27;USGS/NLCD/NLCD2016&#x27;</span>)</span><br><span class="line">      .select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">          ,[<span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">      .rename(<span class="string">&#x27;LABEL_5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nlcd_6 = ee.Image(<span class="string">&#x27;USGS/NLCD/NLCD2016&#x27;</span>)</span><br><span class="line">      .select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">          ,[<span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>,<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">      .rename(<span class="string">&#x27;LABEL_6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nlcd_7 = ee.Image(<span class="string">&#x27;USGS/NLCD/NLCD2016&#x27;</span>)</span><br><span class="line">      .select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">          ,[<span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">1</span>,<span class="number">1</span>],<span class="number">0</span>)</span><br><span class="line">      .rename(<span class="string">&#x27;LABEL_7&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8类合成LULC</span></span><br><span class="line"><span class="keyword">var</span> featureStack = ee.Image.cat([</span><br><span class="line">  nlcd_0.select(<span class="string">&#x27;LABEL_0&#x27;</span>),</span><br><span class="line">  nlcd_1.select(<span class="string">&#x27;LABEL_1&#x27;</span>),</span><br><span class="line">  nlcd_2.select(<span class="string">&#x27;LABEL_2&#x27;</span>),</span><br><span class="line">  nlcd_3.select(<span class="string">&#x27;LABEL_3&#x27;</span>),</span><br><span class="line">  nlcd_4.select(<span class="string">&#x27;LABEL_4&#x27;</span>),</span><br><span class="line">  nlcd_5.select(<span class="string">&#x27;LABEL_5&#x27;</span>),</span><br><span class="line">  nlcd_6.select(<span class="string">&#x27;LABEL_6&#x27;</span>),</span><br><span class="line">  nlcd_7.select(<span class="string">&#x27;LABEL_7&#x27;</span>)</span><br><span class="line">]).float()</span><br><span class="line"></span><br><span class="line"><span class="comment">// print(featureStack,&#x27;featureStack&#x27;)</span></span><br><span class="line"><span class="keyword">var</span> LABEL=[<span class="string">&#x27;LABEL_0&#x27;</span>, <span class="string">&#x27;LABEL_1&#x27;</span>, <span class="string">&#x27;LABEL_2&#x27;</span>, <span class="string">&#x27;LABEL_3&#x27;</span>, <span class="string">&#x27;LABEL_4&#x27;</span>, <span class="string">&#x27;LABEL_5&#x27;</span>, <span class="string">&#x27;LABEL_6&#x27;</span>, <span class="string">&#x27;LABEL_7&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和输入数据合成</span></span><br><span class="line"><span class="keyword">var</span> featureStacks = ee.Image.cat([</span><br><span class="line">  image.select(Bands),</span><br><span class="line">  featureStack.select(LABEL),</span><br><span class="line">]).float()</span><br><span class="line"><span class="comment">// print(featureStacks,&#x27;featureStacks&#x27;)</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GEE</category>
        <category>GEE实战</category>
      </categories>
      <tags>
        <tag>Google Earth Engine</tag>
        <tag>Remote sensing</tag>
      </tags>
  </entry>
  <entry>
    <title>GEE实战 | 窗口拆分(split panel)可视化</title>
    <url>/2020/10/27/GEE%E5%AE%9E%E6%88%98%20%E7%AA%97%E5%8F%A3%E6%8B%86%E5%88%86(split%20panel)%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<p>&emsp;&emsp;Split panel适合在可视化时同时对比效果，而且可以通过拖动，改变两边图像显示范围，可谓高大上可视化以及分析结果的利器。先看效果：<br><img src="https://img-blog.csdnimg.cn/20200826173134877.png?x-oss-process" alt="在这里插入图片描述"></p>
<p>&emsp;&emsp;左边是高分辨率土地分类图，右边是重采样后的，可以拖动中间的部件来改变显示范围，同时两边的按钮可以选择显示不同的图片。</p>
<p>&emsp;&emsp;不多说，直接JavaScript放代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test_c3_30 = ee.Image(<span class="string">&quot;users/daviddoyle1/test_c3_30&quot;</span>),</span><br><span class="line"><span class="keyword">var</span> test_c3 = ee.Image(<span class="string">&quot;users/daviddoyle1/test_c3&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> coverVis = &#123;</span><br><span class="line">  <span class="comment">// bands:&#x27;landcover&#x27;,</span></span><br><span class="line">  min: <span class="number">0.0</span>,</span><br><span class="line">  max: <span class="number">3.0</span>,</span><br><span class="line">  palette: [</span><br><span class="line">    <span class="string">&quot;000000&quot;</span>,<span class="string">&quot;0000ff&quot;</span>,<span class="string">&quot;00ff00&quot;</span>,<span class="string">&quot;0000ff&quot;</span> <span class="comment">//   水 建筑 空地</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无split panel可视化</span></span><br><span class="line"><span class="comment">// Map.addLayer(test_c3,coverVis, &#x27;test_c3&#x27;);</span></span><br><span class="line"><span class="comment">// Map.addLayer(test_c3_30,coverVis, &#x27;test_c3_30&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Split panel可视化</span></span><br><span class="line"><span class="keyword">var</span> images =&#123;</span><br><span class="line">  <span class="string">&#x27;high resolution&#x27;</span>:test_c3.visualize(coverVis),</span><br><span class="line">  <span class="string">&#x27;30m resolution&#x27;</span>:test_c3_30.visualize(coverVis),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Set up the maps and control widgets</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the left map, and have it display layer 0.</span></span><br><span class="line"><span class="keyword">var</span> leftMap = ui.Map();</span><br><span class="line">leftMap.setControlVisibility(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> leftSelector = addLayerSelector(leftMap, <span class="number">0</span>, <span class="string">&#x27;top-left&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the right map, and have it display layer 1.</span></span><br><span class="line"><span class="keyword">var</span> rightMap = ui.Map();</span><br><span class="line">rightMap.setControlVisibility(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> rightSelector = addLayerSelector(rightMap, <span class="number">1</span>, <span class="string">&#x27;top-right&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Adds a layer selection widget to the given map, to allow users to change</span></span><br><span class="line"><span class="comment">// which image is displayed in the associated map.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLayerSelector</span>(<span class="params">mapToChange, defaultValue, position</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> label = ui.Label(<span class="string">&#x27;Choose an image to visualize&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This function changes the given map to show the selected image.</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updateMap</span>(<span class="params">selection</span>) </span>&#123;</span><br><span class="line">    mapToChange.layers().set(<span class="number">0</span>, ui.Map.Layer(images[selection]));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Configure a selection dropdown to allow the user to choose between images,</span></span><br><span class="line">  <span class="comment">// and set the map to update when a user makes a selection.</span></span><br><span class="line">  <span class="keyword">var</span> select = ui.Select(&#123;<span class="attr">items</span>: <span class="built_in">Object</span>.keys(images), <span class="attr">onChange</span>: updateMap&#125;);</span><br><span class="line">  select.setValue(<span class="built_in">Object</span>.keys(images)[defaultValue], <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> controlPanel =</span><br><span class="line">      ui.Panel(&#123;<span class="attr">widgets</span>: [label, select], <span class="attr">style</span>: &#123;<span class="attr">position</span>: position&#125;&#125;);</span><br><span class="line"></span><br><span class="line">  mapToChange.add(controlPanel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Tie everything together</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a SplitPanel to hold the adjacent, linked maps.</span></span><br><span class="line"><span class="keyword">var</span> splitPanel = ui.SplitPanel(&#123;</span><br><span class="line">  firstPanel: leftMap,</span><br><span class="line">  secondPanel: rightMap,</span><br><span class="line">  wipe: <span class="literal">true</span>,</span><br><span class="line">  style: &#123;<span class="attr">stretch</span>: <span class="string">&#x27;both&#x27;</span>&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the SplitPanel as the only thing in the UI root.</span></span><br><span class="line">ui.root.widgets().reset([splitPanel]);</span><br><span class="line"><span class="keyword">var</span> linker = ui.Map.Linker([leftMap, rightMap]);</span><br><span class="line"><span class="comment">// leftMap.setCenter(-122.32, 37.7413, 12);</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GEE</category>
        <category>GEE实战</category>
      </categories>
      <tags>
        <tag>Google Earth Engine</tag>
        <tag>Remote sensing</tag>
      </tags>
  </entry>
  <entry>
    <title>GEE实战 | 计算NDVI &amp; NDWI</title>
    <url>/2020/10/27/GEE%E5%AE%9E%E6%88%98%20%E8%AE%A1%E7%AE%97NDVI&amp;NDWI/</url>
    <content><![CDATA[<h1 id="NDVI"><a href="#NDVI" class="headerlink" title="NDVI"></a>NDVI</h1><h2 id="NDVI数据库"><a href="#NDVI数据库" class="headerlink" title="NDVI数据库"></a>NDVI数据库</h2><p>&emsp;&emsp;GEE自身提供了相当多的NDVI资源可以直接导入使用。<br><img src="https://img-blog.csdnimg.cn/20200901162210648.png?x-oss-process" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200901162216594.png?x-oss-process" alt="在这里插入图片描述"></p>
<p>&emsp;&emsp;以Landsat 8 8天周期NDVI产品为例，导入及可视化代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataset = ee.ImageCollection(<span class="string">&#x27;LANDSAT/LC08/C01/T1_8DAY_NDVI&#x27;</span>)</span><br><span class="line">                  .filterDate(<span class="string">&#x27;2017-01-01&#x27;</span>, <span class="string">&#x27;2017-12-31&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> colorized = dataset.select(<span class="string">&#x27;NDVI&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> colorizedVis = &#123;</span><br><span class="line">  min: <span class="number">0.0</span>,</span><br><span class="line">  max: <span class="number">1.0</span>,</span><br><span class="line">  palette: [</span><br><span class="line">    <span class="string">&#x27;FFFFFF&#x27;</span>, <span class="string">&#x27;CE7E45&#x27;</span>, <span class="string">&#x27;DF923D&#x27;</span>, <span class="string">&#x27;F1B555&#x27;</span>, <span class="string">&#x27;FCD163&#x27;</span>, <span class="string">&#x27;99B718&#x27;</span>, <span class="string">&#x27;74A901&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;66A000&#x27;</span>, <span class="string">&#x27;529400&#x27;</span>, <span class="string">&#x27;3E8601&#x27;</span>, <span class="string">&#x27;207401&#x27;</span>, <span class="string">&#x27;056201&#x27;</span>, <span class="string">&#x27;004C00&#x27;</span>, <span class="string">&#x27;023B01&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;012E01&#x27;</span>, <span class="string">&#x27;011D01&#x27;</span>, <span class="string">&#x27;011301&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span>.setCenter(<span class="number">6.746</span>, <span class="number">46.529</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(colorized, colorizedVis, <span class="string">&#x27;Colorized&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="计算NDVI"><a href="#计算NDVI" class="headerlink" title="计算NDVI"></a>计算NDVI</h2><p>&emsp;&emsp;当然，有时候产品无法满足要求，需要根据波段信息运算。GEE可以方便的使用几行代码完成运算。<br>&emsp;&emsp;首先放上NDVI的计算公式：<br>&emsp;&emsp;NDVI = (近红外波段 - 红波段) / (近红外波段 + 红波段)<br>&emsp;&emsp;针对每种卫星的波段，选用的波段都有所不同，公式如下：<br>&emsp;&emsp;Landsat8: NDVI = (band5 - band4) / (band5 + band4)<br>&emsp;&emsp;Sentinel2: NDVI = (band8 - band4) / (band8 + band4)<br>&emsp;&emsp;Modis: NDVI = (band2 - band1) / (band2 + band1)<br>&emsp;&emsp;ETM/TM: NDVI = (band4 - band3) / (band4 + band3)<br>&emsp;&emsp;AVHRR: NDVI = (CH2 - CH1) / (CH2 + CH1) </p>
<p>&emsp;&emsp;接下来以Landsat 8和Sentinel 2为例，计算NDVI，摘自某位网友，侵删。</p>
<p>&emsp;&emsp;Landsat 8：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//landsat 8 NDVI Demo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法一：普通方式，通过将数学公式翻译为代码直接计算</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDVI_V1</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> nir = img.select(<span class="string">&quot;B5&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> red = img.select(<span class="string">&quot;B4&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> ndvi = nir.subtract(red).divide(nir.add(red));</span><br><span class="line"> <span class="keyword">return</span> ndvi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：将计算公式直接带入，通过解析字符串实现计算。这种方式更加灵活，在某些特殊情况下非常好用，而且非常直观。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDVI_V2</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> nir = img.select(<span class="string">&quot;B5&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> red = img.select(<span class="string">&quot;B4&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> ndvi = img.expression(</span><br><span class="line">   <span class="string">&quot;(B5 - B4)/(B5 + B4)&quot;</span>,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">&quot;B5&quot;</span>: nir,</span><br><span class="line">     <span class="string">&quot;B4&quot;</span>: red</span><br><span class="line">   &#125;</span><br><span class="line"> );</span><br><span class="line"> <span class="keyword">return</span> ndvi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三：GEE将计算公式封装为一个方法可以直接调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDVI_V3</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> ndvi = img.normalizedDifference([<span class="string">&quot;B5&quot;</span>,<span class="string">&quot;B4&quot;</span>]);</span><br><span class="line"> <span class="keyword">return</span> ndvi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//landsat8 and roi 我们这里使用的2017年全部的Landsat8影像，地点是沧州附近 </span></span><br><span class="line"><span class="keyword">var</span> l8_col = ee.ImageCollection(<span class="string">&quot;LANDSAT/LC08/C01/T1_RT_TOA&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> roi = ee.Geometry.Point([<span class="number">117.0703125</span>,<span class="number">38.09133660751176</span>]);</span><br><span class="line"><span class="keyword">var</span> img = ee.Image(l8_col.filterBounds(roi)</span><br><span class="line">                       .filterDate(<span class="string">&quot;2017-01-01&quot;</span>, <span class="string">&quot;2017-09-24&quot;</span>)</span><br><span class="line">                       .first());</span><br><span class="line"><span class="keyword">var</span> ndvi1 = NDVI_V1(img);</span><br><span class="line"><span class="keyword">var</span> ndvi2 = NDVI_V2(img);</span><br><span class="line"><span class="keyword">var</span> ndvi3 = NDVI_V3(img);</span><br><span class="line"><span class="comment">//NDVI显示配置，NDVI值范围是-1到1</span></span><br><span class="line"><span class="keyword">var</span> visParam = &#123;</span><br><span class="line"> min: -<span class="number">0.2</span>,</span><br><span class="line"> max: <span class="number">0.8</span>,</span><br><span class="line"> palette: <span class="string">&#x27;FFFFFF, CE7E45, DF923D, F1B555, FCD163, 99B718, 74A901, 66A000, 529400,&#x27;</span> +</span><br><span class="line">   <span class="string">&#x27;3E8601, 207401, 056201, 004C00, 023B01, 012E01, 011D01, 011301&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//原始影像真彩色</span></span><br><span class="line"><span class="built_in">Map</span>.addLayer(img, &#123;<span class="attr">bands</span>:[<span class="string">&quot;B4&quot;</span>, <span class="string">&quot;B3&quot;</span>, <span class="string">&quot;B2&quot;</span>], <span class="attr">max</span>:<span class="number">0.3</span>&#125;, <span class="string">&quot;raw_img&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndvi1, visParam, <span class="string">&quot;ndvi_1&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndvi2, visParam, <span class="string">&quot;ndvi_2&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndvi3, visParam, <span class="string">&quot;ndvi_3&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.centerObject(roi, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面只是展示了图像，我们在分析的时候还需要查看我们所筛选的影像NDVI值</span></span><br><span class="line"><span class="keyword">var</span> ndvi_list = l8_col.filterDate(<span class="string">&quot;2017-01-01&quot;</span>, <span class="string">&quot;2017-09-24&quot;</span>)</span><br><span class="line">   .map(<span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//通过云筛选landsat8</span></span><br><span class="line">   <span class="keyword">var</span> cloud = ee.Algorithms.Landsat.simpleCloudScore(image).select(<span class="string">&quot;cloud&quot;</span>);</span><br><span class="line">   <span class="keyword">var</span> mask = cloud.lte(<span class="number">20</span>);</span><br><span class="line">   <span class="keyword">var</span> ndvi = image.normalizedDifference([<span class="string">&#x27;B5&#x27;</span>, <span class="string">&#x27;B4&#x27;</span>]).rename(<span class="string">&#x27;NDVI&#x27;</span>);</span><br><span class="line">   <span class="keyword">return</span> image.addBands(ndvi).updateMask(mask);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//展示每一张影像NDVI值 </span></span><br><span class="line"><span class="keyword">var</span> chart1 = ui.Chart.image.series(&#123;</span><br><span class="line"> <span class="comment">//影像集合</span></span><br><span class="line"> imageCollection: ndvi_list.select(<span class="string">&#x27;NDVI&#x27;</span>),</span><br><span class="line"> <span class="comment">//关心区域</span></span><br><span class="line"> region: roi,</span><br><span class="line"> <span class="comment">//关心区域计算方式，这里采用的是均值。也就是比如roi是一个矩形，</span></span><br><span class="line"> <span class="comment">//那么在图表中这个点的值就是矩形内所有像素值求平均。</span></span><br><span class="line"> reducer: ee.Reducer.mean(),</span><br><span class="line"> <span class="comment">//分辨率</span></span><br><span class="line"> scale: <span class="number">30</span></span><br><span class="line">&#125;).setOptions(&#123;<span class="attr">title</span>: <span class="string">&#x27;NDVI IMAGE SERIES&#x27;</span>&#125;);</span><br><span class="line">print(chart1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//展示每一天所关心区域的NDVI值</span></span><br><span class="line"><span class="keyword">var</span> chart2 = ui.Chart.image.doySeries(&#123;</span><br><span class="line"> imageCollection: ndvi_list.select(<span class="string">&#x27;NDVI&#x27;</span>),</span><br><span class="line"> region:roi,</span><br><span class="line"> regionReducer: ee.Reducer.mean(),</span><br><span class="line"> scale:<span class="number">30</span></span><br><span class="line">&#125;).setOptions(&#123;<span class="attr">title</span>: <span class="string">&quot;ROI NDVI EACH DAY SERIES&quot;</span>&#125;)</span><br><span class="line">print(chart2)</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp; Sentinel 2:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sentinel2 NDVI Demo</span></span><br><span class="line"><span class="comment">//方法一：普通方式，通过将数学公式翻译为代码直接计算</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDVI_V1</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> nir = img.select(<span class="string">&quot;B8&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> red = img.select(<span class="string">&quot;B4&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> ndvi = nir.subtract(red).divide(nir.add(red));</span><br><span class="line"> <span class="keyword">return</span> ndvi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：将计算公式直接带入，通过解析字符串实现计算。这种方式更加灵活，在某些特殊情况下非常好用，而且非常直观。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDVI_V2</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> nir = img.select(<span class="string">&quot;B8&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> red = img.select(<span class="string">&quot;B4&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> ndvi = img.expression(</span><br><span class="line">   <span class="string">&quot;(B5 - B4)/(B5 + B4)&quot;</span>,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">&quot;B5&quot;</span>: nir,</span><br><span class="line">     <span class="string">&quot;B4&quot;</span>: red</span><br><span class="line">   &#125;</span><br><span class="line"> );</span><br><span class="line"> <span class="keyword">return</span> ndvi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三：GEE将计算公式封装为一个方法可以直接调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDVI_V3</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> ndvi = img.normalizedDifference([<span class="string">&quot;B8&quot;</span>,<span class="string">&quot;B4&quot;</span>]);</span><br><span class="line"> <span class="keyword">return</span> ndvi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//sentinel2 and roi</span></span><br><span class="line"><span class="keyword">var</span> s2_col = ee.ImageCollection(<span class="string">&quot;COPERNICUS/S2&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> roi = ee.Geometry.Point([<span class="number">117.0703125</span>,<span class="number">38.09133660751176</span>]);</span><br><span class="line"><span class="keyword">var</span> img = ee.Image(s2_col.filterBounds(roi)</span><br><span class="line">                       .filterDate(<span class="string">&quot;2017-01-01&quot;</span>, <span class="string">&quot;2017-09-24&quot;</span>)</span><br><span class="line">                       .first());</span><br><span class="line"><span class="keyword">var</span> ndvi1 = NDVI_V1(img);</span><br><span class="line"><span class="keyword">var</span> ndvi2 = NDVI_V2(img);</span><br><span class="line"><span class="keyword">var</span> ndvi3 = NDVI_V3(img);</span><br><span class="line"><span class="keyword">var</span> visParam = &#123;</span><br><span class="line"> min: -<span class="number">0.2</span>,</span><br><span class="line"> max: <span class="number">0.8</span>,</span><br><span class="line"> palette: <span class="string">&#x27;FFFFFF, CE7E45, DF923D, F1B555, FCD163, 99B718, 74A901, 66A000, 529400,&#x27;</span> +</span><br><span class="line">   <span class="string">&#x27;3E8601, 207401, 056201, 004C00, 023B01, 012E01, 011D01, 011301&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span>.addLayer(img, &#123;<span class="attr">bands</span>:[<span class="string">&quot;B8&quot;</span>, <span class="string">&quot;B4&quot;</span>, <span class="string">&quot;B3&quot;</span>], <span class="attr">max</span>:<span class="number">3048</span>&#125;, <span class="string">&quot;raw_img&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndvi1, visParam, <span class="string">&quot;ndvi_1&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndvi2, visParam, <span class="string">&quot;ndvi_2&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndvi3, visParam, <span class="string">&quot;ndvi_3&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.centerObject(roi, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//show charts</span></span><br><span class="line"><span class="keyword">var</span> ndvi_list = s2_col.filterDate(<span class="string">&quot;2017-01-01&quot;</span>, <span class="string">&quot;2017-09-24&quot;</span>)</span><br><span class="line">   .map(<span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> ndvi = image.normalizedDifference([<span class="string">&#x27;B8&#x27;</span>, <span class="string">&#x27;B4&#x27;</span>]).rename(<span class="string">&#x27;NDVI&#x27;</span>);</span><br><span class="line">   <span class="keyword">return</span> image.addBands(ndvi);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//展示每一张影像NDVI值 </span></span><br><span class="line"><span class="keyword">var</span> chart1 = ui.Chart.image.series(&#123;</span><br><span class="line"> <span class="comment">//影像集合</span></span><br><span class="line"> imageCollection: ndvi_list.select(<span class="string">&#x27;NDVI&#x27;</span>),</span><br><span class="line"> <span class="comment">//关心区域</span></span><br><span class="line"> region: roi,</span><br><span class="line"> <span class="comment">//关心区域计算方式，这里采用的是均值。也就是比如roi是一个矩形，</span></span><br><span class="line"> <span class="comment">//那么在图表中这个点的值就是矩形内所有像素值求平均。</span></span><br><span class="line"> reducer: ee.Reducer.mean(),</span><br><span class="line"> <span class="comment">//分辨率</span></span><br><span class="line"> scale: <span class="number">30</span></span><br><span class="line">&#125;).setOptions(&#123;<span class="attr">title</span>: <span class="string">&#x27;NDVI IMAGE SERIES&#x27;</span>&#125;);</span><br><span class="line">print(chart1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//展示每一天所关心区域的NDVI值</span></span><br><span class="line"><span class="keyword">var</span> chart2 = ui.Chart.image.doySeries(&#123;</span><br><span class="line"> imageCollection: ndvi_list.select(<span class="string">&#x27;NDVI&#x27;</span>),</span><br><span class="line"> region:roi,</span><br><span class="line"> regionReducer: ee.Reducer.mean(),</span><br><span class="line"> scale:<span class="number">30</span></span><br><span class="line">&#125;).setOptions(&#123;<span class="attr">title</span>: <span class="string">&quot;ROI NDVI EACH DAY SERIES&quot;</span>&#125;)</span><br><span class="line">print(chart2)</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h1 id="NDWI"><a href="#NDWI" class="headerlink" title="NDWI"></a>NDWI</h1><h2 id="NDWI数据库"><a href="#NDWI数据库" class="headerlink" title="NDWI数据库"></a>NDWI数据库</h2><p>&emsp;&emsp;GEE自身提供了相当多的NDVI资源可以直接导入使用。<br><img src="https://img-blog.csdnimg.cn/20200901162231806.png?x-oss-process" alt="在这里插入图片描述"></p>
<p>&emsp;&emsp;以Landsat 8 32天周期NDWI产品为例，导入及可视化代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataset = ee.ImageCollection(<span class="string">&#x27;LANDSAT/LC08/C01/T1_32DAY_NDWI&#x27;</span>)</span><br><span class="line">                  .filterDate(<span class="string">&#x27;2017-01-01&#x27;</span>, <span class="string">&#x27;2017-12-31&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> colorized = dataset.select(<span class="string">&#x27;NDWI&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> colorizedVis = &#123;</span><br><span class="line">  min: <span class="number">0.0</span>,</span><br><span class="line">  max: <span class="number">1.0</span>,</span><br><span class="line">  palette: [<span class="string">&#x27;0000ff&#x27;</span>, <span class="string">&#x27;00ffff&#x27;</span>, <span class="string">&#x27;ffff00&#x27;</span>, <span class="string">&#x27;ff0000&#x27;</span>, <span class="string">&#x27;ffffff&#x27;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span>.setCenter(<span class="number">6.746</span>, <span class="number">46.529</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(colorized, colorizedVis, <span class="string">&#x27;Colorized&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="计算NDWI"><a href="#计算NDWI" class="headerlink" title="计算NDWI"></a>计算NDWI</h2><p>&emsp;&emsp;同理，NDWI的计算公式：<br>&emsp;&emsp;NDWI = (绿波段 - 近红外波段) / (绿波段 + 近红外波段)<br>&emsp;&emsp;针对每种卫星的波段，选用的波段都有所不同，公式如下：<br>&emsp;&emsp;landsat8: NDWI = (band3 - band5) / (band3 + band5)<br>&emsp;&emsp;landsat5/7: NDWI = (band2 - band4) / (band2 + band4)<br>&emsp;&emsp;sentinel2: NDWI = (band3 - band8) / (band3 + band8)</p>
<p>&emsp;&emsp;接下来以Landsat 8和Sentinel 2为例，计算NWVI，摘自某位网友，侵删。</p>
<p>&emsp;&emsp;Landsat 8：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//landsat 8 NDWI Demo</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDWI_V1</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> nir = img.select(<span class="string">&quot;B5&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> green = img.select(<span class="string">&quot;B3&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> ndwi = green.subtract(nir).divide(green.add(nir));</span><br><span class="line"> <span class="keyword">return</span> ndwi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDWI_V2</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> nir = img.select(<span class="string">&quot;B5&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> green = img.select(<span class="string">&quot;B3&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> ndwi = img.expression(</span><br><span class="line">   <span class="string">&quot;(B3 - B5)/(B3 + B5)&quot;</span>,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">&quot;B5&quot;</span>: nir,</span><br><span class="line">     <span class="string">&quot;B3&quot;</span>: green</span><br><span class="line">   &#125;</span><br><span class="line"> );</span><br><span class="line"> <span class="keyword">return</span> ndwi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDWI_V3</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> ndwi = img.normalizedDifference([<span class="string">&quot;B3&quot;</span>,<span class="string">&quot;B5&quot;</span>]);</span><br><span class="line"> <span class="keyword">return</span> ndwi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//landsat8 and roi</span></span><br><span class="line"><span class="keyword">var</span> l8_col = ee.ImageCollection(<span class="string">&quot;LANDSAT/LC8_L1T_TOA&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> roi = ee.Geometry.Point([<span class="number">124.1455078125</span>,<span class="number">45.644768217751924</span>]);</span><br><span class="line"><span class="keyword">var</span> img = ee.Image(l8_col.filterBounds(roi)</span><br><span class="line">                       .filterDate(<span class="string">&quot;2017-02-01&quot;</span>, <span class="string">&quot;2017-09-23&quot;</span>)</span><br><span class="line">                       .first());</span><br><span class="line"><span class="keyword">var</span> ndwi1 = NDWI_V1(img);</span><br><span class="line"><span class="keyword">var</span> ndwi2 = NDWI_V2(img);</span><br><span class="line"><span class="keyword">var</span> ndwi3 = NDWI_V3(img);</span><br><span class="line"><span class="keyword">var</span> visParam = &#123;</span><br><span class="line"> min: -<span class="number">0.5</span>,</span><br><span class="line"> max: <span class="number">0.5</span>,</span><br><span class="line"> palette: [<span class="string">&#x27;00FFFF&#x27;</span>, <span class="string">&#x27;0000FF&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span>.addLayer(img, &#123;<span class="attr">bands</span>:[<span class="string">&quot;B4&quot;</span>, <span class="string">&quot;B3&quot;</span>, <span class="string">&quot;B2&quot;</span>], <span class="attr">max</span>:<span class="number">0.3</span>&#125;, <span class="string">&quot;raw_img&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndwi1, visParam, <span class="string">&quot;ndwi_1&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndwi2, visParam, <span class="string">&quot;ndwi_2&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndwi3, visParam, <span class="string">&quot;ndwi_3&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.centerObject(roi, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//show charts</span></span><br><span class="line"><span class="keyword">var</span> ndwi_list = l8_col.filterDate(<span class="string">&quot;2017-01-01&quot;</span>, <span class="string">&quot;2017-09-23&quot;</span>)</span><br><span class="line">   .map(<span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> cloud = ee.Algorithms.Landsat.simpleCloudScore(image).select(<span class="string">&quot;cloud&quot;</span>);</span><br><span class="line">   <span class="keyword">var</span> mask = cloud.lte(<span class="number">20</span>);</span><br><span class="line">   <span class="keyword">var</span> ndwi = image.normalizedDifference([<span class="string">&#x27;B3&#x27;</span>, <span class="string">&#x27;B5&#x27;</span>]).rename(<span class="string">&#x27;NDWI&#x27;</span>);</span><br><span class="line">   <span class="keyword">return</span> image.addBands(ndwi).updateMask(mask);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> chart1 = ui.Chart.image.series(&#123;</span><br><span class="line"> imageCollection: ndwi_list.select(<span class="string">&#x27;NDWI&#x27;</span>),</span><br><span class="line"> region: roi,</span><br><span class="line"> reducer: ee.Reducer.mean(),</span><br><span class="line"> scale: <span class="number">30</span></span><br><span class="line">&#125;).setOptions(&#123;<span class="attr">title</span>: <span class="string">&#x27;NDWI IMAGE SERIES&#x27;</span>&#125;);</span><br><span class="line">print(chart1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chart2 = ui.Chart.image.doySeries(&#123;</span><br><span class="line"> imageCollection: ndwi_list.select(<span class="string">&#x27;NDWI&#x27;</span>),</span><br><span class="line"> region:roi,</span><br><span class="line"> regionReducer: ee.Reducer.mean(),</span><br><span class="line"> scale:<span class="number">30</span></span><br><span class="line">&#125;).setOptions(&#123;<span class="attr">title</span>: <span class="string">&quot;ROI NDWI EACH DAY SERIES&quot;</span>&#125;)</span><br><span class="line">print(chart2)</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;Sentinel 2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sentinel2 ndwi</span></span><br><span class="line"><span class="comment">//哨兵2去云处理</span></span><br><span class="line"><span class="keyword">var</span> s2_rmcloud = <span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> quality = image.select(<span class="string">&quot;QA60&quot;</span>).unmask();</span><br><span class="line"> <span class="keyword">return</span> image.updateMask(quality.eq(<span class="number">0</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在原影像中加入一个新的波段，命名为NDWI</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2_ndwi = <span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> image.addBands(image.normalizedDifference([<span class="string">&quot;B3&quot;</span>, <span class="string">&quot;B8&quot;</span>]).rename(<span class="string">&quot;NDWI&quot;</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sentinel2 and roi 过滤筛选哨兵2影像</span></span><br><span class="line"><span class="keyword">var</span> s2_col = ee.ImageCollection(<span class="string">&quot;COPERNICUS/S2&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> roi = ee.Geometry.Point([<span class="number">117.0703125</span>,<span class="number">38.09133660751176</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2_nocloud = s2_col.map(s2_rmcloud)</span><br><span class="line">                       .filterBounds(roi)</span><br><span class="line">                       .filterDate(<span class="string">&quot;2017-01-01&quot;</span>, <span class="string">&quot;2017-09-24&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> ndwi = s2_nocloud.map(s2_ndwi).select(<span class="string">&quot;NDWI&quot;</span>).reduce(ee.Reducer.mean());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> visParam = &#123;</span><br><span class="line"> min: -<span class="number">0.5</span>,</span><br><span class="line"> max: <span class="number">0.5</span>,</span><br><span class="line"> palette: [<span class="string">&#x27;00FFFF&#x27;</span>, <span class="string">&#x27;0000FF&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndwi, visParam, <span class="string">&quot;ndwi&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.centerObject(roi, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//展示关心区域roi在1.1-9.23日之间的的NDWI值序列</span></span><br><span class="line"><span class="keyword">var</span> ndwi_list = s2_nocloud.filterDate(<span class="string">&quot;2017-01-01&quot;</span>, <span class="string">&quot;2017-09-23&quot;</span>)</span><br><span class="line">   .map(<span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> ndwi = image.normalizedDifference([<span class="string">&#x27;B3&#x27;</span>, <span class="string">&#x27;B5&#x27;</span>]).rename(<span class="string">&#x27;NDWI&#x27;</span>);</span><br><span class="line">   <span class="keyword">return</span> image.addBands(ndwi);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> chart1 = ui.Chart.image.series(&#123;</span><br><span class="line"> imageCollection: ndwi_list.select(<span class="string">&#x27;NDWI&#x27;</span>),</span><br><span class="line"> region: roi,</span><br><span class="line"> reducer: ee.Reducer.mean(),</span><br><span class="line"> scale: <span class="number">30</span></span><br><span class="line">&#125;).setOptions(&#123;<span class="attr">title</span>: <span class="string">&#x27;NDWI IMAGE SERIES&#x27;</span>&#125;);</span><br><span class="line">print(chart1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chart2 = ui.Chart.image.doySeries(&#123;</span><br><span class="line"> imageCollection: ndwi_list.select(<span class="string">&#x27;NDWI&#x27;</span>),</span><br><span class="line"> region:roi,</span><br><span class="line"> regionReducer: ee.Reducer.mean(),</span><br><span class="line"> scale:<span class="number">30</span></span><br><span class="line">&#125;).setOptions(&#123;<span class="attr">title</span>: <span class="string">&quot;ROI NDWI EACH DAY SERIES&quot;</span>&#125;)</span><br><span class="line">print(chart2)</span><br></pre></td></tr></table></figure>

<h1 id="Landsat-8-NDVI-和-NDWI-添加波段"><a href="#Landsat-8-NDVI-和-NDWI-添加波段" class="headerlink" title="Landsat 8 NDVI 和 NDWI 添加波段"></a>Landsat 8 NDVI 和 NDWI 添加波段</h1><p>&emsp;&emsp;python代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use Landsat 8 surface reflectance data. 【使用Landsat8影像】</span></span><br><span class="line">l8sr = ee.ImageCollection(<span class="string">&#x27;LANDSAT/LC08/C01/T1_SR&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cloud masking function.【去云函数】</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maskL8sr</span>(<span class="params">image</span>):</span></span><br><span class="line">  cloudShadowBitMask = ee.Number(<span class="number">2</span>).<span class="built_in">pow</span>(<span class="number">3</span>).<span class="built_in">int</span>()</span><br><span class="line">  cloudsBitMask = ee.Number(<span class="number">2</span>).<span class="built_in">pow</span>(<span class="number">5</span>).<span class="built_in">int</span>()</span><br><span class="line">  qa = image.select(<span class="string">&#x27;pixel_qa&#x27;</span>)</span><br><span class="line">  mask = qa.bitwiseAnd(cloudShadowBitMask).eq(<span class="number">0</span>).And(</span><br><span class="line">    qa.bitwiseAnd(cloudsBitMask).eq(<span class="number">0</span>))</span><br><span class="line">  <span class="keyword">return</span> image.updateMask(mask).select(opticalBands).divide(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The image input data is a cloud-masked median composite.【选取16年影像】</span></span><br><span class="line">image = l8sr.filterDate(<span class="string">&#x27;2016-01-01&#x27;</span>, <span class="string">&#x27;2016-12-31&#x27;</span>).<span class="built_in">map</span>(maskL8sr).median()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addNDVI</span>(<span class="params">image</span>):</span></span><br><span class="line">  ndvi = image.normalizedDifference([<span class="string">&#x27;B5&#x27;</span>, <span class="string">&#x27;B4&#x27;</span>]).rename(<span class="string">&#x27;NDVI&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> image.addBands(ndvi)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addNDWI</span>(<span class="params">image</span>):</span></span><br><span class="line">  ndwi = image.normalizedDifference([<span class="string">&#x27;B3&#x27;</span>, <span class="string">&#x27;B5&#x27;</span>]).rename(<span class="string">&#x27;NDWI&#x27;</span>)</span><br><span class="line">  <span class="comment"># mndwi = image.normalizedDifference([&#x27;B3&#x27;, &#x27;B6&#x27;]).rename(&#x27;MNDWI&#x27;)</span></span><br><span class="line">  <span class="comment"># lswi = image.normalizedDifference([&#x27;B5&#x27;, &#x27;B6&#x27;]).rename(&#x27;LSWI&#x27;)</span></span><br><span class="line">  <span class="keyword">return</span> image.addBands(ndwi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 【增加信息】</span></span><br><span class="line">image = addNDVI(image)</span><br><span class="line">image = addNDWI(image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use folium to visualize the imagery. 【可视化】</span></span><br><span class="line">mapid = image.getMapId(&#123;<span class="string">&#x27;bands&#x27;</span>: [<span class="string">&#x27;B4&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>], <span class="string">&#x27;min&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">0.3</span>&#125;)</span><br><span class="line"><span class="built_in">map</span> = folium.Map(location=[<span class="number">38.</span>, <span class="number">-122.5</span>])</span><br><span class="line">folium.TileLayer(</span><br><span class="line">    tiles=mapid[<span class="string">&#x27;tile_fetcher&#x27;</span>].url_format,</span><br><span class="line">    attr=<span class="string">&#x27;Map Data &amp;copy; &lt;a href=&quot;https://earthengine.google.com/&quot;&gt;Google Earth Engine&lt;/a&gt;&#x27;</span>,</span><br><span class="line">    overlay=<span class="literal">True</span>,</span><br><span class="line">    name=<span class="string">&#x27;median composite&#x27;</span>,</span><br><span class="line">  ).add_to(<span class="built_in">map</span>)</span><br><span class="line"></span><br><span class="line">mapid = image.getMapId(&#123;<span class="string">&#x27;bands&#x27;</span>: [<span class="string">&#x27;NDVI&#x27;</span>], <span class="string">&#x27;min&#x27;</span>: <span class="number">-0.2</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">0.8</span>, </span><br><span class="line">    <span class="string">&#x27;palette&#x27;</span>: [<span class="string">&#x27;FFFFFF&#x27;</span>, <span class="string">&#x27;CE7E45&#x27;</span>, <span class="string">&#x27;DF923D&#x27;</span>, <span class="string">&#x27;F1B555&#x27;</span>, <span class="string">&#x27;FCD163&#x27;</span>, <span class="string">&#x27;99B718&#x27;</span>, <span class="string">&#x27;74A901&#x27;</span>, <span class="string">&#x27;66A000&#x27;</span>, <span class="string">&#x27;529400&#x27;</span>]&#125;)</span><br><span class="line">folium.TileLayer(</span><br><span class="line">    tiles=mapid[<span class="string">&#x27;tile_fetcher&#x27;</span>].url_format,</span><br><span class="line">    attr=<span class="string">&#x27;Map Data &amp;copy; &lt;a href=&quot;https://earthengine.google.com/&quot;&gt;Google Earth Engine&lt;/a&gt;&#x27;</span>,</span><br><span class="line">    overlay=<span class="literal">True</span>,</span><br><span class="line">    name=<span class="string">&#x27;NDVI&#x27;</span>,</span><br><span class="line">  ).add_to(<span class="built_in">map</span>)</span><br><span class="line"><span class="comment"># map.add_child(folium.LayerControl())</span></span><br><span class="line"></span><br><span class="line">mapid = image.getMapId(&#123;<span class="string">&#x27;bands&#x27;</span>: [<span class="string">&#x27;NDWI&#x27;</span>], <span class="string">&#x27;min&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">1</span>, </span><br><span class="line">    <span class="string">&#x27;palette&#x27;</span>: [<span class="string">&#x27;0000ff&#x27;</span>, <span class="string">&#x27;00ffff&#x27;</span>, <span class="string">&#x27;ffff00&#x27;</span>, <span class="string">&#x27;ff0000&#x27;</span>, <span class="string">&#x27;ffffff&#x27;</span>]&#125;)</span><br><span class="line">folium.TileLayer(</span><br><span class="line">    tiles=mapid[<span class="string">&#x27;tile_fetcher&#x27;</span>].url_format,</span><br><span class="line">    attr=<span class="string">&#x27;Map Data &amp;copy; &lt;a href=&quot;https://earthengine.google.com/&quot;&gt;Google Earth Engine&lt;/a&gt;&#x27;</span>,</span><br><span class="line">    overlay=<span class="literal">True</span>,</span><br><span class="line">    name=<span class="string">&#x27;NDWI&#x27;</span>,</span><br><span class="line">  ).add_to(<span class="built_in">map</span>)</span><br><span class="line"><span class="built_in">map</span>.add_child(folium.LayerControl())</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;可视化结果如下：<br>&emsp;&emsp;NDVI：<br><img src="https://img-blog.csdnimg.cn/20200901164955612.png?x-oss-process" alt="在这里插入图片描述"></p>
<p>&emsp;&emsp;NDWI：<br><img src="https://img-blog.csdnimg.cn/20200901164930924.png?x-oss-process" alt="在这里插入图片描述"></p>
<p>&emsp;&emsp;下次讲下如何利用水体指数提取潘阳湖面积今年变化~</p>]]></content>
      <categories>
        <category>GEE</category>
        <category>GEE实战</category>
      </categories>
      <tags>
        <tag>Google Earth Engine</tag>
        <tag>Remote sensing</tag>
      </tags>
  </entry>
  <entry>
    <title>GEE(Google Earth Engine)目录</title>
    <url>/2020/10/28/GEE%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h1 id="GEE入门系列"><a href="#GEE入门系列" class="headerlink" title="GEE入门系列"></a>GEE入门系列</h1><p><a href="/2020/10/23/GEE%E5%85%A5%E9%97%A8%E3%80%901%E3%80%91Python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">GEE入门[1] | Python环境配置</a><br><a href="/2020/10/27/GEE%E5%85%A5%E9%97%A8%E3%80%902%E3%80%91%E4%B8%8A%E4%BC%A0%E3%80%81%E5%AF%BC%E5%87%BA/">GEE入门[2] | 上传、导出</a><br><a href="/2020/10/27/GEE%E5%85%A5%E9%97%A8%E3%80%903%E3%80%91%E7%9B%B8%E5%85%B3%E7%BD%91%E7%AB%99/">GEE入门[3] | 相关学习网站</a><br><a href="/2020/10/27/GEE%E5%85%A5%E9%97%A8%E3%80%904%E3%80%91%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AEFeatureCollection%EF%BC%88%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E5%88%86%EF%BC%89/">GEE入门[4] | 矢量数据FeatureCollection(行政区划分)</a></p>
<h1 id="GEE实战系列"><a href="#GEE实战系列" class="headerlink" title="GEE实战系列"></a>GEE实战系列</h1><p><a href="/2020/10/27/GEE%E5%AE%9E%E6%88%98%20%E7%AA%97%E5%8F%A3%E6%8B%86%E5%88%86(split%20panel)%E5%8F%AF%E8%A7%86%E5%8C%96/">GEE实战 | 窗口拆分(split panel)可视化</a><br><a href="/2020/10/27/GEE%E5%AE%9E%E6%88%98%20%E8%AE%A1%E7%AE%97NDVI&NDWI/">GEE实战 | 计算NDVI &amp; NDWI</a><br><a href="/2020/10/27/GEE%E5%AE%9E%E6%88%98%20LULC%E8%8E%B7%E5%8F%96%E4%B8%8E%E5%A4%84%E7%90%86/">GEE实战 | LULC获取与处理</a></p>]]></content>
      <categories>
        <category>GEE</category>
      </categories>
      <tags>
        <tag>Google Earth Engine</tag>
        <tag>Remote sensing</tag>
      </tags>
  </entry>
  <entry>
    <title>电影记录</title>
    <url>/2020/10/28/Moive/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="ba834786a90edb5aaf80dbd898c0d55095a9d4356581275273ef652974f7c04e">56cdc05f79329da7fffe24ae7fe2031c</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>书影音</category>
        <category>电影</category>
        <category>已看</category>
      </categories>
      <tags>
        <tag>电影</tag>
        <tag>影评</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo问题解决随笔</title>
    <url>/2020/10/19/hexoDiaries/</url>
    <content><![CDATA[<h2 id="搭建日志"><a href="#搭建日志" class="headerlink" title="搭建日志"></a>搭建日志</h2><pre><code>待解决：
202011?? ：在线编辑Netylify  **失败 20201109**
202011?? ：多级目录/https://guanqr.com/tech/website/hexo-theme-next-customization/#

20201109 ：加入评论板块&amp;热度-次数
20201108 ：12生肖
20201108 ：加入站点sitmap
20201108 ：更新版本
20201108 ：加入粒子时钟插件
20201108 ：加入标签云
20201108 ：书影音加入豆瓣插件
20201104 ：解决侧边栏无作者昵称问题
20201101 ：上吊猫咪加入返回顶部豪华套餐 http://yearito.cn/posts/hexo-theme-beautify.html
20201028 ：解决Hexo博客模板hexo-theme-next的翻页按钮不正常显示
20201024 ：大量优化：包括增加本地搜索、404等功能
20201019 ：next加入头像avatar
20201019 ：github SSH配置，优化，不用再反复输账号密码且安全
20201019 ：完成多电脑博客同步
20201018 : 选择修改next主题
20201018 : 完成环境初步搭配</code></pre>
<h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><p>…</p>
<h2 id="hexo-serve-只出现代码"><a href="#hexo-serve-只出现代码" class="headerlink" title="hexo serve 只出现代码"></a>hexo serve 只出现代码</h2><p>升级到hexo 5后，hexo serve只显示奇怪的代码:<br>(假装有代码)<br>是因为 Hexo 5 把 swig 渲染插件删了，需要单独安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>


<h2 id="20-空格"><a href="#20-空格" class="headerlink" title="%20 空格"></a>%20 空格</h2><p>属于URLEncode编码，+貌似也可以，但是可能出问题</p>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>在面对特殊字符里面输入特殊字符时，前后怼个\</p>
<p>比如:<br>[\[1\]] -&gt; [1]<br>\ -&gt; \</p>
<h2 id="插入其他博客链接"><a href="#插入其他博客链接" class="headerlink" title="插入其他博客链接"></a>插入其他博客链接</h2><p>由于hexo在generate的时候会直接在public目录下生成html文件，所以可以通过生产地址引用该文章。</p>
<p>格式：[显示文字](/{年}/{月}/{日}/{文章文件名}/)</p>
<p>比如:<br>[GEE实战 | 窗口拆分(split panel)可视化](/2020/10/27/GEE实战%20窗口拆分(split%20panel)可视化/) -&gt; <a href="/2020/10/27/GEE%E5%AE%9E%E6%88%98%20%E7%AA%97%E5%8F%A3%E6%8B%86%E5%88%86(split%20panel)%E5%8F%AF%E8%A7%86%E5%8C%96/">GEE实战 | 窗口拆分(split panel)可视化</a></p>
<h2 id="猫咪上吊-返回顶部"><a href="#猫咪上吊-返回顶部" class="headerlink" title="猫咪上吊 返回顶部"></a>猫咪上吊 返回顶部</h2><p><a href="http://yearito.cn/posts/hexo-theme-beautify.html">丢个链接就跑</a></p>
<h2 id="加入评论"><a href="#加入评论" class="headerlink" title="加入评论"></a>加入评论</h2><h2 id="24方针点击效果"><a href="#24方针点击效果" class="headerlink" title="24方针点击效果"></a>24方针点击效果</h2><p>z这个搞了好久，有时间再补</p>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>个人博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>调酒记录</title>
    <url>/2020/11/05/%E8%B0%83%E9%85%92%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>2020-11-07 : 长岛冰茶、螺丝钻（伪），操场调酒<br>2020-11-05 : 新加坡司令<br>2020-11-05 : 调酒器具、酒都到手了！</p>
</blockquote>
<h2 id="2020-11-07：（伪）螺丝钻（Gimlet）"><a href="#2020-11-07：（伪）螺丝钻（Gimlet）" class="headerlink" title="2020/11/07：（伪）螺丝钻（Gimlet）"></a>2020/11/07：（伪）螺丝钻（Gimlet）</h2><img src="/2020/11/05/%E8%B0%83%E9%85%92%E8%AE%B0%E5%BD%95/201107_2.jpg" width="50%">

<p><strong>原材料：</strong></p>
<p>&emsp;&emsp;绝对伏特加 60ml （一般是伏特加）</p>
<p>&emsp;&emsp;/ 孟买蓝宝石金酒 60ml</p>
<p>&emsp;&emsp;/ 白朗姆酒 60ml</p>
<p>&emsp;&emsp;维他柠檬茶 怼！</p>
<p>&emsp;&emsp;高球杯+冰块*4</p>
<p><strong>品：</strong></p>
<p>&emsp;&emsp;维他柠檬茶乃神物，怼啥啥好喝</p>
<p><strong>调：</strong></p>
<p>&emsp;&emsp;没啥技术含量（调的时候已经飘了</p>
<h2 id="2020-11-07：长岛冰茶（Long-Island-Iced-Tea）"><a href="#2020-11-07：长岛冰茶（Long-Island-Iced-Tea）" class="headerlink" title="2020/11/07：长岛冰茶（Long Island Iced Tea）"></a>2020/11/07：长岛冰茶（Long Island Iced Tea）</h2><img src="/2020/11/05/%E8%B0%83%E9%85%92%E8%AE%B0%E5%BD%95/201107_3.jpg" width="80%">
<img src="/2020/11/05/%E8%B0%83%E9%85%92%E8%AE%B0%E5%BD%95/201107.jpg" width="50%">

<p><strong>原材料：</strong></p>
<p>&emsp;&emsp;孟买蓝宝石金酒 30ml</p>
<p>&emsp;&emsp;绝对伏特加 60ml</p>
<p>&emsp;&emsp;白朗姆酒 30ml</p>
<p>&emsp;&emsp;柠檬汁 30ml</p>
<p>&emsp;&emsp;可乐 适量</p>
<p>&emsp;&emsp;高球杯+冰块*4</p>
<p>&emsp;&emsp;（无白龙舌兰+糖浆）</p>
<p>**品： **</p>
<p>&emsp;&emsp;第一杯可乐放少了，酒味重，但是快乐，喝不出酒味的长岛冰茶是好冰茶（基酒真的多</p>
<p><strong>调：</strong></p>
<p>&emsp;&emsp;可乐适量，然后可以先放可乐，有分层效果</p>
<p>&emsp;&emsp;没放糖浆，有可乐就够了，调色啥的</p>
<h2 id="2020-11-05：新加坡司令（Singapore-Sling）"><a href="#2020-11-05：新加坡司令（Singapore-Sling）" class="headerlink" title="2020/11/05：新加坡司令（Singapore Sling）"></a>2020/11/05：新加坡司令（Singapore Sling）</h2><img src="https://img-blog.csdnimg.cn/20201107121156289.png?x-oss-process" width="80%">
<img src="https://img-blog.csdnimg.cn/20201107121226480.png?x-oss-process" width="30%">

<p><strong>原材料：</strong><br>&emsp;&emsp;孟买蓝宝石金酒 30ml<br>&emsp;&emsp;百利甜 10ml<br>&emsp;&emsp;莫林红石榴风味糖浆 10ml<br>&emsp;&emsp;柠檬汁 10ml<br>&emsp;&emsp;苏打水<br>&emsp;&emsp;高球杯+冰块*4</p>
<p><strong>品：</strong><br>&emsp;&emsp;酸甜不错，香甜，然后貌似没飘，倒是十分精神，导致很晚睡着，考虑加大基酒含量</p>
<p><strong>调：</strong><br>&emsp;&emsp;颜色淡，像西瓜汁是因为糖浆少了，还是因为加入了百利甜？<br>&emsp;&emsp;貌似因为百利甜颜色也不剔透，下次可以去掉<br>&emsp;&emsp;配方复杂，利口酒用的百利甜，用樱桃白兰地利口酒会好点？<br>&emsp;&emsp;没加入菠萝汁等果汁啥的<br>&emsp;&emsp;装饰品也无，装饰包括菠萝块、红樱桃等可以以后考虑<br>&emsp;&emsp;摇酒杯好冷啊，速度要提升，吃水了</p>]]></content>
      <categories>
        <category>生活</category>
        <category>调酒</category>
      </categories>
      <tags>
        <tag>调酒</tag>
      </tags>
  </entry>
</search>
