<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GEE(Google Earth Engine)目录</title>
    <url>/2020/10/28/GEE/GEE%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h1 id="GEE入门系列"><a href="#GEE入门系列" class="headerlink" title="GEE入门系列"></a>GEE入门系列</h1><p><a href="/2020/10/23/GEE/GEE%E5%85%A5%E9%97%A8%E3%80%901%E3%80%91Python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">GEE入门[1] | Python环境配置</a><br><a href="/2020/10/27/GEE/GEE%E5%85%A5%E9%97%A8%E3%80%902%E3%80%91%E4%B8%8A%E4%BC%A0%E3%80%81%E5%AF%BC%E5%87%BA/">GEE入门[2] | 上传、导出</a><br><a href="/2020/10/27/GEE/GEE%E5%85%A5%E9%97%A8%E3%80%903%E3%80%91%E7%9B%B8%E5%85%B3%E7%BD%91%E7%AB%99/">GEE入门[3] | 相关学习网站</a><br><a href="/2020/10/27/GEE/GEE%E5%85%A5%E9%97%A8%E3%80%904%E3%80%91%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AEFeatureCollection%EF%BC%88%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E5%88%86%EF%BC%89/">GEE入门[4] | 矢量数据FeatureCollection(行政区划分)</a></p>
<h1 id="GEE实战系列"><a href="#GEE实战系列" class="headerlink" title="GEE实战系列"></a>GEE实战系列</h1><p><a href="/2020/10/27/GEE/GEE%E5%AE%9E%E6%88%98%20%E7%AA%97%E5%8F%A3%E6%8B%86%E5%88%86(split%20panel)%E5%8F%AF%E8%A7%86%E5%8C%96/">GEE实战 | 窗口拆分(split panel)可视化</a><br><a href="/2020/10/27/GEE/GEE%E5%AE%9E%E6%88%98%20%E8%AE%A1%E7%AE%97NDVI&NDWI/">GEE实战 | 计算NDVI &amp; NDWI</a><br><a href="/2020/10/27/GEE/GEE%E5%AE%9E%E6%88%98%20LULC%E8%8E%B7%E5%8F%96%E4%B8%8E%E5%A4%84%E7%90%86/">GEE实战 | LULC获取与处理</a></p>]]></content>
      <categories>
        <category>GEE</category>
      </categories>
      <tags>
        <tag>Google Earth Engine</tag>
        <tag>Remote sensing</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo问题解决随笔</title>
    <url>/2020/10/18/hexoDiaries/</url>
    <content><![CDATA[<h2 id="搭建日志"><a href="#搭建日志" class="headerlink" title="搭建日志"></a>搭建日志</h2><pre><code>待解决：

202011?? ：多级目录/https://guanqr.com/tech/website/hexo-theme-next-customization/#

20201109 ：在线编辑Netylify 成功一半 可以在线编辑，但是与Netylify无关
20201109 ：加入评论板块&amp;热度-次数
20201108 ：12生肖
20201108 ：加入站点sitmap
20201108 ：更新版本
20201108 ：加入粒子时钟插件
20201108 ：加入标签云
20201108 ：书影音加入豆瓣插件
20201104 ：解决侧边栏无作者昵称问题
20201101 ：上吊猫咪加入返回顶部豪华套餐 http://yearito.cn/posts/hexo-theme-beautify.html
20201028 ：解决Hexo博客模板hexo-theme-next的翻页按钮不正常显示
20201024 ：大量优化：包括增加本地搜索、404等功能
20201019 ：next加入头像avatar
20201019 ：github SSH配置，优化，不用再反复输账号密码且安全
20201019 ：完成多电脑博客同步
20201018 : 选择修改next主题
20201018 : 完成环境初步搭配</code></pre>
<h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><p>…</p>
<h2 id="hexo-serve-只出现代码"><a href="#hexo-serve-只出现代码" class="headerlink" title="hexo serve 只出现代码"></a>hexo serve 只出现代码</h2><p>升级到hexo 5后，hexo serve只显示奇怪的代码:<br>(假装有代码)<br>是因为 Hexo 5 把 swig 渲染插件删了，需要单独安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>


<h2 id="20-空格"><a href="#20-空格" class="headerlink" title="%20 空格"></a>%20 空格</h2><p>属于URLEncode编码，+貌似也可以，但是可能出问题</p>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>在面对特殊字符里面输入特殊字符时，前后怼个\</p>
<p>比如:<br>[\[1\]] -&gt; [1]<br>\ -&gt; \</p>
<h2 id="插入其他博客链接"><a href="#插入其他博客链接" class="headerlink" title="插入其他博客链接"></a>插入其他博客链接</h2><p>由于hexo在generate的时候会直接在public目录下生成html文件，所以可以通过生产地址引用该文章。</p>
<p>格式：[显示文字](/{年}/{月}/{日}/{文章文件名}/)</p>
<p>比如:<br>[GEE实战 | 窗口拆分(split panel)可视化](/2020/10/27/GEE实战%20窗口拆分(split%20panel)可视化/) -&gt; <a href="/2020/10/27/GEE%E5%AE%9E%E6%88%98%20%E7%AA%97%E5%8F%A3%E6%8B%86%E5%88%86(split%20panel)%E5%8F%AF%E8%A7%86%E5%8C%96/">GEE实战 | 窗口拆分(split panel)可视化</a></p>
<h2 id="猫咪上吊-返回顶部"><a href="#猫咪上吊-返回顶部" class="headerlink" title="猫咪上吊 返回顶部"></a>猫咪上吊 返回顶部</h2><p><a href="http://yearito.cn/posts/hexo-theme-beautify.html">丢个链接就跑</a></p>
<h2 id="加入评论"><a href="#加入评论" class="headerlink" title="加入评论"></a>加入评论</h2><h2 id="24方针点击效果"><a href="#24方针点击效果" class="headerlink" title="24方针点击效果"></a>24方针点击效果</h2><p>z这个搞了好久，有时间再补</p>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>个人博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>调酒记录</title>
    <url>/2020/11/05/%E8%B0%83%E9%85%92%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>2020-11-11 : 莫吉托、沙滩性爱、椰林飘香、自由古巴，操场调酒again，瞎调<br>2020-11-09 : 新加坡司令<br>2020-11-07 : 长岛冰茶、螺丝钻（伪），操场调酒<br>2020-11-05 : 新加坡司令<br>2020-11-05 : 调酒器具、酒都到手了！</p>
</blockquote>
<h2 id="2020-11-11：自由古巴-Cuba-Libre"><a href="#2020-11-11：自由古巴-Cuba-Libre" class="headerlink" title="2020/11/11：自由古巴(Cuba Libre)"></a>2020/11/11：自由古巴(Cuba Libre)</h2><br>
天黑太嗨，假装有图.jpg
<br>
<br>

<p><strong>原材料：</strong><br>&emsp;&emsp;白朗姆酒 50ml<br>&emsp;&emsp;柠檬汁 20ml<br>&emsp;&emsp;可乐<br>&emsp;&emsp;高球杯+冰块*4</p>
<p><strong>品：</strong><br>&emsp;&emsp;可乐少了就会有点像长岛冰茶</p>
<p><strong>调：</strong><br>&emsp;&emsp;直接怼<br>&emsp;&emsp;叨一句，先怼可乐有分层</p>
<h2 id="2020-11-11：椰林飘香-Pina-colada"><a href="#2020-11-11：椰林飘香-Pina-colada" class="headerlink" title="2020/11/11：椰林飘香(Pina colada)"></a>2020/11/11：椰林飘香(Pina colada)</h2><br>
天黑太嗨，假装有图.jpg
<br>
<br>

<p><strong>原材料：</strong><br>&emsp;&emsp;白朗姆酒 50ml<br>&emsp;&emsp;椰奶 50ml<br>&emsp;&emsp;桃子汁 50ml<br>&emsp;&emsp;高球杯+冰块*4<br>&emsp;&emsp;（无菠萝汁）</p>
<p><strong>品：</strong><br>&emsp;&emsp;桃子味道淡，分层感非常明显，三层感觉，椰奶酒桃子，别有风味</p>
<p><strong>调：</strong><br>&emsp;&emsp;所以还是其他比较浓的代替桃子<br>&emsp;&emsp;为啥分层明显？</p>
<h2 id="2020-11-11：沙滩性爱-Sex-on-the-beach"><a href="#2020-11-11：沙滩性爱-Sex-on-the-beach" class="headerlink" title="2020/11/11：沙滩性爱(Sex on the beach)"></a>2020/11/11：沙滩性爱(Sex on the beach)</h2><br>
天黑太嗨，假装有图.jpg
<br>
<br>

<p><strong>原材料：</strong><br>&emsp;&emsp;伏特加 40ml<br>&emsp;&emsp;桃子汁 30ml<br>&emsp;&emsp;高球杯+冰块*4<br>&emsp;&emsp;（无桃子利口酒+鲜橙汁+蔓越莓汁）</p>
<p><strong>品：</strong><br>&emsp;&emsp;桃子味道淡，分层感明显，酒味明显，需要其他果汁</p>
<p><strong>调：</strong><br>&emsp;&emsp;所有材料较少</p>
<h2 id="2020-11-11：莫吉托-Mojito"><a href="#2020-11-11：莫吉托-Mojito" class="headerlink" title="2020/11/11：莫吉托(Mojito)"></a>2020/11/11：莫吉托(Mojito)</h2><br>
天黑太嗨，假装有图.jpg
<br>
<br>

<p><strong>原材料：</strong><br>&emsp;&emsp;白朗姆 45ml<br>&emsp;&emsp;柠檬汁 30ml<br>&emsp;&emsp;苏打水<br>&emsp;&emsp;<br>&emsp;&emsp;高球杯+冰块*4</p>
<p><strong>品：</strong><br>&emsp;&emsp;清凉感很强，8错，白朗姆酒味中和了</p>
<p><strong>调：</strong><br>&emsp;&emsp;忘买苏打水了，用可乐代替，还不错<br>&emsp;&emsp;原本应该放白糖？没放<br>&emsp;&emsp;薄荷忘记拍碎了<br>&emsp;&emsp;用碎冰会好点，没法碎<br>&emsp;&emsp;我用的摇酒壶，看的是stir，糖+青柠汁-&gt;薄荷-&gt;少量苏打水-&gt;朗姆-&gt;苏打水</p>
<h2 id="2020-11-09：新加坡司令-Singapore-Sling"><a href="#2020-11-09：新加坡司令-Singapore-Sling" class="headerlink" title="2020/11/09：新加坡司令(Singapore Sling)"></a>2020/11/09：新加坡司令(Singapore Sling)</h2><img src="/2020/11/05/%E8%B0%83%E9%85%92%E8%AE%B0%E5%BD%95/201109_2.jpg" width="80%">

<img src="/2020/11/05/%E8%B0%83%E9%85%92%E8%AE%B0%E5%BD%95/201109.jpg" width="50%">

<p><strong>原材料：</strong><br>&emsp;&emsp;孟买蓝宝石金酒 50ml<br>&emsp;&emsp;莫林红石榴风味糖浆 30ml<br>&emsp;&emsp;柠檬汁 30ml<br>&emsp;&emsp;苏打水<br>&emsp;&emsp;高球杯+冰块*4</p>
<p><strong>品：</strong><br>&emsp;&emsp;金酒含量增加，酒味提升，柠檬汁和糖浆含量提升，酸酸甜甜没有脑袋，有进步 :)</p>
<p><strong>调：</strong><br>&emsp;&emsp;没加百利甜，颜色好看了很多<br>&emsp;&emsp;无樱桃白兰地利口酒，考虑入手，樱桃味应该8错<br>&emsp;&emsp;无果汁(菠萝汁) &amp; 装饰(菠萝块、红樱桃)<br>&emsp;&emsp;冰块感觉不够剔透？有花纹<br>&emsp;&emsp;摇酒和stir要提高技巧<br>&emsp;&emsp;其实单喝苏打水也8错</p>
<h2 id="2020-11-07：（伪）螺丝钻-Gimlet"><a href="#2020-11-07：（伪）螺丝钻-Gimlet" class="headerlink" title="2020/11/07：（伪）螺丝钻(Gimlet)"></a>2020/11/07：（伪）螺丝钻(Gimlet)</h2><img src="/2020/11/05/%E8%B0%83%E9%85%92%E8%AE%B0%E5%BD%95/201107_2.jpg" width="50%">

<p><strong>原材料：</strong></p>
<p>&emsp;&emsp;绝对伏特加 60ml （一般是伏特加）</p>
<p>&emsp;&emsp;/ 孟买蓝宝石金酒 60ml</p>
<p>&emsp;&emsp;/ 白朗姆酒 60ml</p>
<p>&emsp;&emsp;维他柠檬茶 怼！</p>
<p>&emsp;&emsp;高球杯+冰块*4</p>
<p><strong>品：</strong></p>
<p>&emsp;&emsp;维他柠檬茶乃神物，怼啥啥好喝</p>
<p><strong>调：</strong></p>
<p>&emsp;&emsp;没啥技术含量（调的时候已经飘了</p>
<h2 id="2020-11-07：长岛冰茶（Long-Island-Iced-Tea）"><a href="#2020-11-07：长岛冰茶（Long-Island-Iced-Tea）" class="headerlink" title="2020/11/07：长岛冰茶（Long Island Iced Tea）"></a>2020/11/07：长岛冰茶（Long Island Iced Tea）</h2><img src="/2020/11/05/%E8%B0%83%E9%85%92%E8%AE%B0%E5%BD%95/201107_3.jpg" width="80%">
<img src="/2020/11/05/%E8%B0%83%E9%85%92%E8%AE%B0%E5%BD%95/201107.jpg" width="50%">

<p><strong>原材料：</strong></p>
<p>&emsp;&emsp;孟买蓝宝石金酒 30ml</p>
<p>&emsp;&emsp;绝对伏特加 60ml</p>
<p>&emsp;&emsp;白朗姆酒 30ml</p>
<p>&emsp;&emsp;柠檬汁 30ml</p>
<p>&emsp;&emsp;可乐 适量</p>
<p>&emsp;&emsp;高球杯+冰块*4</p>
<p>&emsp;&emsp;（无白龙舌兰+糖浆）</p>
<p>**品： **</p>
<p>&emsp;&emsp;第一杯可乐放少了，酒味重，但是快乐，喝不出酒味的长岛冰茶是好冰茶（基酒真的多</p>
<p><strong>调：</strong></p>
<p>&emsp;&emsp;可乐适量，然后可以先放可乐，有分层效果</p>
<p>&emsp;&emsp;没放糖浆，有可乐就够了，调色啥的</p>
<h2 id="2020-11-05：新加坡司令（Singapore-Sling）"><a href="#2020-11-05：新加坡司令（Singapore-Sling）" class="headerlink" title="2020/11/05：新加坡司令（Singapore Sling）"></a>2020/11/05：新加坡司令（Singapore Sling）</h2><img src="https://img-blog.csdnimg.cn/20201107121156289.png?x-oss-process" width="80%">
<img src="https://img-blog.csdnimg.cn/20201107121226480.png?x-oss-process" width="30%">

<p><strong>原材料：</strong><br>&emsp;&emsp;孟买蓝宝石金酒 30ml<br>&emsp;&emsp;百利甜 10ml<br>&emsp;&emsp;莫林红石榴风味糖浆 10ml<br>&emsp;&emsp;柠檬汁 10ml<br>&emsp;&emsp;苏打水<br>&emsp;&emsp;高球杯+冰块*4</p>
<p><strong>品：</strong><br>&emsp;&emsp;酸甜不错，香甜，然后貌似没飘，倒是十分精神，导致很晚睡着，考虑加大基酒含量</p>
<p><strong>调：</strong><br>&emsp;&emsp;颜色淡，像西瓜汁是因为糖浆少了，还是因为加入了百利甜？<br>&emsp;&emsp;貌似因为百利甜颜色也不剔透，下次可以去掉<br>&emsp;&emsp;配方复杂，利口酒用的百利甜，用樱桃白兰地利口酒会好点？<br>&emsp;&emsp;没加入菠萝汁等果汁啥的<br>&emsp;&emsp;装饰品也无，装饰包括菠萝块、红樱桃等可以以后考虑<br>&emsp;&emsp;摇酒杯好冷啊，速度要提升，吃水了</p>]]></content>
      <categories>
        <category>生活</category>
        <category>调酒</category>
      </categories>
      <tags>
        <tag>调酒</tag>
      </tags>
  </entry>
  <entry>
    <title>电影记录</title>
    <url>/2020/10/28/Moive/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="ba834786a90edb5aaf80dbd898c0d55095a9d4356581275273ef652974f7c04e">56cdc05f79329da7fffe24ae7fe2031c</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>书影音</category>
        <category>电影</category>
        <category>已看</category>
      </categories>
      <tags>
        <tag>电影</tag>
        <tag>影评</tag>
      </tags>
  </entry>
  <entry>
    <title>Coursera | Introduction to Data Science in Python（University of Michigan）| Quiz答案</title>
    <url>/2020/11/09/Intro2DS/Quiz/</url>
    <content><![CDATA[<p>&emsp;&emsp;最后还是把assignment代码放出来了，这门课的assignment还是有点难度的，特别是assigment4（哀怨），放给大家参考啦~<br>&emsp;&emsp; 有时间（需求）就把所有代码放到github上（好担心被河蟹啊）<br>&emsp;&emsp; 相关链接：<br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Quiz/">Coursera | Introduction to Data Science in Python（University of Michigan）| Quiz答案</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment1/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment1</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment2/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment2</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment3/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment3</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment4/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment4</a><br>&emsp;&emsp; CSDN链接：<br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109544058">Coursera | Introduction to Data Science in Python（University of Michigan）| Quiz答案</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109583609">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment1</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109577773">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment2</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109583813">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment3</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109584609">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment4</a></p>
<p>&emsp;&emsp; 继续Coursera学习哈，有助学金申请还是比较爽的（有需求下次放个助学金申请模板？）。因为打算往DS靠，找到密歇根大学的 Applied Data Science with Python 专项课程，共有5门课程，目前用了5天薅完了第一门Introduction to Data Science in Python。<br><img src="https://img-blog.csdnimg.cn/20201107110233146.png"></p>
<p><img src="https://img-blog.csdnimg.cn/20201107110218196.png"></p>
<p>&emsp;&emsp; 不愧是密歇根大学，感觉质量很高，原本还打算和离散数学那个一样划水摸鱼过的，结果被编程assignment按在地上摩擦，还是很刺激的。这里放上每个quiz的答案。assignment的代码嘛，看情况，想要的可以评论区留言，多的话我就把整个上课资源上传到Github，包括Quiz编程实现，Assignment代码，上课代码等，貌似容易被和谐掉。因为比起前不久，quiz和assignment都更新了挺多，不知道放上来会不会被和谐(特别是最后一个assignment，新题，没有往届参考快猝死了)，讨论参考肯定没问题 :)<br>&emsp;&emsp; Anway，想自学的推荐哈，Introduction to Data Science in Python这门课程学完能学会很多，包括Pandas的用法以及实例实践等。</p>
<h1 id="quiz答案"><a href="#quiz答案" class="headerlink" title="quiz答案"></a>quiz答案</h1><p>&emsp;&emsp;U1S1，这个课程是真的严谨，题目换的那叫个快，最近是直接第三方平台，连上密歇根自己的学校网站，做题然后提交。不过值得吐槽的是，每次提交到出成绩要24h，一般也就10道选择题啊，气(•́へ•́╬)。而且要求是低于70%正确率可以反复做，但是一旦高于70%就不能反复提交刷分了，所以博主第一个quiz粗心错了一个，非常后悔。<br>&emsp;&emsp;不废话了，放答案，总共4周，前三周都是第三方平台，最后一周是Coursera自己的平台。</p>
<h2 id="Week1-Fundamentals-of-Data-Manipulation-with-Python"><a href="#Week1-Fundamentals-of-Data-Manipulation-with-Python" class="headerlink" title="Week1 : Fundamentals of Data Manipulation with Python"></a>Week1 : Fundamentals of Data Manipulation with Python</h2><p>&emsp;&emsp;第一周的，下面这个就是密歇根的平台啦，没错，我就是第一题就错了，o(╥﹏╥)o，然后也放下批改后会告诉你错在哪了，还是挺人性化的。</p>
<p><img src="https://img-blog.csdnimg.cn/20201107110942876.png"><br>&emsp;&emsp; 如果做错了，会显示正确答案和解释。<br><img src="https://img-blog.csdnimg.cn/20201107110949320.png"></p>
<p>&emsp;&emsp;其他都没问题啦。<br><img src="https://img-blog.csdnimg.cn/20201107111055589.png"><img src="https://img-blog.csdnimg.cn/20201107111059370.png"><img src="https://img-blog.csdnimg.cn/20201107111113142.png"><img src="https://img-blog.csdnimg.cn/20201107111120540.png"><img src="https://img-blog.csdnimg.cn/20201107111127751.png"><img src="https://img-blog.csdnimg.cn/20201107111133810.png"><img src="https://img-blog.csdnimg.cn/20201107111138183.png"><img src="https://img-blog.csdnimg.cn/2020110711114326.png"><img src="https://img-blog.csdnimg.cn/20201107111148404.png"></p>
<h2 id="Week2-Basic-Data-Processing-with-Pandas"><a href="#Week2-Basic-Data-Processing-with-Pandas" class="headerlink" title="Week2 : Basic Data Processing with Pandas"></a>Week2 : Basic Data Processing with Pandas</h2><p><img src="https://img-blog.csdnimg.cn/20201107111220234.png"><img src="https://img-blog.csdnimg.cn/20201107111225223.png"><img src="https://img-blog.csdnimg.cn/20201107111231749.png"><img src="https://img-blog.csdnimg.cn/2020110711130620.png"><img src="https://img-blog.csdnimg.cn/20201107111311780.png"><img src="https://img-blog.csdnimg.cn/20201107111317739.png"><img src="https://img-blog.csdnimg.cn/20201107111327139.png"><img src="https://img-blog.csdnimg.cn/20201107111952781.png"><img src="https://img-blog.csdnimg.cn/20201107111336815.png"><img src="https://img-blog.csdnimg.cn/20201107111342674.png"></p>
<h2 id="Week3-More-Data-Processing-with-Pandas"><a href="#Week3-More-Data-Processing-with-Pandas" class="headerlink" title="Week3 : More Data Processing with Pandas"></a>Week3 : More Data Processing with Pandas</h2><p><img src="https://img-blog.csdnimg.cn/20201107112051583.png"><img src="https://img-blog.csdnimg.cn/20201107112219521.png"><img src="https://img-blog.csdnimg.cn/20201107112230793.png"><img src="https://img-blog.csdnimg.cn/20201107112235981.png"><img src="https://img-blog.csdnimg.cn/20201107112242658.png"><img src="https://img-blog.csdnimg.cn/20201107112247270.png"><img src="https://img-blog.csdnimg.cn/20201107112253186.png"><img src="https://img-blog.csdnimg.cn/20201107112257585.png"><img src="https://img-blog.csdnimg.cn/2020110711230320.png"><img src="https://img-blog.csdnimg.cn/20201107112313865.png"></p>
<h2 id="Week4-Answering-Questions-with-Messy-Data"><a href="#Week4-Answering-Questions-with-Messy-Data" class="headerlink" title="Week4 : Answering Questions with Messy Data"></a>Week4 : Answering Questions with Messy Data</h2><p><img src="https://img-blog.csdnimg.cn/20201107112356488.png"><img src="https://img-blog.csdnimg.cn/20201107112402351.png"><img src="https://img-blog.csdnimg.cn/20201107112407693.png"><img src="https://img-blog.csdnimg.cn/20201107112412858.png"><img src="https://img-blog.csdnimg.cn/20201107112420955.png"><img src="https://img-blog.csdnimg.cn/20201107112429840.png"><img src="https://img-blog.csdnimg.cn/2020110711243871.png"><img src="https://img-blog.csdnimg.cn/20201107112443963.png"><img src="https://img-blog.csdnimg.cn/20201107112450774.png"><img src="https://img-blog.csdnimg.cn/20201107112459810.png"><img src="https://img-blog.csdnimg.cn/20201107112506153.png"></p>
<p>&emsp;&emsp; 过段时间再薅后续课程（缓下）<br>&emsp;&emsp; 欢迎评论区讨论呀</p>]]></content>
      <categories>
        <category>DataScience</category>
        <category>Coursera</category>
        <category>Intro2DS</category>
      </categories>
      <tags>
        <tag>Coursera</tag>
        <tag>DataScience</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment1</title>
    <url>/2020/11/09/Intro2DS/Assignment1/</url>
    <content><![CDATA[<p>&emsp;&emsp; u1s1，这门课的assignment还是有点难度的，特别是assigment4（哀怨），放给大家参考啦~<br>&emsp;&emsp; 有时间（需求）就把所有代码放到github上（好担心被河蟹啊）<br>&emsp;&emsp; 相关链接：<br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Quiz/">Coursera | Introduction to Data Science in Python（University of Michigan）| Quiz答案</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment1/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment1</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment2/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment2</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment3/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment3</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment4/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment4</a><br>&emsp;&emsp; CSDN链接：<br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109544058">Coursera | Introduction to Data Science in Python（University of Michigan）| Quiz答案</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109583609">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment1</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109577773">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment2</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109583813">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment3</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109584609">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment4</a></p>
<p>assignment1挺简单的，就是个入门。</p>
<h1 id="Assignment-1"><a href="#Assignment-1" class="headerlink" title="Assignment 1"></a>Assignment 1</h1><p>For this assignment you are welcomed to use other regex resources such a regex “cheat sheets” you find on the web.</p>
<p>Before start working on the problems, here is a small example to help you understand how to write your own answers. In short, the solution should be written within the function body given, and the final result should be returned. Then the autograder will try to call the function and validate your returned result accordingly. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example_word_count</span>():</span></span><br><span class="line">    <span class="comment"># This example question requires counting words in the example_string below.</span></span><br><span class="line">    example_string = <span class="string">&quot;Amy is 5 years old&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># YOUR CODE HERE.</span></span><br><span class="line">    <span class="comment"># You should write your solution here, and return your result, you can comment out or delete the</span></span><br><span class="line">    <span class="comment"># NotImplementedError below.</span></span><br><span class="line">    result = example_string.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(result)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#raise NotImplementedError()</span></span><br></pre></td></tr></table></figure>
<h2 id="Part-A"><a href="#Part-A" class="headerlink" title="Part A"></a>Part A</h2><p>Find a list of all of the names in the following string using regex.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">names</span>():</span></span><br><span class="line">    simple_string = <span class="string">&quot;&quot;&quot;Amy is 5 years old, and her sister Mary is 2 years old. </span></span><br><span class="line"><span class="string">    Ruth and Peter, their parents, have 3 kids.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line"><span class="comment">#     raise NotImplementedError()</span></span><br><span class="line">    pattern = <span class="string">&quot;[A-Z][a-z]*&quot;</span></span><br><span class="line">    <span class="keyword">return</span> re.findall(pattern, simple_string)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(names()) == <span class="number">4</span>, <span class="string">&quot;There are four names in the simple_string&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://img-blog.csdnimg.cn/20201109190022183.png#pic_center"><br><br></p>
<h2 id="Part-B"><a href="#Part-B" class="headerlink" title="Part B"></a>Part B</h2><p>The dataset file in assets/grades.txt contains a line separated list of people with their grade in<br>a class. Create a regex to generate a list of just those students who received a B in the course.</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grades</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;assets/grades.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        grades = file.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line"><span class="comment">#     raise NotImplementedError()</span></span><br><span class="line">    pattern = <span class="string">&quot;[\w ]*:\ B&quot;</span></span><br><span class="line">    <span class="keyword">return</span> re.findall(pattern, grades)</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp; 下面这个也可以。其实都可以，两个的区别是是否包含成绩。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grades</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;assets/grades.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        grades = file.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line"><span class="comment">#     raise NotImplementedError()</span></span><br><span class="line">    pattern = <span class="string">&quot;[\w]*\ [\w]*(?=:\ B)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> re.findall(pattern, grades)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(grades()) == <span class="number">16</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p>&emsp;&emsp; 包含成绩：<br><img src="https://img-blog.csdnimg.cn/20201109190157137.png#pic_center"><br>&emsp;&emsp; 不包含成绩：<br><img src="https://img-blog.csdnimg.cn/20201109190241514.png#pic_center"><br></p>
<h2 id="Part-C"><a href="#Part-C" class="headerlink" title="Part C"></a>Part C</h2><p>Consider the standard web log file in assets/logdata.txt. This file records the access a user makes when visiting a web page (like this one!). Each line of the log has the following items:</p>
<ul>
<li>a host (e.g., ‘146.204.224.152’) </li>
<li>a user_name (e.g., ‘feest6811’ <strong>note: sometimes the user name is missing! In this case, use ‘-‘ as the value for the username.</strong>)</li>
<li>the time a request was made (e.g., ‘21/Jun/2019:15:45:24 -0700’)</li>
<li>the post request type (e.g., ‘POST /incentivize HTTP/1.1’ <strong>note: not everything is a POST!</strong>)</li>
</ul>
<p>Your task is to convert this into a list of dictionaries, where each dictionary looks like the following:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">example_dict &#x3D; &#123;&quot;host&quot;:&quot;146.204.224.152&quot;, </span><br><span class="line">                &quot;user_name&quot;:&quot;feest6811&quot;, </span><br><span class="line">                &quot;time&quot;:&quot;21&#x2F;Jun&#x2F;2019:15:45:24 -0700&quot;,</span><br><span class="line">                &quot;request&quot;:&quot;POST &#x2F;incentivize HTTP&#x2F;1.1&quot;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logs</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;assets/logdata.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        logdata = file.read()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line"><span class="comment">#     raise NotImplementedError()</span></span><br><span class="line">    pattern = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    (?P&lt;host&gt;[\d]*.[\d]*.[\d]*.[\d]*)    </span></span><br><span class="line"><span class="string">    (\ -\ )  </span></span><br><span class="line"><span class="string">    (?P&lt;user_name&gt;[\w-]*) </span></span><br><span class="line"><span class="string">    (\ \[) </span></span><br><span class="line"><span class="string">    (?P&lt;time&gt;\w*/\w*/.*)</span></span><br><span class="line"><span class="string">    (\]\ \&quot;) </span></span><br><span class="line"><span class="string">    (?P&lt;request&gt;.*)</span></span><br><span class="line"><span class="string">    (&quot;)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> re.finditer(pattern, logdata, re.VERBOSE):</span><br><span class="line">        result.append(item.groupdict())</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(logs()) == <span class="number">979</span></span><br><span class="line"></span><br><span class="line">one_item=&#123;<span class="string">&#x27;host&#x27;</span>: <span class="string">&#x27;146.204.224.152&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;user_name&#x27;</span>: <span class="string">&#x27;feest6811&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;time&#x27;</span>: <span class="string">&#x27;21/Jun/2019:15:45:24 -0700&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;request&#x27;</span>: <span class="string">&#x27;POST /incentivize HTTP/1.1&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">assert</span> one_item <span class="keyword">in</span> logs(), <span class="string">&quot;Sorry, this item should be in the log results, check your formating&quot;</span></span><br></pre></td></tr></table></figure>


<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p>&emsp;&emsp;部分：<br><img src="https://img-blog.csdnimg.cn/2020110919042311.png"></p>
<br>
<br>

<p>&emsp;&emsp; 大家其他还有需要的就在评论留言哦 :)  欢迎讨论分享~</p>]]></content>
      <categories>
        <category>DataScience</category>
        <category>Coursera</category>
        <category>Intro2DS</category>
      </categories>
      <tags>
        <tag>Coursera</tag>
        <tag>DataScience</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment2</title>
    <url>/2020/11/09/Intro2DS/Assignment2/</url>
    <content><![CDATA[<p>&emsp;&emsp; u1s1，这门课的assignment还是有点难度的，特别是assigment4（哀怨），放给大家参考啦~<br>&emsp;&emsp; 有时间（需求）就把所有代码放到github上（好担心被河蟹啊）<br>&emsp;&emsp; 相关链接：<br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Quiz/">Coursera | Introduction to Data Science in Python（University of Michigan）| Quiz答案</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment1/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment1</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment2/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment2</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment3/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment3</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment4/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment4</a><br>&emsp;&emsp; CSDN链接：<br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109544058">Coursera | Introduction to Data Science in Python（University of Michigan）| Quiz答案</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109583609">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment1</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109577773">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment2</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109583813">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment3</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109584609">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment4</a></p>
<h1 id="Assignment2"><a href="#Assignment2" class="headerlink" title="Assignment2"></a>Assignment2</h1><p>For this assignment you’ll be looking at 2017 data on immunizations from the CDC. Your datafile for this assignment is in assets/NISPUF17.csv. A data users guide for this, which you’ll need to map the variables in the data to the questions being asked, is available at assets/NIS-PUF17-DUG.pdf. <strong>Note: you may have to go to your Jupyter tree (click on the Coursera image) and navigate to the assignment 2 assets folder to see this PDF file).</strong></p>
<h2 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h2><p>Write a function called <code>proportion_of_education</code> which returns the proportion of children in the dataset who had a mother with the education levels equal to less than high school (&lt;12), high school (12), more than high school but not a college graduate (&gt;12) and college degree.</p>
<p><em>This function should return a dictionary in the form of (use the correct numbers, do not round numbers):</em> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;less than high school&quot;:0.2,</span><br><span class="line">&quot;high school&quot;:0.4,</span><br><span class="line">&quot;more than high school but not college&quot;:0.2,</span><br><span class="line">&quot;college&quot;:0.2&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proportion_of_education</span>():</span></span><br><span class="line">    <span class="comment"># your code goes here</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">    <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">    df = pd.read_csv(<span class="string">&quot;assests/NISPUF17.csv&quot;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    EDUS=df[<span class="string">&#x27;EDUC1&#x27;</span>]</span><br><span class="line">    edus=np.sort(EDUS.values)</span><br><span class="line">    poe=&#123;<span class="string">&quot;less than high school&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;high school&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;more than high school but not college&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;college&quot;</span>:<span class="number">0</span>&#125;</span><br><span class="line">    n=<span class="built_in">len</span>(edus)</span><br><span class="line">    poe[<span class="string">&quot;less than high school&quot;</span>]=np.<span class="built_in">sum</span>(edus==<span class="number">1</span>)/n</span><br><span class="line">    poe[<span class="string">&quot;high school&quot;</span>]=np.<span class="built_in">sum</span>(edus==<span class="number">2</span>)/n</span><br><span class="line">    poe[<span class="string">&quot;more than high school but not college&quot;</span>]=np.<span class="built_in">sum</span>(edus==<span class="number">3</span>)/n</span><br><span class="line">    poe[<span class="string">&quot;college&quot;</span>]=np.<span class="built_in">sum</span>(edus==<span class="number">4</span>)/n</span><br><span class="line">    <span class="keyword">return</span> poe</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(proportion_of_education())==<span class="built_in">type</span>(&#123;&#125;), <span class="string">&quot;You must return a dictionary.&quot;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(proportion_of_education()) == <span class="number">4</span>, <span class="string">&quot;You have not returned a dictionary with four items in it.&quot;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="string">&quot;less than high school&quot;</span> <span class="keyword">in</span> proportion_of_education().keys(), <span class="string">&quot;You have not returned a dictionary with the correct keys.&quot;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="string">&quot;high school&quot;</span> <span class="keyword">in</span> proportion_of_education().keys(), <span class="string">&quot;You have not returned a dictionary with the correct keys.&quot;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="string">&quot;more than high school but not college&quot;</span> <span class="keyword">in</span> proportion_of_education().keys(), <span class="string">&quot;You have not returned a dictionary with the correct keys.&quot;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="string">&quot;college&quot;</span> <span class="keyword">in</span> proportion_of_education().keys(), <span class="string">&quot;You have not returned a dictionary with the correct keys.&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://img-blog.csdnimg.cn/20201109150513849.png#pic_center"><br><br></p>
<h2 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h2><p>Let’s explore the relationship between being fed breastmilk as a child and getting a seasonal influenza vaccine from a healthcare provider. Return a tuple of the average number of influenza vaccines for those children we know received breastmilk as a child and those who know did not.</p>
<p><em>This function should return a tuple in the form (use the correct numbers:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(2.5, 0.1)</span><br></pre></td></tr></table></figure>

<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average_influenza_doses</span>():</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">    <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">    df = pd.read_csv(<span class="string">&quot;assests/NISPUF17.csv&quot;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    cbf_flu=df.loc[:,[<span class="string">&#x27;CBF_01&#x27;</span>,<span class="string">&#x27;P_NUMFLU&#x27;</span>]]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    cbf_flu1=cbf_flu[cbf_flu[<span class="string">&#x27;CBF_01&#x27;</span>] ==<span class="number">1</span>].dropna()</span><br><span class="line">    cbf_flu2=cbf_flu[cbf_flu[<span class="string">&#x27;CBF_01&#x27;</span>] ==<span class="number">2</span>].dropna()</span><br><span class="line">    </span><br><span class="line">    flu1=cbf_flu1[<span class="string">&#x27;P_NUMFLU&#x27;</span>].values.copy()</span><br><span class="line">    flu1[np.isnan(flu1)] = <span class="number">0</span></span><br><span class="line">    f1=np.<span class="built_in">sum</span>(flu1)/<span class="built_in">len</span>(flu1)</span><br><span class="line">    </span><br><span class="line">    flu2=cbf_flu2[<span class="string">&#x27;P_NUMFLU&#x27;</span>].values.copy()</span><br><span class="line">    flu2[np.isnan(flu2)] = <span class="number">0</span></span><br><span class="line">    f2=np.<span class="built_in">sum</span>(flu2)/<span class="built_in">len</span>(flu2)</span><br><span class="line">    </span><br><span class="line">    aid =(f1,f2)</span><br><span class="line">    <span class="keyword">return</span> aid</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(average_influenza_doses())==<span class="number">2</span>, <span class="string">&quot;Return two values in a tuple, the first for yes and the second for no.&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p><img src="https://img-blog.csdnimg.cn/20201109150713341.png#pic_center"></p>
<br>
## Question 3
It would be interesting to see if there is any evidence of a link between vaccine effectiveness and sex of the child. Calculate the ratio of the number of children who contracted chickenpox but were vaccinated against it (at least one varicella dose) versus those who were vaccinated but did not contract chicken pox. Return results by sex. 

<p><em>This function should return a dictionary in the form of (use the correct numbers):</em> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;male&quot;:0.2,</span><br><span class="line">&quot;female&quot;:0.4&#125;</span><br></pre></td></tr></table></figure>

<p>Note: To aid in verification, the <code>chickenpox_by_sex()[&#39;female&#39;]</code> value the autograder is looking for starts with the digits <code>0.0077</code>.</p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chickenpox_by_sex</span>():</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">    <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">    df = pd.read_csv(<span class="string">&quot;assests/NISPUF17.csv&quot;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    cpo_sex=df[df[<span class="string">&#x27;P_NUMVRC&#x27;</span>].gt(<span class="number">0</span>) &amp; df[<span class="string">&#x27;HAD_CPOX&#x27;</span>].lt(<span class="number">3</span>)].loc[:,[<span class="string">&#x27;HAD_CPOX&#x27;</span>,<span class="string">&#x27;SEX&#x27;</span>]]</span><br><span class="line">    <span class="comment">#Male 1 Female 2</span></span><br><span class="line">    cpo1_sex1=<span class="built_in">len</span>(cpo_sex[(cpo_sex[<span class="string">&#x27;HAD_CPOX&#x27;</span>]==<span class="number">1</span>) &amp; (cpo_sex[<span class="string">&#x27;SEX&#x27;</span>]==<span class="number">1</span>)])</span><br><span class="line">    cpo1_sex2=<span class="built_in">len</span>(cpo_sex[(cpo_sex[<span class="string">&#x27;HAD_CPOX&#x27;</span>]==<span class="number">1</span>) &amp; (cpo_sex[<span class="string">&#x27;SEX&#x27;</span>]==<span class="number">2</span>)])</span><br><span class="line">    cpo2_sex1=<span class="built_in">len</span>(cpo_sex[(cpo_sex[<span class="string">&#x27;HAD_CPOX&#x27;</span>]==<span class="number">2</span>) &amp; (cpo_sex[<span class="string">&#x27;SEX&#x27;</span>]==<span class="number">1</span>)])</span><br><span class="line">    cpo2_sex2=<span class="built_in">len</span>(cpo_sex[(cpo_sex[<span class="string">&#x27;HAD_CPOX&#x27;</span>]==<span class="number">2</span>) &amp; (cpo_sex[<span class="string">&#x27;SEX&#x27;</span>]==<span class="number">2</span>)])</span><br><span class="line">    </span><br><span class="line">    cbs=&#123;<span class="string">&quot;male&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;female&quot;</span>:<span class="number">0</span>&#125;</span><br><span class="line">    cbs[<span class="string">&#x27;male&#x27;</span>]=cpo1_sex1/cpo2_sex1</span><br><span class="line">    cbs[<span class="string">&#x27;female&#x27;</span>]=cpo1_sex2/cpo2_sex2</span><br><span class="line">    <span class="keyword">return</span> cbs</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(chickenpox_by_sex())==<span class="number">2</span>, <span class="string">&quot;Return a dictionary with two items, the first for males and the second for females.&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p><img src="https://img-blog.csdnimg.cn/20201109150749717.png#pic_center"><br><br></p>
<h2 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h2><p>A correlation is a statistical relationship between two variables. If we wanted to know if vaccines work, we might look at the correlation between the use of the vaccine and whether it results in prevention of the infection or disease [1]. In this question, you are to see if there is a correlation between having had the chicken pox and the number of chickenpox vaccine doses given (varicella).</p>
<p>Some notes on interpreting the answer. The <code>had_chickenpox_column</code> is either <code>1</code> (for yes) or <code>2</code> (for no), and the <code>num_chickenpox_vaccine_column</code> is the number of doses a child has been given of the varicella vaccine. A positive correlation (e.g., <code>corr &gt; 0</code>) means that an increase in <code>had_chickenpox_column</code> (which means more no’s) would also increase the values of <code>num_chickenpox_vaccine_column</code> (which means more doses of vaccine). If there is a negative correlation (e.g., <code>corr &lt; 0</code>), it indicates that having had chickenpox is related to an increase in the number of vaccine doses.</p>
<p>Also, <code>pval</code> is the probability that we observe a correlation between <code>had_chickenpox_column</code> and <code>num_chickenpox_vaccine_column</code> which is greater than or equal to a particular value occurred by chance. A small <code>pval</code> means that the observed correlation is highly unlikely to occur by chance. In this case, <code>pval</code> should be very small (will end in <code>e-18</code> indicating a very small number).</p>
<p>[1] This isn’t really the full picture, since we are not looking at when the dose was given. It’s possible that children had chickenpox and then their parents went to get them the vaccine. Does this dataset have the data we would need to investigate the timing of the dose?</p>
<h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">corr_chickenpox</span>():</span></span><br><span class="line">    <span class="keyword">import</span> scipy.stats <span class="keyword">as</span> stats</span><br><span class="line">    <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">    <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># this is just an example dataframe</span></span><br><span class="line">    <span class="comment"># df=pd.DataFrame(&#123;&quot;had_chickenpox_column&quot;:np.random.randint(1,3,size=(100)),</span></span><br><span class="line">    <span class="comment">#             &quot;num_chickenpox_vaccine_column&quot;:np.random.randint(0,6,size=(100))&#125;)</span></span><br><span class="line">    df = pd.read_csv(<span class="string">&quot;assests/NISPUF17.csv&quot;</span>, index_col=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    df=df[df[<span class="string">&#x27;HAD_CPOX&#x27;</span>].lt(<span class="number">3</span>)].loc[:,[<span class="string">&#x27;HAD_CPOX&#x27;</span>,<span class="string">&#x27;P_NUMVRC&#x27;</span>]].dropna()</span><br><span class="line">    df.columns=[<span class="string">&#x27;had_chickenpox_column&#x27;</span>,<span class="string">&#x27;num_chickenpox_vaccine_column&#x27;</span>]</span><br><span class="line">    <span class="comment"># here is some stub code to actually run the correlation</span></span><br><span class="line">    corr, pval=stats.pearsonr(df[<span class="string">&quot;had_chickenpox_column&quot;</span>],df[<span class="string">&quot;num_chickenpox_vaccine_column&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># just return the correlation</span></span><br><span class="line">    <span class="keyword">return</span> corr</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="number">-1</span>&lt;=corr_chickenpox()&lt;=<span class="number">1</span>, <span class="string">&quot;You must return a float number between -1.0 and 1.0.&quot;</span></span><br></pre></td></tr></table></figure>


<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><p><img src="https://img-blog.csdnimg.cn/20201109150957386.png#pic_center"></p>
<br>
<br>

<p>&emsp;&emsp; 大家其他还有需要的就在评论留言哦 :)  欢迎讨论分享~</p>]]></content>
      <categories>
        <category>DataScience</category>
        <category>Coursera</category>
        <category>Intro2DS</category>
      </categories>
      <tags>
        <tag>Coursera</tag>
        <tag>DataScience</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment3</title>
    <url>/2020/11/09/Intro2DS/Assignment3/</url>
    <content><![CDATA[<p>&emsp;&emsp; u1s1，这门课的assignment还是有点难度的，特别是assigment4（哀怨），放给大家参考啦~<br>&emsp;&emsp; 有时间（需求）就把所有代码放到github上（好担心被河蟹啊）<br>&emsp;&emsp; 相关链接：<br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Quiz/">Coursera | Introduction to Data Science in Python（University of Michigan）| Quiz答案</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment1/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment1</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment2/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment2</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment3/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment3</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment4/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment4</a><br>&emsp;&emsp; CSDN链接：<br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109544058">Coursera | Introduction to Data Science in Python（University of Michigan）| Quiz答案</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109583609">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment1</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109577773">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment2</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109583813">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment3</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109584609">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment4</a></p>
<p>&emsp;&emsp;assignment3开始难度暴增，到4就爽翻了。一共13题，刺激。</p>
<h1 id="Assignment-3"><a href="#Assignment-3" class="headerlink" title="Assignment 3"></a>Assignment 3</h1><p>All questions are weighted the same in this assignment. This assignment requires more individual learning then the last one did - you are encouraged to check out the <a href="http://pandas.pydata.org/pandas-docs/stable/">pandas documentation</a> to find functions or methods you might not have used yet, or ask questions on <a href="http://stackoverflow.com/">Stack Overflow</a> and tag them as pandas and python related. All questions are worth the same number of points except question 1 which is worth 17% of the assignment grade.</p>
<p><strong>Note</strong>: Questions 2-13 rely on your question 1 answer.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># Filter all warnings. If you would like to see the warnings, please comment the two lines below.</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h2><p>Load the energy data from the file <code>assets/Energy Indicators.xls</code>, which is a list of indicators of energy supply and renewable electricity production (assets/Energy%20Indicators.xls)  from the <a href="http://unstats.un.org/unsd/environment/excel_file_tables/2013/Energy%20Indicators.xls">United Nations</a> for the year 2013, and should be put into a DataFrame with the variable name of <strong>Energy</strong>.</p>
<p>Keep in mind that this is an Excel file, and not a comma separated values file. Also, make sure to exclude the footer and header information from the datafile. The first two columns are unneccessary, so you should get rid of them, and you should change the column labels so that the columns are:</p>
<p><code>[&#39;Country&#39;, &#39;Energy Supply&#39;, &#39;Energy Supply per Capita&#39;, &#39;% Renewable]</code></p>
<p>Convert <code>Energy Supply</code> to gigajoules (<strong>Note: there are 1,000,000 gigajoules in a petajoule</strong>). For all countries which have missing data (e.g. data with “…”) make sure this is reflected as <code>np.NaN</code> values.</p>
<p>Rename the following list of countries (for use in later questions):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;Republic of Korea&quot;: &quot;South Korea&quot;,</span><br><span class="line">&quot;United States of America&quot;: &quot;United States&quot;,</span><br><span class="line">&quot;United Kingdom of Great Britain and Northern Ireland&quot;: &quot;United Kingdom&quot;,</span><br><span class="line">&quot;China, Hong Kong Special Administrative Region&quot;: &quot;Hong Kong&quot;</span><br></pre></td></tr></table></figure>

<p>There are also several countries with parenthesis in their name. Be sure to remove these, e.g. <code>&#39;Bolivia (Plurinational State of)&#39;</code> should be <code>&#39;Bolivia&#39;</code>.</p>
<p>Next, load the GDP data from the file <code>assets/world_bank.csv</code>, which is a csv containing countries’ GDP from 1960 to 2015 from <a href="http://data.worldbank.org/indicator/NY.GDP.MKTP.CD">World Bank</a>. Call this DataFrame <strong>GDP</strong>. </p>
<p>Make sure to skip the header, and rename the following list of countries:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;Korea, Rep.&quot;: &quot;South Korea&quot;, </span><br><span class="line">&quot;Iran, Islamic Rep.&quot;: &quot;Iran&quot;,</span><br><span class="line">&quot;Hong Kong SAR, China&quot;: &quot;Hong Kong&quot;</span><br></pre></td></tr></table></figure>

<p>Finally, load the <a href="http://www.scimagojr.com/countryrank.php?category=2102">Sciamgo Journal and Country Rank data for Energy Engineering and Power Technology</a> from the file <code>assets/scimagojr-3.xlsx</code>, which ranks countries based on their journal contributions in the aforementioned area. Call this DataFrame <strong>ScimEn</strong>.</p>
<p>Join the three datasets: GDP, Energy, and ScimEn into a new dataset (using the intersection of country names). Use only the last 10 years (2006-2015) of GDP data and only the top 15 countries by Scimagojr ‘Rank’ (Rank 1 through 15). </p>
<p>The index of this DataFrame should be the name of the country, and the columns should be [‘Rank’, ‘Documents’, ‘Citable documents’, ‘Citations’, ‘Self-citations’,<br>       ‘Citations per document’, ‘H index’, ‘Energy Supply’,<br>       ‘Energy Supply per Capita’, ‘% Renewable’, ‘2006’, ‘2007’, ‘2008’,<br>       ‘2009’, ‘2010’, ‘2011’, ‘2012’, ‘2013’, ‘2014’, ‘2015’].</p>
<p><em>This function should return a DataFrame with 20 columns and 15 entries, and the rows of the DataFrame should be sorted by “Rank”.</em></p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer_one</span>():</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    Energy = pd.read_excel(<span class="string">&#x27;assests/Energy Indicators.xls&#x27;</span>,na_values=[<span class="string">&quot;...&quot;</span>],header = <span class="literal">None</span>,skiprows=<span class="number">18</span>,skipfooter= <span class="number">38</span>,usecols=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],names=[<span class="string">&#x27;Country&#x27;</span>, <span class="string">&#x27;Energy Supply&#x27;</span>, <span class="string">&#x27;Energy Supply per Capita&#x27;</span>, <span class="string">&#x27;% Renewable&#x27;</span>])</span><br><span class="line">    Energy[<span class="string">&#x27;Energy Supply&#x27;</span>] = Energy[<span class="string">&#x27;Energy Supply&#x27;</span>].apply(<span class="keyword">lambda</span> x: x*<span class="number">1000000</span>)</span><br><span class="line"></span><br><span class="line">    Energy[<span class="string">&#x27;Country&#x27;</span>] = Energy[<span class="string">&#x27;Country&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot; \(.*\)&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    Energy[<span class="string">&#x27;Country&#x27;</span>] = Energy[<span class="string">&#x27;Country&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\d*&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    Energy[<span class="string">&#x27;Country&#x27;</span>] = Energy[<span class="string">&#x27;Country&#x27;</span>].replace(&#123;<span class="string">&#x27;Republic of Korea&#x27;</span> : <span class="string">&#x27;South Korea&#x27;</span>,</span><br><span class="line">                                               <span class="string">&#x27;United States of America&#x27;</span> : <span class="string">&#x27;United States&#x27;</span>,</span><br><span class="line">                                               <span class="string">&#x27;United Kingdom of Great Britain and Northern Ireland&#x27;</span>:<span class="string">&#x27;United Kingdom&#x27;</span>,</span><br><span class="line">                                               <span class="string">&#x27;China, Hong Kong Special Administrative Region&#x27;</span>:<span class="string">&#x27;Hong Kong&#x27;</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    GDP = pd.read_csv(<span class="string">&#x27;assests/world_bank.csv&#x27;</span>, skiprows = <span class="number">4</span>)</span><br><span class="line">    GDP[<span class="string">&#x27;Country Name&#x27;</span>] = GDP[<span class="string">&#x27;Country Name&#x27;</span>].replace(&#123;<span class="string">&#x27;Korea, Rep.&#x27;</span>: <span class="string">&#x27;South Korea&#x27;</span>, </span><br><span class="line">                                                       <span class="string">&#x27;Iran, Islamic Rep.&#x27;</span>: <span class="string">&#x27;Iran&#x27;</span>, </span><br><span class="line">                                                       <span class="string">&#x27;Hong Kong SAR, China&#x27;</span> : <span class="string">&#x27;Hong Kong&#x27;</span>&#125;) </span><br><span class="line">    </span><br><span class="line">    ScimEn = pd.read_excel(<span class="string">&#x27;assests/scimagojr-3.xlsx&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    merge1 = pd.merge(ScimEn,Energy,how=<span class="string">&quot;inner&quot;</span>,left_on=<span class="string">&quot;Country&quot;</span>,right_on=<span class="string">&quot;Country&quot;</span>)</span><br><span class="line">    merge1 = merge1[merge1[<span class="string">&quot;Rank&quot;</span>]&lt;=<span class="number">15</span>]</span><br><span class="line">    </span><br><span class="line">    GDP.rename(columns = &#123;<span class="string">&quot;Country Name&quot;</span>:<span class="string">&quot;Country&quot;</span>&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line">    GDP = GDP.loc[:,[<span class="string">&#x27;2006&#x27;</span>, <span class="string">&#x27;2007&#x27;</span>, <span class="string">&#x27;2008&#x27;</span>, <span class="string">&#x27;2009&#x27;</span>, <span class="string">&#x27;2010&#x27;</span>, <span class="string">&#x27;2011&#x27;</span>, <span class="string">&#x27;2012&#x27;</span>, <span class="string">&#x27;2013&#x27;</span>, <span class="string">&#x27;2014&#x27;</span>, <span class="string">&#x27;2015&#x27;</span>,<span class="string">&quot;Country&quot;</span>]]</span><br><span class="line">    merge2 = pd.merge(merge1,GDP,how=<span class="string">&quot;inner&quot;</span>,left_on=<span class="string">&quot;Country&quot;</span>,right_on=<span class="string">&quot;Country&quot;</span>).set_index(<span class="string">&quot;Country&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> merge2</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(answer_one()) == pd.DataFrame, <span class="string">&quot;Q1: You should return a DataFrame!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> answer_one().shape == (<span class="number">15</span>,<span class="number">20</span>), <span class="string">&quot;Q1: Your DataFrame should have 20 columns and 15 entries!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Rank</th>
      <th>Documents</th>
      <th>Citable documents</th>
      <th>Citations</th>
      <th>Self-citations</th>
      <th>Citations per document</th>
      <th>H index</th>
      <th>Energy Supply</th>
      <th>Energy Supply per Capita</th>
      <th>% Renewable</th>
      <th>2006</th>
      <th>2007</th>
      <th>2008</th>
      <th>2009</th>
      <th>2010</th>
      <th>2011</th>
      <th>2012</th>
      <th>2013</th>
      <th>2014</th>
      <th>2015</th>
    </tr>
    <tr>
      <th>Country</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>China</th>
      <td>1</td>
      <td>127050</td>
      <td>126767</td>
      <td>597237</td>
      <td>411683</td>
      <td>4.70</td>
      <td>138</td>
      <td>1.271910e+11</td>
      <td>93.0</td>
      <td>19.754910</td>
      <td>3.992331e+12</td>
      <td>4.559041e+12</td>
      <td>4.997775e+12</td>
      <td>5.459247e+12</td>
      <td>6.039659e+12</td>
      <td>6.612490e+12</td>
      <td>7.124978e+12</td>
      <td>7.672448e+12</td>
      <td>8.230121e+12</td>
      <td>8.797999e+12</td>
    </tr>
    <tr>
      <th>United States</th>
      <td>2</td>
      <td>96661</td>
      <td>94747</td>
      <td>792274</td>
      <td>265436</td>
      <td>8.20</td>
      <td>230</td>
      <td>9.083800e+10</td>
      <td>286.0</td>
      <td>11.570980</td>
      <td>1.479230e+13</td>
      <td>1.505540e+13</td>
      <td>1.501149e+13</td>
      <td>1.459484e+13</td>
      <td>1.496437e+13</td>
      <td>1.520402e+13</td>
      <td>1.554216e+13</td>
      <td>1.577367e+13</td>
      <td>1.615662e+13</td>
      <td>1.654857e+13</td>
    </tr>
    <tr>
      <th>Japan</th>
      <td>3</td>
      <td>30504</td>
      <td>30287</td>
      <td>223024</td>
      <td>61554</td>
      <td>7.31</td>
      <td>134</td>
      <td>1.898400e+10</td>
      <td>149.0</td>
      <td>10.232820</td>
      <td>5.496542e+12</td>
      <td>5.617036e+12</td>
      <td>5.558527e+12</td>
      <td>5.251308e+12</td>
      <td>5.498718e+12</td>
      <td>5.473738e+12</td>
      <td>5.569102e+12</td>
      <td>5.644659e+12</td>
      <td>5.642884e+12</td>
      <td>5.669563e+12</td>
    </tr>
    <tr>
      <th>United Kingdom</th>
      <td>4</td>
      <td>20944</td>
      <td>20357</td>
      <td>206091</td>
      <td>37874</td>
      <td>9.84</td>
      <td>139</td>
      <td>7.920000e+09</td>
      <td>124.0</td>
      <td>10.600470</td>
      <td>2.419631e+12</td>
      <td>2.482203e+12</td>
      <td>2.470614e+12</td>
      <td>2.367048e+12</td>
      <td>2.403504e+12</td>
      <td>2.450911e+12</td>
      <td>2.479809e+12</td>
      <td>2.533370e+12</td>
      <td>2.605643e+12</td>
      <td>2.666333e+12</td>
    </tr>
    <tr>
      <th>Russian Federation</th>
      <td>5</td>
      <td>18534</td>
      <td>18301</td>
      <td>34266</td>
      <td>12422</td>
      <td>1.85</td>
      <td>57</td>
      <td>3.070900e+10</td>
      <td>214.0</td>
      <td>17.288680</td>
      <td>1.385793e+12</td>
      <td>1.504071e+12</td>
      <td>1.583004e+12</td>
      <td>1.459199e+12</td>
      <td>1.524917e+12</td>
      <td>1.589943e+12</td>
      <td>1.645876e+12</td>
      <td>1.666934e+12</td>
      <td>1.678709e+12</td>
      <td>1.616149e+12</td>
    </tr>
    <tr>
      <th>Canada</th>
      <td>6</td>
      <td>17899</td>
      <td>17620</td>
      <td>215003</td>
      <td>40930</td>
      <td>12.01</td>
      <td>149</td>
      <td>1.043100e+10</td>
      <td>296.0</td>
      <td>61.945430</td>
      <td>1.564469e+12</td>
      <td>1.596740e+12</td>
      <td>1.612713e+12</td>
      <td>1.565145e+12</td>
      <td>1.613406e+12</td>
      <td>1.664087e+12</td>
      <td>1.693133e+12</td>
      <td>1.730688e+12</td>
      <td>1.773486e+12</td>
      <td>1.792609e+12</td>
    </tr>
    <tr>
      <th>Germany</th>
      <td>7</td>
      <td>17027</td>
      <td>16831</td>
      <td>140566</td>
      <td>27426</td>
      <td>8.26</td>
      <td>126</td>
      <td>1.326100e+10</td>
      <td>165.0</td>
      <td>17.901530</td>
      <td>3.332891e+12</td>
      <td>3.441561e+12</td>
      <td>3.478809e+12</td>
      <td>3.283340e+12</td>
      <td>3.417298e+12</td>
      <td>3.542371e+12</td>
      <td>3.556724e+12</td>
      <td>3.567317e+12</td>
      <td>3.624386e+12</td>
      <td>3.685556e+12</td>
    </tr>
    <tr>
      <th>India</th>
      <td>8</td>
      <td>15005</td>
      <td>14841</td>
      <td>128763</td>
      <td>37209</td>
      <td>8.58</td>
      <td>115</td>
      <td>3.319500e+10</td>
      <td>26.0</td>
      <td>14.969080</td>
      <td>1.265894e+12</td>
      <td>1.374865e+12</td>
      <td>1.428361e+12</td>
      <td>1.549483e+12</td>
      <td>1.708459e+12</td>
      <td>1.821872e+12</td>
      <td>1.924235e+12</td>
      <td>2.051982e+12</td>
      <td>2.200617e+12</td>
      <td>2.367206e+12</td>
    </tr>
    <tr>
      <th>France</th>
      <td>9</td>
      <td>13153</td>
      <td>12973</td>
      <td>130632</td>
      <td>28601</td>
      <td>9.93</td>
      <td>114</td>
      <td>1.059700e+10</td>
      <td>166.0</td>
      <td>17.020280</td>
      <td>2.607840e+12</td>
      <td>2.669424e+12</td>
      <td>2.674637e+12</td>
      <td>2.595967e+12</td>
      <td>2.646995e+12</td>
      <td>2.702032e+12</td>
      <td>2.706968e+12</td>
      <td>2.722567e+12</td>
      <td>2.729632e+12</td>
      <td>2.761185e+12</td>
    </tr>
    <tr>
      <th>South Korea</th>
      <td>10</td>
      <td>11983</td>
      <td>11923</td>
      <td>114675</td>
      <td>22595</td>
      <td>9.57</td>
      <td>104</td>
      <td>1.100700e+10</td>
      <td>221.0</td>
      <td>2.279353</td>
      <td>9.410199e+11</td>
      <td>9.924316e+11</td>
      <td>1.020510e+12</td>
      <td>1.027730e+12</td>
      <td>1.094499e+12</td>
      <td>1.134796e+12</td>
      <td>1.160809e+12</td>
      <td>1.194429e+12</td>
      <td>1.234340e+12</td>
      <td>1.266580e+12</td>
    </tr>
    <tr>
      <th>Italy</th>
      <td>11</td>
      <td>10964</td>
      <td>10794</td>
      <td>111850</td>
      <td>26661</td>
      <td>10.20</td>
      <td>106</td>
      <td>6.530000e+09</td>
      <td>109.0</td>
      <td>33.667230</td>
      <td>2.202170e+12</td>
      <td>2.234627e+12</td>
      <td>2.211154e+12</td>
      <td>2.089938e+12</td>
      <td>2.125185e+12</td>
      <td>2.137439e+12</td>
      <td>2.077184e+12</td>
      <td>2.040871e+12</td>
      <td>2.033868e+12</td>
      <td>2.049316e+12</td>
    </tr>
    <tr>
      <th>Spain</th>
      <td>12</td>
      <td>9428</td>
      <td>9330</td>
      <td>123336</td>
      <td>23964</td>
      <td>13.08</td>
      <td>115</td>
      <td>4.923000e+09</td>
      <td>106.0</td>
      <td>37.968590</td>
      <td>1.414823e+12</td>
      <td>1.468146e+12</td>
      <td>1.484530e+12</td>
      <td>1.431475e+12</td>
      <td>1.431673e+12</td>
      <td>1.417355e+12</td>
      <td>1.380216e+12</td>
      <td>1.357139e+12</td>
      <td>1.375605e+12</td>
      <td>1.419821e+12</td>
    </tr>
    <tr>
      <th>Iran</th>
      <td>13</td>
      <td>8896</td>
      <td>8819</td>
      <td>57470</td>
      <td>19125</td>
      <td>6.46</td>
      <td>72</td>
      <td>9.172000e+09</td>
      <td>119.0</td>
      <td>5.707721</td>
      <td>3.895523e+11</td>
      <td>4.250646e+11</td>
      <td>4.289909e+11</td>
      <td>4.389208e+11</td>
      <td>4.677902e+11</td>
      <td>4.853309e+11</td>
      <td>4.532569e+11</td>
      <td>4.445926e+11</td>
      <td>4.639027e+11</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>Australia</th>
      <td>14</td>
      <td>8831</td>
      <td>8725</td>
      <td>90765</td>
      <td>15606</td>
      <td>10.28</td>
      <td>107</td>
      <td>5.386000e+09</td>
      <td>231.0</td>
      <td>11.810810</td>
      <td>1.021939e+12</td>
      <td>1.060340e+12</td>
      <td>1.099644e+12</td>
      <td>1.119654e+12</td>
      <td>1.142251e+12</td>
      <td>1.169431e+12</td>
      <td>1.211913e+12</td>
      <td>1.241484e+12</td>
      <td>1.272520e+12</td>
      <td>1.301251e+12</td>
    </tr>
    <tr>
      <th>Brazil</th>
      <td>15</td>
      <td>8668</td>
      <td>8596</td>
      <td>60702</td>
      <td>14396</td>
      <td>7.00</td>
      <td>86</td>
      <td>1.214900e+10</td>
      <td>59.0</td>
      <td>69.648030</td>
      <td>1.845080e+12</td>
      <td>1.957118e+12</td>
      <td>2.056809e+12</td>
      <td>2.054215e+12</td>
      <td>2.208872e+12</td>
      <td>2.295245e+12</td>
      <td>2.339209e+12</td>
      <td>2.409740e+12</td>
      <td>2.412231e+12</td>
      <td>2.319423e+12</td>
    </tr>
  </tbody>
</table>
</div>


<br>



<h2 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h2><p>The previous question joined three datasets then reduced this to just the top 15 entries. When you joined the datasets, but before you reduced this to the top 15 items, how many entries did you lose?</p>
<p><em>This function should return a single number.</em></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">%%HTML</span><br><span class="line">&lt;svg width=<span class="string">&quot;800&quot;</span> height=<span class="string">&quot;300&quot;</span>&gt;</span><br><span class="line">  &lt;circle cx=<span class="string">&quot;150&quot;</span> cy=<span class="string">&quot;180&quot;</span> r=<span class="string">&quot;80&quot;</span> fill-opacity=<span class="string">&quot;0.2&quot;</span> stroke=<span class="string">&quot;black&quot;</span> stroke-width=<span class="string">&quot;2&quot;</span> fill=<span class="string">&quot;blue&quot;</span> /&gt;</span><br><span class="line">  &lt;circle cx=<span class="string">&quot;200&quot;</span> cy=<span class="string">&quot;100&quot;</span> r=<span class="string">&quot;80&quot;</span> fill-opacity=<span class="string">&quot;0.2&quot;</span> stroke=<span class="string">&quot;black&quot;</span> stroke-width=<span class="string">&quot;2&quot;</span> fill=<span class="string">&quot;red&quot;</span> /&gt;</span><br><span class="line">  &lt;circle cx=<span class="string">&quot;100&quot;</span> cy=<span class="string">&quot;100&quot;</span> r=<span class="string">&quot;80&quot;</span> fill-opacity=<span class="string">&quot;0.2&quot;</span> stroke=<span class="string">&quot;black&quot;</span> stroke-width=<span class="string">&quot;2&quot;</span> fill=<span class="string">&quot;green&quot;</span> /&gt;</span><br><span class="line">  &lt;line x1=<span class="string">&quot;150&quot;</span> y1=<span class="string">&quot;125&quot;</span> x2=<span class="string">&quot;300&quot;</span> y2=<span class="string">&quot;150&quot;</span> stroke=<span class="string">&quot;black&quot;</span> stroke-width=<span class="string">&quot;2&quot;</span> fill=<span class="string">&quot;black&quot;</span> stroke-dasharray=<span class="string">&quot;5,3&quot;</span>/&gt;</span><br><span class="line">  &lt;text x=&quot;300&quot; y=&quot;165&quot; font-family=&quot;Verdana&quot; font-size=&quot;35&quot;&gt;Everything but this!&lt;/text&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>


<svg width="800" height="300">
  <circle cx="150" cy="180" r="80" fill-opacity="0.2" stroke="black" stroke-width="2" fill="blue"/>
  <circle cx="200" cy="100" r="80" fill-opacity="0.2" stroke="black" stroke-width="2" fill="red"/>
  <circle cx="100" cy="100" r="80" fill-opacity="0.2" stroke="black" stroke-width="2" fill="green"/>
  <line x1="150" y1="125" x2="300" y2="150" stroke="black" stroke-width="2" fill="black" stroke-dasharray="5,3"/>
  <text x="300" y="165" font-family="Verdana" font-size="35">Everything but th# is!</text>
</svg>

<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer_two</span>():</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    Energy = pd.read_excel(<span class="string">&#x27;assests/Energy Indicators.xls&#x27;</span>,na_values=[<span class="string">&quot;...&quot;</span>],header = <span class="literal">None</span>,skiprows=<span class="number">18</span>,skipfooter= <span class="number">38</span>,usecols=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],names=[<span class="string">&#x27;Country&#x27;</span>, <span class="string">&#x27;Energy Supply&#x27;</span>, <span class="string">&#x27;Energy Supply per Capita&#x27;</span>, <span class="string">&#x27;% Renewable&#x27;</span>])</span><br><span class="line">    Energy[<span class="string">&#x27;Energy Supply&#x27;</span>] = Energy[<span class="string">&#x27;Energy Supply&#x27;</span>].apply(<span class="keyword">lambda</span> x: x*<span class="number">1000000</span>)</span><br><span class="line"></span><br><span class="line">    Energy[<span class="string">&#x27;Country&#x27;</span>] = Energy[<span class="string">&#x27;Country&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot; \(.*\)&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    Energy[<span class="string">&#x27;Country&#x27;</span>] = Energy[<span class="string">&#x27;Country&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\d*&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    Energy[<span class="string">&#x27;Country&#x27;</span>] = Energy[<span class="string">&#x27;Country&#x27;</span>].replace(&#123;<span class="string">&#x27;Republic of Korea&#x27;</span> : <span class="string">&#x27;South Korea&#x27;</span>,</span><br><span class="line">                                               <span class="string">&#x27;United States of America&#x27;</span> : <span class="string">&#x27;United States&#x27;</span>,</span><br><span class="line">                                               <span class="string">&#x27;United Kingdom of Great Britain and Northern Ireland&#x27;</span>:<span class="string">&#x27;United Kingdom&#x27;</span>,</span><br><span class="line">                                               <span class="string">&#x27;China, Hong Kong Special Administrative Region&#x27;</span>:<span class="string">&#x27;Hong Kong&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    GDP = pd.read_csv(<span class="string">&#x27;assests/world_bank.csv&#x27;</span>, skiprows = <span class="number">4</span>)</span><br><span class="line">    GDP[<span class="string">&#x27;Country Name&#x27;</span>] = GDP[<span class="string">&#x27;Country Name&#x27;</span>].replace(&#123;<span class="string">&#x27;Korea, Rep.&#x27;</span>: <span class="string">&#x27;South Korea&#x27;</span>, </span><br><span class="line">                                                       <span class="string">&#x27;Iran, Islamic Rep.&#x27;</span>: <span class="string">&#x27;Iran&#x27;</span>, </span><br><span class="line">                                                       <span class="string">&#x27;Hong Kong SAR, China&#x27;</span> : <span class="string">&#x27;Hong Kong&#x27;</span>&#125;) </span><br><span class="line"></span><br><span class="line">    ScimEn = pd.read_excel(<span class="string">&#x27;assests/scimagojr-3.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    inner1 = pd.merge(ScimEn,Energy,how=<span class="string">&quot;inner&quot;</span>,left_on=<span class="string">&quot;Country&quot;</span>,right_on=<span class="string">&quot;Country&quot;</span>)</span><br><span class="line"></span><br><span class="line">    GDP.rename(columns = &#123;<span class="string">&quot;Country Name&quot;</span>:<span class="string">&quot;Country&quot;</span>&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line">    GDP = GDP.loc[:,[<span class="string">&#x27;2006&#x27;</span>, <span class="string">&#x27;2007&#x27;</span>, <span class="string">&#x27;2008&#x27;</span>, <span class="string">&#x27;2009&#x27;</span>, <span class="string">&#x27;2010&#x27;</span>, <span class="string">&#x27;2011&#x27;</span>, <span class="string">&#x27;2012&#x27;</span>, <span class="string">&#x27;2013&#x27;</span>, <span class="string">&#x27;2014&#x27;</span>, <span class="string">&#x27;2015&#x27;</span>,<span class="string">&quot;Country&quot;</span>]]</span><br><span class="line">    inner2 = pd.merge(inner1,GDP,how=<span class="string">&quot;inner&quot;</span>,left_on=<span class="string">&quot;Country&quot;</span>,right_on=<span class="string">&quot;Country&quot;</span>).set_index(<span class="string">&quot;Country&quot;</span>)</span><br><span class="line"></span><br><span class="line">    outer1 = pd.merge(ScimEn,Energy,how=<span class="string">&quot;outer&quot;</span>,left_on=<span class="string">&quot;Country&quot;</span>,right_on=<span class="string">&quot;Country&quot;</span>)</span><br><span class="line">    outer2 = pd.merge(outer1,GDP,how=<span class="string">&quot;outer&quot;</span>,left_on=<span class="string">&quot;Country&quot;</span>,right_on=<span class="string">&quot;Country&quot;</span>).set_index(<span class="string">&quot;Country&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(outer2)-<span class="built_in">len</span>(inner2)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(answer_two()) == <span class="built_in">int</span>, <span class="string">&quot;Q2: You should return an int number!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><pre><code>156</code></pre>
<br>

<h2 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h2><p>What are the top 15 countries for average GDP over the last 10 years?</p>
<p><em>This function should return a Series named <code>avgGDP</code> with 15 countries and their average GDP sorted in descending order.</em></p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer_three</span>():</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    info=answer_one()</span><br><span class="line">    <span class="keyword">return</span> info[[<span class="string">&quot;2006&quot;</span>,<span class="string">&quot;2007&quot;</span>,<span class="string">&quot;2008&quot;</span>,<span class="string">&quot;2009&quot;</span>,<span class="string">&quot;2010&quot;</span>,<span class="string">&quot;2011&quot;</span>,<span class="string">&quot;2012&quot;</span>,<span class="string">&quot;2013&quot;</span>,<span class="string">&quot;2014&quot;</span>,<span class="string">&quot;2015&quot;</span>]].apply(np.mean,axis = <span class="number">1</span>).sort_values(ascending = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(answer_three()) == pd.Series, <span class="string">&quot;Q3: You should return a Series!&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p><img src="https://img-blog.csdnimg.cn/20201109193559468.png#pic_center"></p>
<br>

<h2 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h2><p>By how much had the GDP changed over the 10 year span for the country with the 6th largest average GDP?</p>
<p><em>This function should return a single number.</em></p>
<h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer_four</span>():</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    info=answer_one()</span><br><span class="line">    info[<span class="string">&#x27;avgGDP&#x27;</span>]=info[[<span class="string">&quot;2006&quot;</span>,<span class="string">&quot;2007&quot;</span>,<span class="string">&quot;2008&quot;</span>,<span class="string">&quot;2009&quot;</span>,<span class="string">&quot;2010&quot;</span>,<span class="string">&quot;2011&quot;</span>,<span class="string">&quot;2012&quot;</span>,<span class="string">&quot;2013&quot;</span>,<span class="string">&quot;2014&quot;</span>,<span class="string">&quot;2015&quot;</span>]].apply(np.mean,axis = <span class="number">1</span>)</span><br><span class="line">    info.sort_values([<span class="string">&#x27;avgGDP&#x27;</span>],ascending = <span class="literal">False</span>,inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># g6=info.index[5]</span></span><br><span class="line">    <span class="comment"># info.loc[g6][&quot;2015&quot;]-info.loc[g6][&quot;2006&quot;]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> info.iloc[<span class="number">5</span>][<span class="string">&#x27;2015&#x27;</span>]-info.iloc[<span class="number">5</span>][<span class="string">&#x27;2006&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><pre><code>246702696075.3999</code></pre>
<br>

<h2 id="Question-5"><a href="#Question-5" class="headerlink" title="Question 5"></a>Question 5</h2><p>What is the mean energy supply per capita?</p>
<p><em>This function should return a single number.</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer_five</span>():</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    info = answer_one()</span><br><span class="line">    <span class="keyword">return</span> info[<span class="string">&#x27;Energy Supply per Capita&#x27;</span>].mean()</span><br><span class="line"><span class="comment">#     return float(info[&#x27;Energy Supply per Capita&#x27;].mean())</span></span><br></pre></td></tr></table></figure>



<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><pre><code>157.6</code></pre>
<br>


<h2 id="Question-6"><a href="#Question-6" class="headerlink" title="Question 6"></a>Question 6</h2><p>What country has the maximum % Renewable and what is the percentage?</p>
<p><em>This function should return a tuple with the name of the country and the percentage.</em></p>
<h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer_six</span>():</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    info = answer_one()</span><br><span class="line">    result=info.sort_values(by=<span class="string">&#x27;% Renewable&#x27;</span>, ascending=<span class="literal">False</span>).iloc[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> (result.name,result[<span class="string">&#x27;% Renewable&#x27;</span>])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(answer_six()) == <span class="built_in">tuple</span>, <span class="string">&quot;Q6: You should return a tuple!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(answer_six()[<span class="number">0</span>]) == <span class="built_in">str</span>, <span class="string">&quot;Q6: The first element in your result should be the name of the country!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结果-5"><a href="#结果-5" class="headerlink" title="结果"></a>结果</h3><pre><code>(&#39;Brazil&#39;, 69.64803)</code></pre>
<br>

<h2 id="Question-7"><a href="#Question-7" class="headerlink" title="Question 7"></a>Question 7</h2><p>Create a new column that is the ratio of Self-Citations to Total Citations.<br>What is the maximum value for this new column, and what country has the highest ratio?</p>
<p><em>This function should return a tuple with the name of the country and the ratio.</em></p>
<h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer_seven</span>():</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    info = answer_one()</span><br><span class="line">    info[<span class="string">&#x27;Citation ratio&#x27;</span>]=info[<span class="string">&#x27;Self-citations&#x27;</span>]/info[<span class="string">&#x27;Citations&#x27;</span>]</span><br><span class="line">    result=info.sort_values(by=<span class="string">&#x27;Citation ratio&#x27;</span>, ascending=<span class="literal">False</span>).iloc[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> (result.name,result[<span class="string">&#x27;Citation ratio&#x27;</span>])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(answer_seven()) == <span class="built_in">tuple</span>, <span class="string">&quot;Q7: You should return a tuple!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(answer_seven()[<span class="number">0</span>]) == <span class="built_in">str</span>, <span class="string">&quot;Q7: The first element in your result should be the name of the country!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="结果-6"><a href="#结果-6" class="headerlink" title="结果"></a>结果</h3><pre><code>(&#39;China&#39;, 0.6893126179389422)</code></pre>
<br>

<h2 id="Question-8"><a href="#Question-8" class="headerlink" title="Question 8"></a>Question 8</h2><p>Create a column that estimates the population using Energy Supply and Energy Supply per capita.<br>What is the third most populous country according to this estimate?</p>
<p><em>This function should return the name of the country</em></p>
<h3 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer_eight</span>():</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    info = answer_one()</span><br><span class="line">    <span class="keyword">return</span> (info[<span class="string">&#x27;Energy Supply&#x27;</span>]/info[<span class="string">&#x27;Energy Supply per Capita&#x27;</span>]).sort_values(ascending=<span class="literal">False</span>).index[<span class="number">2</span>]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(answer_eight()) == <span class="built_in">str</span>, <span class="string">&quot;Q8: You should return the name of the country!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="结果-7"><a href="#结果-7" class="headerlink" title="结果"></a>结果</h3><pre><code>&#39;United States&#39;</code></pre>
<br>

<h2 id="Question-9"><a href="#Question-9" class="headerlink" title="Question 9"></a>Question 9</h2><p>Create a column that estimates the number of citable documents per person.<br>What is the correlation between the number of citable documents per capita and the energy supply per capita? Use the <code>.corr()</code> method, (Pearson’s correlation).</p>
<p><em>This function should return a single number.</em></p>
<p><em>(Optional: Use the built-in function <code>plot9()</code> to visualize the relationship between Energy Supply per Capita vs. Citable docs per Capita)</em></p>
<h3 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer_nine</span>():</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    Top15 = answer_one()</span><br><span class="line">    Top15[<span class="string">&#x27;PopEst&#x27;</span>] = Top15[<span class="string">&#x27;Energy Supply&#x27;</span>] / Top15[<span class="string">&#x27;Energy Supply per Capita&#x27;</span>]</span><br><span class="line">    Top15[<span class="string">&#x27;Citable docs per Capita&#x27;</span>] = Top15[<span class="string">&#x27;Citable documents&#x27;</span>] / Top15[<span class="string">&#x27;PopEst&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> Top15[<span class="string">&#x27;Citable docs per Capita&#x27;</span>].corr(Top15[<span class="string">&#x27;Energy Supply per Capita&#x27;</span>])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot9</span>():</span></span><br><span class="line">    <span class="keyword">import</span> matplotlib <span class="keyword">as</span> plt</span><br><span class="line">    %matplotlib inline</span><br><span class="line">    </span><br><span class="line">    Top15 = answer_one()</span><br><span class="line">    Top15[<span class="string">&#x27;PopEst&#x27;</span>] = Top15[<span class="string">&#x27;Energy Supply&#x27;</span>] / Top15[<span class="string">&#x27;Energy Supply per Capita&#x27;</span>]</span><br><span class="line">    Top15[<span class="string">&#x27;Citable docs per Capita&#x27;</span>] = Top15[<span class="string">&#x27;Citable documents&#x27;</span>] / Top15[<span class="string">&#x27;PopEst&#x27;</span>]</span><br><span class="line">    Top15.plot(x=<span class="string">&#x27;Citable docs per Capita&#x27;</span>, y=<span class="string">&#x27;Energy Supply per Capita&#x27;</span>, kind=<span class="string">&#x27;scatter&#x27;</span>, xlim=[<span class="number">0</span>, <span class="number">0.0006</span>])</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> answer_nine() &gt;= <span class="number">-1.</span> <span class="keyword">and</span> answer_nine() &lt;= <span class="number">1.</span>, <span class="string">&quot;Q9: A valid correlation should between -1 to 1!&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="结果-8"><a href="#结果-8" class="headerlink" title="结果"></a>结果</h3><pre><code>0.7940010435442942</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20201109193310957.png"></p>
<br>

<h2 id="Question-10"><a href="#Question-10" class="headerlink" title="Question 10"></a>Question 10</h2><p>Create a new column with a 1 if the country’s % Renewable value is at or above the median for all countries in the top 15, and a 0 if the country’s % Renewable value is below the median.</p>
<p><em>This function should return a series named <code>HighRenew</code> whose index is the country name sorted in ascending order of rank.</em></p>
<h3 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer_ten</span>():</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    Top15 = answer_one()</span><br><span class="line">    Rmedian=Top15[<span class="string">&quot;% Renewable&quot;</span>].median()</span><br><span class="line">    Top15[<span class="string">&quot;HighRenew&quot;</span>]= Top15[<span class="string">&quot;% Renewable&quot;</span>].apply(<span class="keyword">lambda</span> x:<span class="number">0</span> <span class="keyword">if</span> x&lt;Rmedian <span class="keyword">else</span> <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">return</span> Top15[<span class="string">&quot;HighRenew&quot;</span>]</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(answer_ten()) == pd.Series, <span class="string">&quot;Q10: You should return a Series!&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="结果-9"><a href="#结果-9" class="headerlink" title="结果"></a>结果</h3><p><img src="https://img-blog.csdnimg.cn/20201109193721307.png#pic_center"></p>
<br>

<h2 id="Question-11"><a href="#Question-11" class="headerlink" title="Question 11"></a>Question 11</h2><p>Use the following dictionary to group the Countries by Continent, then create a DataFrame that displays the sample size (the number of countries in each continent bin), and the sum, mean, and std deviation for the estimated population of each country.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ContinentDict  = &#123;<span class="string">&#x27;China&#x27;</span>:<span class="string">&#x27;Asia&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;United States&#x27;</span>:<span class="string">&#x27;North America&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Japan&#x27;</span>:<span class="string">&#x27;Asia&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;United Kingdom&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Russian Federation&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Canada&#x27;</span>:<span class="string">&#x27;North America&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Germany&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;India&#x27;</span>:<span class="string">&#x27;Asia&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;France&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;South Korea&#x27;</span>:<span class="string">&#x27;Asia&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Italy&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Spain&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Iran&#x27;</span>:<span class="string">&#x27;Asia&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;Australia&#x27;</span>:<span class="string">&#x27;Australia&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Brazil&#x27;</span>:<span class="string">&#x27;South America&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p><em>This function should return a DataFrame with index named Continent <code>[&#39;Asia&#39;, &#39;Australia&#39;, &#39;Europe&#39;, &#39;North America&#39;, &#39;South America&#39;]</code> and columns <code>[&#39;size&#39;, &#39;sum&#39;, &#39;mean&#39;, &#39;std&#39;]</code></em></p>
<h3 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer_eleven</span>():</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    ContinentDict  = &#123;<span class="string">&#x27;China&#x27;</span>:<span class="string">&#x27;Asia&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;United States&#x27;</span>:<span class="string">&#x27;North America&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Japan&#x27;</span>:<span class="string">&#x27;Asia&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;United Kingdom&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Russian Federation&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Canada&#x27;</span>:<span class="string">&#x27;North America&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Germany&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;India&#x27;</span>:<span class="string">&#x27;Asia&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;France&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;South Korea&#x27;</span>:<span class="string">&#x27;Asia&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Italy&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Spain&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Iran&#x27;</span>:<span class="string">&#x27;Asia&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;Australia&#x27;</span>:<span class="string">&#x27;Australia&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Brazil&#x27;</span>:<span class="string">&#x27;South America&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    Top15 = answer_one()</span><br><span class="line">    Top15[<span class="string">&#x27;PopEst&#x27;</span>] = Top15[<span class="string">&#x27;Energy Supply&#x27;</span>] / Top15[<span class="string">&#x27;Energy Supply per Capita&#x27;</span>]</span><br><span class="line">    Top15[<span class="string">&#x27;Continent&#x27;</span>] = pd.Series(ContinentDict)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Top15.groupby(<span class="string">&#x27;Continent&#x27;</span>)[<span class="string">&#x27;PopEst&#x27;</span>].agg([np.size,np.<span class="built_in">sum</span>, np.mean, np.std])</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(answer_eleven()) == pd.DataFrame, <span class="string">&quot;Q11: You should return a DataFrame!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> answer_eleven().shape[<span class="number">0</span>] == <span class="number">5</span>, <span class="string">&quot;Q11: Wrong row numbers!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> answer_eleven().shape[<span class="number">1</span>] == <span class="number">4</span>, <span class="string">&quot;Q11: Wrong column numbers!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="结果-10"><a href="#结果-10" class="headerlink" title="结果"></a>结果</h3><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>size</th>
      <th>sum</th>
      <th>mean</th>
      <th>std</th>
    </tr>
    <tr>
      <th>Continent</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Asia</th>
      <td>5.0</td>
      <td>2.898666e+09</td>
      <td>5.797333e+08</td>
      <td>6.790979e+08</td>
    </tr>
    <tr>
      <th>Australia</th>
      <td>1.0</td>
      <td>2.331602e+07</td>
      <td>2.331602e+07</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>Europe</th>
      <td>6.0</td>
      <td>4.579297e+08</td>
      <td>7.632161e+07</td>
      <td>3.464767e+07</td>
    </tr>
    <tr>
      <th>North America</th>
      <td>2.0</td>
      <td>3.528552e+08</td>
      <td>1.764276e+08</td>
      <td>1.996696e+08</td>
    </tr>
    <tr>
      <th>South America</th>
      <td>1.0</td>
      <td>2.059153e+08</td>
      <td>2.059153e+08</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>

<br>

<h2 id="Question-12"><a href="#Question-12" class="headerlink" title="Question 12"></a>Question 12</h2><p>Cut % Renewable into 5 bins. Group Top15 by the Continent, as well as these new % Renewable bins. How many countries are in each of these groups?</p>
<p><em>This function should return a Series with a MultiIndex of <code>Continent</code>, then the bins for <code>% Renewable</code>. Do not include groups with no countries.</em></p>
<h3 id="Code-10"><a href="#Code-10" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer_twelve</span>():</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    ContinentDict  = &#123;<span class="string">&#x27;China&#x27;</span>:<span class="string">&#x27;Asia&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;United States&#x27;</span>:<span class="string">&#x27;North America&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Japan&#x27;</span>:<span class="string">&#x27;Asia&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;United Kingdom&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Russian Federation&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Canada&#x27;</span>:<span class="string">&#x27;North America&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Germany&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;India&#x27;</span>:<span class="string">&#x27;Asia&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;France&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;South Korea&#x27;</span>:<span class="string">&#x27;Asia&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Italy&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Spain&#x27;</span>:<span class="string">&#x27;Europe&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Iran&#x27;</span>:<span class="string">&#x27;Asia&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;Australia&#x27;</span>:<span class="string">&#x27;Australia&#x27;</span>, </span><br><span class="line">                  <span class="string">&#x27;Brazil&#x27;</span>:<span class="string">&#x27;South America&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    Top15 = answer_one()</span><br><span class="line">    Top15[<span class="string">&#x27;Continent&#x27;</span>] = pd.Series(ContinentDict)</span><br><span class="line">    Top15[<span class="string">&#x27;% Renewable&#x27;</span>]=pd.cut(Top15[<span class="string">&#x27;% Renewable&#x27;</span>],<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Top15.groupby([<span class="string">&#x27;Continent&#x27;</span>,<span class="string">&#x27;% Renewable&#x27;</span>])[<span class="string">&#x27;Continent&#x27;</span>].agg(np.size).dropna()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(answer_twelve()) == pd.Series, <span class="string">&quot;Q12: You should return a Series!&quot;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(answer_twelve()) == <span class="number">9</span>, <span class="string">&quot;Q12: Wrong result numbers!&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-11"><a href="#结果-11" class="headerlink" title="结果"></a>结果</h3><p><img src="https://img-blog.csdnimg.cn/20201109193759831.png#pic_center"></p>
<br>

<h2 id="Question-13"><a href="#Question-13" class="headerlink" title="Question 13"></a>Question 13</h2><p>Convert the Population Estimate series to a string with thousands separator (using commas). Use all significant digits (do not round the results).</p>
<p>e.g. 12345678.90 -&gt; 12,345,678.90</p>
<p><em>This function should return a series <code>PopEst</code> whose index is the country name and whose values are the population estimate string</em></p>
<h3 id="Code-11"><a href="#Code-11" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">answer_thirteen</span>():</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    Top15 = answer_one() </span><br><span class="line">    Top15[<span class="string">&#x27;PopEst&#x27;</span>] = Top15[<span class="string">&#x27;Energy Supply&#x27;</span>] / Top15[<span class="string">&#x27;Energy Supply per Capita&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> Top15[<span class="string">&#x27;PopEst&#x27;</span>].apply(<span class="string">&#x27;&#123;:,&#125;&#x27;</span>.<span class="built_in">format</span>) </span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(answer_thirteen()) == pd.Series, <span class="string">&quot;Q13: You should return a Series!&quot;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(answer_thirteen()) == <span class="number">15</span>, <span class="string">&quot;Q13: Wrong result numbers!&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="结果-12"><a href="#结果-12" class="headerlink" title="结果"></a>结果</h3><p><img src="https://img-blog.csdnimg.cn/20201109194051554.png"></p>
<br>

<h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p>Use the built in function <code>plot_optional()</code> to see an example visualization.</p>
<h3 id="Code-12"><a href="#Code-12" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_optional</span>():</span></span><br><span class="line">    <span class="keyword">import</span> matplotlib <span class="keyword">as</span> plt</span><br><span class="line">    %matplotlib inline</span><br><span class="line">    Top15 = answer_one()</span><br><span class="line">    ax = Top15.plot(x=<span class="string">&#x27;Rank&#x27;</span>, y=<span class="string">&#x27;% Renewable&#x27;</span>, kind=<span class="string">&#x27;scatter&#x27;</span>, </span><br><span class="line">                    c=[<span class="string">&#x27;#e41a1c&#x27;</span>,<span class="string">&#x27;#377eb8&#x27;</span>,<span class="string">&#x27;#e41a1c&#x27;</span>,<span class="string">&#x27;#4daf4a&#x27;</span>,<span class="string">&#x27;#4daf4a&#x27;</span>,<span class="string">&#x27;#377eb8&#x27;</span>,<span class="string">&#x27;#4daf4a&#x27;</span>,<span class="string">&#x27;#e41a1c&#x27;</span>,</span><br><span class="line">                       <span class="string">&#x27;#4daf4a&#x27;</span>,<span class="string">&#x27;#e41a1c&#x27;</span>,<span class="string">&#x27;#4daf4a&#x27;</span>,<span class="string">&#x27;#4daf4a&#x27;</span>,<span class="string">&#x27;#e41a1c&#x27;</span>,<span class="string">&#x27;#dede00&#x27;</span>,<span class="string">&#x27;#ff7f00&#x27;</span>], </span><br><span class="line">                    xticks=<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">16</span>), s=<span class="number">6</span>*Top15[<span class="string">&#x27;2014&#x27;</span>]/<span class="number">10</span>**<span class="number">10</span>, alpha=<span class="number">.75</span>, figsize=[<span class="number">16</span>,<span class="number">6</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, txt <span class="keyword">in</span> <span class="built_in">enumerate</span>(Top15.index):</span><br><span class="line">        ax.annotate(txt, [Top15[<span class="string">&#x27;Rank&#x27;</span>][i], Top15[<span class="string">&#x27;% Renewable&#x27;</span>][i]], ha=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;This is an example of a visualization that can be created to help understand the data. \</span></span><br><span class="line"><span class="string">This is a bubble chart showing % Renewable vs. Rank. The size of the bubble corresponds to the countries&#x27; \</span></span><br><span class="line"><span class="string">2014 GDP, and the color corresponds to the continent.&quot;</span>)</span><br></pre></td></tr></table></figure>


<h3 id="结果-13"><a href="#结果-13" class="headerlink" title="结果"></a>结果</h3><p><img src="https://img-blog.csdnimg.cn/20201109192418152.png"><br><br><br><br></p>
<p>&emsp;&emsp; 大家其他还有需要的就在评论留言哦 :)  欢迎讨论分享~</p>]]></content>
      <categories>
        <category>DataScience</category>
        <category>Coursera</category>
        <category>Intro2DS</category>
      </categories>
      <tags>
        <tag>Coursera</tag>
        <tag>DataScience</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment4</title>
    <url>/2020/11/09/Intro2DS/Assignment4/</url>
    <content><![CDATA[<p>&emsp;&emsp; u1s1，这门课的assignment还是有点难度的，特别是assigment4（哀怨），放给大家参考啦~<br>&emsp;&emsp; 有时间（需求）就把所有代码放到github上（好担心被河蟹啊）<br>&emsp;&emsp; 相关链接：<br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Quiz/">Coursera | Introduction to Data Science in Python（University of Michigan）| Quiz答案</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment1/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment1</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment2/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment2</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment3/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment3</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment4/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment4</a><br>&emsp;&emsp; CSDN链接：<br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109544058">Coursera | Introduction to Data Science in Python（University of Michigan）| Quiz答案</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109583609">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment1</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109577773">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment2</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109583813">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment3</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109584609">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment4</a></p>
<h1 id="Assignment-4"><a href="#Assignment-4" class="headerlink" title="Assignment 4"></a>Assignment 4</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>In this assignment you must read in a file of metropolitan regions and associated sports teams from assets/wikipedia_data.html and answer some questions about each metropolitan region. Each of these regions may have one or more teams from the “Big 4”: NFL (football, in assets/nfl.csv), MLB (baseball, in assets/mlb.csv), NBA (basketball, in assets/nba.csvor NHL (hockey, in assets/nhl.csv). Please keep in mind that all questions are from the perspective of the metropolitan region, and that this file is the “source of authority” for the location of a given sports team. Thus teams which are commonly known by a different area (e.g. “Oakland Raiders”) need to be mapped into the metropolitan region given (e.g. San Francisco Bay Area). This will require some human data understanding outside of the data you’ve been given (e.g. you will have to hand-code some names, and might need to google to find out where teams are)!</p>
<p>For each sport I would like you to answer the question: <strong>what is the win/loss ratio’s correlation with the population of the city it is in?</strong> Win/Loss ratio refers to the number of wins over the number of wins plus the number of losses. Remember that to calculate the correlation with <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html"><code>pearsonr</code></a>, so you are going to send in two ordered lists of values, the populations from the wikipedia_data.html file and the win/loss ratio for a given sport in the same order. Average the win/loss ratios for those cities which have multiple teams of a single sport. Each sport is worth an equal amount in this assignment (20%*4=80%) of the grade for this assignment. You should only use data <strong>from year 2018</strong> for your analysis – this is important!</p>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol>
<li>Do not include data about the MLS or CFL in any of the work you are doing, we’re only interested in the Big 4 in this assignment.</li>
<li>I highly suggest that you first tackle the four correlation questions in order, as they are all similar and worth the majority of grades for this assignment. This is by design!</li>
<li>There may be more teams than the assert statements test, remember to collapse multiple teams in one city into a single value!</li>
</ol>
<h2 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h2><p>For this question, calculate the win/loss ratio’s correlation with the population of the city it is in for the <strong>NHL</strong> using <strong>2018</strong> data.</p>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> stats</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">cities = pd.read_html(<span class="string">&quot;assets/wikipedia_data.html&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">cities = cities.iloc[:<span class="number">-1</span>, [<span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]]</span><br><span class="line">cities.rename(columns=&#123;<span class="string">&quot;Population (2016 est.)[8]&quot;</span>: <span class="string">&quot;Population&quot;</span>&#125;,</span><br><span class="line">              inplace=<span class="literal">True</span>)</span><br><span class="line">cities[<span class="string">&#x27;NFL&#x27;</span>] = cities[<span class="string">&#x27;NFL&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">cities[<span class="string">&#x27;MLB&#x27;</span>] = cities[<span class="string">&#x27;MLB&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">cities[<span class="string">&#x27;NBA&#x27;</span>] = cities[<span class="string">&#x27;NBA&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">cities[<span class="string">&#x27;NHL&#x27;</span>] = cities[<span class="string">&#x27;NHL&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">Big4=<span class="string">&#x27;NHL&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nhl_correlation</span>():</span></span><br><span class="line">    <span class="comment"># YOUR CODE HERE</span></span><br><span class="line">    <span class="comment"># raise NotImplementedError()</span></span><br><span class="line">    </span><br><span class="line">    team = cities[Big4].<span class="built_in">str</span>.extract(<span class="string">&#x27;([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)&#x27;</span>)</span><br><span class="line">    team[<span class="string">&#x27;Metropolitan area&#x27;</span>]=cities[<span class="string">&#x27;Metropolitan area&#x27;</span>]</span><br><span class="line">    team = pd.melt(team, id_vars=[<span class="string">&#x27;Metropolitan area&#x27;</span>]).drop(columns=[<span class="string">&#x27;variable&#x27;</span>]).replace(<span class="string">&quot;&quot;</span>,np.nan).replace(<span class="string">&quot;—&quot;</span>,np.nan).dropna().reset_index().rename(columns = &#123;<span class="string">&quot;value&quot;</span>:<span class="string">&quot;team&quot;</span>&#125;)</span><br><span class="line">    team=pd.merge(team,cities,how=<span class="string">&#x27;left&#x27;</span>,on = <span class="string">&#x27;Metropolitan area&#x27;</span>).iloc[:,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">    team = team.astype(&#123;<span class="string">&#x27;Metropolitan area&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;team&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;Population&#x27;</span>: <span class="built_in">int</span>&#125;)</span><br><span class="line">    team[<span class="string">&#x27;team&#x27;</span>]=team[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[\w.]*\ &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    _df=pd.read_csv(<span class="string">&quot;assets/&quot;</span>+<span class="built_in">str</span>.lower(Big4)+<span class="string">&quot;.csv&quot;</span>)</span><br><span class="line">    _df = _df[_df[<span class="string">&#x27;year&#x27;</span>] == <span class="number">2018</span>]</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;\*&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df = _df[[<span class="string">&#x27;team&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;L&#x27;</span>]]</span><br><span class="line"></span><br><span class="line">    dropList=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(_df.shape[<span class="number">0</span>]):</span><br><span class="line">        row=_df.iloc[i]</span><br><span class="line">        <span class="keyword">if</span> row[<span class="string">&#x27;team&#x27;</span>]==row[<span class="string">&#x27;W&#x27;</span>] <span class="keyword">and</span> row[<span class="string">&#x27;L&#x27;</span>]==row[<span class="string">&#x27;W&#x27;</span>]:</span><br><span class="line">    <span class="comment">#         print(row[&#x27;team&#x27;],&#x27;will be dropped!&#x27;)</span></span><br><span class="line">            dropList.append(i)</span><br><span class="line">    _df=_df.drop(dropList)</span><br><span class="line"></span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[\w.]* &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#     _df[&#x27;team&#x27;] = _df[&#x27;team&#x27;].str.replace(&#x27;.&#x27;,&#x27;&#x27;)</span></span><br><span class="line">    _df = _df.astype(&#123;<span class="string">&#x27;team&#x27;</span>: <span class="built_in">str</span>,<span class="string">&#x27;W&#x27;</span>: <span class="built_in">int</span>, <span class="string">&#x27;L&#x27;</span>: <span class="built_in">int</span>&#125;)</span><br><span class="line">    _df[<span class="string">&#x27;W/L%&#x27;</span>] = _df[<span class="string">&#x27;W&#x27;</span>]/(_df[<span class="string">&#x27;W&#x27;</span>]+_df[<span class="string">&#x27;L&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    merge=pd.merge(team,_df,<span class="string">&#x27;outer&#x27;</span>, on = <span class="string">&#x27;team&#x27;</span>)</span><br><span class="line">    merge=merge.groupby(<span class="string">&#x27;Metropolitan area&#x27;</span>).agg(&#123;<span class="string">&#x27;W/L%&#x27;</span>: np.nanmean, <span class="string">&#x27;Population&#x27;</span>: np.nanmean&#125;)</span><br><span class="line">    </span><br><span class="line">    population_by_region = merge[<span class="string">&#x27;Population&#x27;</span>] <span class="comment"># pass in metropolitan area population from cities</span></span><br><span class="line">    win_loss_by_region = merge[<span class="string">&#x27;W/L%&#x27;</span>] <span class="comment"># pass in win/loss ratio from _df in the same order as cities[&quot;Metropolitan area&quot;]   </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(population_by_region) == <span class="built_in">len</span>(</span><br><span class="line">        win_loss_by_region), <span class="string">&quot;Q1: Your lists must be the same length&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(population_by_region</span><br><span class="line">               ) == <span class="number">28</span>, <span class="string">&quot;Q1: There should be 28 teams being analysed for NHL&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stats.pearsonr(population_by_region, win_loss_by_region)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><pre><code>0.012486162921209923</code></pre>
<br>

<h2 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h2><p>For this question, calculate the win/loss ratio’s correlation with the population of the city it is in for the <strong>NBA</strong> using <strong>2018</strong> data.</p>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> stats</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">cities = pd.read_html(<span class="string">&quot;assets/wikipedia_data.html&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">cities = cities.iloc[:<span class="number">-1</span>, [<span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]]</span><br><span class="line">cities.rename(columns=&#123;<span class="string">&quot;Population (2016 est.)[8]&quot;</span>: <span class="string">&quot;Population&quot;</span>&#125;,</span><br><span class="line">              inplace=<span class="literal">True</span>)</span><br><span class="line">cities[<span class="string">&#x27;NFL&#x27;</span>] = cities[<span class="string">&#x27;NFL&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">cities[<span class="string">&#x27;MLB&#x27;</span>] = cities[<span class="string">&#x27;MLB&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">cities[<span class="string">&#x27;NBA&#x27;</span>] = cities[<span class="string">&#x27;NBA&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">cities[<span class="string">&#x27;NHL&#x27;</span>] = cities[<span class="string">&#x27;NHL&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">Big4=<span class="string">&#x27;NBA&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nba_correlation</span>():</span></span><br><span class="line">    </span><br><span class="line">    team = cities[Big4].<span class="built_in">str</span>.extract(<span class="string">&#x27;([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)&#x27;</span>)</span><br><span class="line">    team[<span class="string">&#x27;Metropolitan area&#x27;</span>]=cities[<span class="string">&#x27;Metropolitan area&#x27;</span>]</span><br><span class="line">    team = pd.melt(team, id_vars=[<span class="string">&#x27;Metropolitan area&#x27;</span>]).drop(columns=[<span class="string">&#x27;variable&#x27;</span>]).replace(<span class="string">&quot;&quot;</span>,np.nan).replace(<span class="string">&quot;—&quot;</span>,np.nan).dropna().reset_index().rename(columns = &#123;<span class="string">&quot;value&quot;</span>:<span class="string">&quot;team&quot;</span>&#125;)</span><br><span class="line">    team=pd.merge(team,cities,how=<span class="string">&#x27;left&#x27;</span>,on = <span class="string">&#x27;Metropolitan area&#x27;</span>).iloc[:,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">    team = team.astype(&#123;<span class="string">&#x27;Metropolitan area&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;team&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;Population&#x27;</span>: <span class="built_in">int</span>&#125;)</span><br><span class="line">    team[<span class="string">&#x27;team&#x27;</span>]=team[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[\w.]*\ &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    _df=pd.read_csv(<span class="string">&quot;assets/&quot;</span>+<span class="built_in">str</span>.lower(Big4)+<span class="string">&quot;.csv&quot;</span>)</span><br><span class="line">    _df = _df[_df[<span class="string">&#x27;year&#x27;</span>] == <span class="number">2018</span>]</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;[\*]&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;\(\d*\)&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;[\xa0]&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df = _df[[<span class="string">&#x27;team&#x27;</span>,<span class="string">&#x27;W/L%&#x27;</span>]]</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[\w.]* &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    _df = _df.astype(&#123;<span class="string">&#x27;team&#x27;</span>: <span class="built_in">str</span>,<span class="string">&#x27;W/L%&#x27;</span>: <span class="built_in">float</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    merge=pd.merge(team,_df,<span class="string">&#x27;outer&#x27;</span>, on = <span class="string">&#x27;team&#x27;</span>)</span><br><span class="line">    merge=merge.groupby(<span class="string">&#x27;Metropolitan area&#x27;</span>).agg(&#123;<span class="string">&#x27;W/L%&#x27;</span>: np.nanmean, <span class="string">&#x27;Population&#x27;</span>: np.nanmean&#125;)</span><br><span class="line"></span><br><span class="line">    population_by_region = merge[<span class="string">&#x27;Population&#x27;</span>] <span class="comment"># pass in metropolitan area population from cities</span></span><br><span class="line">    win_loss_by_region = merge[<span class="string">&#x27;W/L%&#x27;</span>] <span class="comment"># pass in win/loss ratio from _df in the same order as cities[&quot;Metropolitan area&quot;]   </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(population_by_region) == <span class="built_in">len</span>(win_loss_by_region), <span class="string">&quot;Q2: Your lists must be the same length&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(population_by_region) == <span class="number">28</span>, <span class="string">&quot;Q2: There should be 28 teams being analysed for NBA&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stats.pearsonr(population_by_region, win_loss_by_region)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><pre><code>-0.1763635064218294</code></pre>
<br>

<h2 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h2><p>For this question, calculate the win/loss ratio’s correlation with the population of the city it is in for the <strong>MLB</strong> using <strong>2018</strong> data.</p>
<h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> stats</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">cities = pd.read_html(<span class="string">&quot;assets/wikipedia_data.html&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">cities = cities.iloc[:<span class="number">-1</span>, [<span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]]</span><br><span class="line">cities.rename(columns=&#123;<span class="string">&quot;Population (2016 est.)[8]&quot;</span>: <span class="string">&quot;Population&quot;</span>&#125;,</span><br><span class="line">              inplace=<span class="literal">True</span>)</span><br><span class="line">cities[<span class="string">&#x27;NFL&#x27;</span>] = cities[<span class="string">&#x27;NFL&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">cities[<span class="string">&#x27;MLB&#x27;</span>] = cities[<span class="string">&#x27;MLB&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">cities[<span class="string">&#x27;NBA&#x27;</span>] = cities[<span class="string">&#x27;NBA&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">cities[<span class="string">&#x27;NHL&#x27;</span>] = cities[<span class="string">&#x27;NHL&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">Big4=<span class="string">&#x27;MLB&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mlb_correlation</span>():</span> </span><br><span class="line">    </span><br><span class="line">    team = cities[Big4].<span class="built_in">str</span>.extract(<span class="string">&#x27;([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)&#x27;</span>)</span><br><span class="line">    team[<span class="string">&#x27;Metropolitan area&#x27;</span>]=cities[<span class="string">&#x27;Metropolitan area&#x27;</span>]</span><br><span class="line">    team = pd.melt(team, id_vars=[<span class="string">&#x27;Metropolitan area&#x27;</span>]).drop(columns=[<span class="string">&#x27;variable&#x27;</span>]).replace(<span class="string">&quot;&quot;</span>,np.nan).replace(<span class="string">&quot;—&quot;</span>,np.nan).dropna().reset_index().rename(columns = &#123;<span class="string">&quot;value&quot;</span>:<span class="string">&quot;team&quot;</span>&#125;)</span><br><span class="line">    team=pd.merge(team,cities,how=<span class="string">&#x27;left&#x27;</span>,on = <span class="string">&#x27;Metropolitan area&#x27;</span>).iloc[:,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">    team = team.astype(&#123;<span class="string">&#x27;Metropolitan area&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;team&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;Population&#x27;</span>: <span class="built_in">int</span>&#125;)</span><br><span class="line">    team[<span class="string">&#x27;team&#x27;</span>]=team[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;\ Sox&#x27;</span>,<span class="string">&#x27;Sox&#x27;</span>)</span><br><span class="line">    team[<span class="string">&#x27;team&#x27;</span>]=team[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[\w.]*\ &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    _df=pd.read_csv(<span class="string">&quot;assets/&quot;</span>+<span class="built_in">str</span>.lower(Big4)+<span class="string">&quot;.csv&quot;</span>)</span><br><span class="line">    _df = _df[_df[<span class="string">&#x27;year&#x27;</span>] == <span class="number">2018</span>]</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;[\*]&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;\(\d*\)&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;[\xa0]&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df = _df[[<span class="string">&#x27;team&#x27;</span>,<span class="string">&#x27;W-L%&#x27;</span>]]</span><br><span class="line">    _df.rename(columns=&#123;<span class="string">&quot;W-L%&quot;</span>: <span class="string">&quot;W/L%&quot;</span>&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>]=_df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;\ Sox&#x27;</span>,<span class="string">&#x27;Sox&#x27;</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[\w.]* &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    _df = _df.astype(&#123;<span class="string">&#x27;team&#x27;</span>: <span class="built_in">str</span>,<span class="string">&#x27;W/L%&#x27;</span>: <span class="built_in">float</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    merge=pd.merge(team,_df,<span class="string">&#x27;outer&#x27;</span>, on = <span class="string">&#x27;team&#x27;</span>)</span><br><span class="line">    merge=merge.groupby(<span class="string">&#x27;Metropolitan area&#x27;</span>).agg(&#123;<span class="string">&#x27;W/L%&#x27;</span>: np.nanmean, <span class="string">&#x27;Population&#x27;</span>: np.nanmean&#125;)</span><br><span class="line">    </span><br><span class="line">    population_by_region = merge[<span class="string">&#x27;Population&#x27;</span>] <span class="comment"># pass in metropolitan area population from cities</span></span><br><span class="line">    win_loss_by_region = merge[<span class="string">&#x27;W/L%&#x27;</span>] <span class="comment"># pass in win/loss ratio from _df in the same order as cities[&quot;Metropolitan area&quot;]   </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(population_by_region) == <span class="built_in">len</span>(win_loss_by_region), <span class="string">&quot;Q3: Your lists must be the same length&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(population_by_region) == <span class="number">26</span>, <span class="string">&quot;Q3: There should be 26 teams being analysed for MLB&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> stats.pearsonr(population_by_region, win_loss_by_region)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><pre><code>0.15003737475409495</code></pre>
<br>


<h2 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h2><p>For this question, calculate the win/loss ratio’s correlation with the population of the city it is in for the <strong>NFL</strong> using <strong>2018</strong> data.</p>
<h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> stats</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">cities = pd.read_html(<span class="string">&quot;assets/wikipedia_data.html&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">cities = cities.iloc[:<span class="number">-1</span>, [<span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]]</span><br><span class="line">cities.rename(columns=&#123;<span class="string">&quot;Population (2016 est.)[8]&quot;</span>: <span class="string">&quot;Population&quot;</span>&#125;,</span><br><span class="line">              inplace=<span class="literal">True</span>)</span><br><span class="line">cities[<span class="string">&#x27;NFL&#x27;</span>] = cities[<span class="string">&#x27;NFL&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">cities[<span class="string">&#x27;MLB&#x27;</span>] = cities[<span class="string">&#x27;MLB&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">cities[<span class="string">&#x27;NBA&#x27;</span>] = cities[<span class="string">&#x27;NBA&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">cities[<span class="string">&#x27;NHL&#x27;</span>] = cities[<span class="string">&#x27;NHL&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">Big4=<span class="string">&#x27;NFL&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nfl_correlation</span>():</span> </span><br><span class="line">    team = cities[Big4].<span class="built_in">str</span>.extract(<span class="string">&#x27;([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)&#x27;</span>)</span><br><span class="line">    team[<span class="string">&#x27;Metropolitan area&#x27;</span>]=cities[<span class="string">&#x27;Metropolitan area&#x27;</span>]</span><br><span class="line">    team = pd.melt(team, id_vars=[<span class="string">&#x27;Metropolitan area&#x27;</span>]).drop(columns=[<span class="string">&#x27;variable&#x27;</span>]).replace(<span class="string">&quot;&quot;</span>,np.nan).replace(<span class="string">&quot;—&quot;</span>,np.nan).dropna().reset_index().rename(columns = &#123;<span class="string">&quot;value&quot;</span>:<span class="string">&quot;team&quot;</span>&#125;)</span><br><span class="line">    team=pd.merge(team,cities,how=<span class="string">&#x27;left&#x27;</span>,on = <span class="string">&#x27;Metropolitan area&#x27;</span>).iloc[:,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">    team = team.astype(&#123;<span class="string">&#x27;Metropolitan area&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;team&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;Population&#x27;</span>: <span class="built_in">int</span>&#125;)</span><br><span class="line">    team[<span class="string">&#x27;team&#x27;</span>]=team[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[\w.]*\ &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    _df=pd.read_csv(<span class="string">&quot;assets/&quot;</span>+<span class="built_in">str</span>.lower(Big4)+<span class="string">&quot;.csv&quot;</span>)</span><br><span class="line">    _df = _df[_df[<span class="string">&#x27;year&#x27;</span>] == <span class="number">2018</span>]</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;[\*]&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;\(\d*\)&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;[\xa0]&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df = _df[[<span class="string">&#x27;team&#x27;</span>,<span class="string">&#x27;W-L%&#x27;</span>]]</span><br><span class="line">    _df.rename(columns=&#123;<span class="string">&quot;W-L%&quot;</span>: <span class="string">&quot;W/L%&quot;</span>&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line">    dropList=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(_df.shape[<span class="number">0</span>]):</span><br><span class="line">        row=_df.iloc[i]</span><br><span class="line">        <span class="keyword">if</span> row[<span class="string">&#x27;team&#x27;</span>]==row[<span class="string">&#x27;W/L%&#x27;</span>]:</span><br><span class="line">            dropList.append(i)</span><br><span class="line">    _df=_df.drop(dropList)</span><br><span class="line"></span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[\w.]* &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    _df = _df.astype(&#123;<span class="string">&#x27;team&#x27;</span>: <span class="built_in">str</span>,<span class="string">&#x27;W/L%&#x27;</span>: <span class="built_in">float</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    merge=pd.merge(team,_df,<span class="string">&#x27;outer&#x27;</span>, on = <span class="string">&#x27;team&#x27;</span>)</span><br><span class="line">    merge=merge.groupby(<span class="string">&#x27;Metropolitan area&#x27;</span>).agg(&#123;<span class="string">&#x27;W/L%&#x27;</span>: np.nanmean, <span class="string">&#x27;Population&#x27;</span>: np.nanmean&#125;)</span><br><span class="line"></span><br><span class="line">    population_by_region = merge[<span class="string">&#x27;Population&#x27;</span>] <span class="comment"># pass in metropolitan area population from cities</span></span><br><span class="line">    win_loss_by_region = merge[<span class="string">&#x27;W/L%&#x27;</span>] <span class="comment"># pass in win/loss ratio from _df in the same order as cities[&quot;Metropolitan area&quot;]   </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(population_by_region) == <span class="built_in">len</span>(win_loss_by_region), <span class="string">&quot;Q4: Your lists must be the same length&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(population_by_region) == <span class="number">29</span>, <span class="string">&quot;Q4: There should be 29 teams being analysed for NFL&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stats.pearsonr(population_by_region, win_loss_by_region)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h3 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h3><pre><code>0.004282141436393022</code></pre>
<br>


<h2 id="Question-5"><a href="#Question-5" class="headerlink" title="Question 5"></a>Question 5</h2><p>In this question I would like you to explore the hypothesis that <strong>given that an area has two sports teams in different sports, those teams will perform the same within their respective sports</strong>. How I would like to see this explored is with a series of paired t-tests (so use <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_rel.html"><code>ttest_rel</code></a>) between all pairs of sports. Are there any sports where we can reject the null hypothesis? Again, average values where a sport has multiple teams in one region. Remember, you will only be including, for each sport, cities which have teams engaged in that sport, drop others as appropriate. This question is worth 20% of the grade for this assignment.</p>
<h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> stats</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">cities = pd.read_html(<span class="string">&quot;assets/wikipedia_data.html&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">cities = cities.iloc[:<span class="number">-1</span>, [<span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]]</span><br><span class="line">cities.rename(columns=&#123;<span class="string">&quot;Population (2016 est.)[8]&quot;</span>: <span class="string">&quot;Population&quot;</span>&#125;,</span><br><span class="line">              inplace=<span class="literal">True</span>)</span><br><span class="line">cities[<span class="string">&#x27;NFL&#x27;</span>] = cities[<span class="string">&#x27;NFL&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">cities[<span class="string">&#x27;MLB&#x27;</span>] = cities[<span class="string">&#x27;MLB&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">cities[<span class="string">&#x27;NBA&#x27;</span>] = cities[<span class="string">&#x27;NBA&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">cities[<span class="string">&#x27;NHL&#x27;</span>] = cities[<span class="string">&#x27;NHL&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&quot;\[.*\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nhl_df</span>():</span></span><br><span class="line">    Big4=<span class="string">&#x27;NHL&#x27;</span></span><br><span class="line">    team = cities[Big4].<span class="built_in">str</span>.extract(<span class="string">&#x27;([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)&#x27;</span>)</span><br><span class="line">    team[<span class="string">&#x27;Metropolitan area&#x27;</span>]=cities[<span class="string">&#x27;Metropolitan area&#x27;</span>]</span><br><span class="line">    team = pd.melt(team, id_vars=[<span class="string">&#x27;Metropolitan area&#x27;</span>]).drop(columns=[<span class="string">&#x27;variable&#x27;</span>]).replace(<span class="string">&quot;&quot;</span>,np.nan).replace(<span class="string">&quot;—&quot;</span>,np.nan).dropna().reset_index().rename(columns = &#123;<span class="string">&quot;value&quot;</span>:<span class="string">&quot;team&quot;</span>&#125;)</span><br><span class="line">    team=pd.merge(team,cities,how=<span class="string">&#x27;left&#x27;</span>,on = <span class="string">&#x27;Metropolitan area&#x27;</span>).iloc[:,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">    team = team.astype(&#123;<span class="string">&#x27;Metropolitan area&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;team&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;Population&#x27;</span>: <span class="built_in">int</span>&#125;)</span><br><span class="line">    team[<span class="string">&#x27;team&#x27;</span>]=team[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[\w.]*\ &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    _df=pd.read_csv(<span class="string">&quot;assets/&quot;</span>+<span class="built_in">str</span>.lower(Big4)+<span class="string">&quot;.csv&quot;</span>)</span><br><span class="line">    _df = _df[_df[<span class="string">&#x27;year&#x27;</span>] == <span class="number">2018</span>]</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;\*&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df = _df[[<span class="string">&#x27;team&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;L&#x27;</span>]]</span><br><span class="line"></span><br><span class="line">    dropList=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(_df.shape[<span class="number">0</span>]):</span><br><span class="line">        row=_df.iloc[i]</span><br><span class="line">        <span class="keyword">if</span> row[<span class="string">&#x27;team&#x27;</span>]==row[<span class="string">&#x27;W&#x27;</span>] <span class="keyword">and</span> row[<span class="string">&#x27;L&#x27;</span>]==row[<span class="string">&#x27;W&#x27;</span>]:</span><br><span class="line">            dropList.append(i)</span><br><span class="line">    _df=_df.drop(dropList)</span><br><span class="line"></span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[\w.]* &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    _df = _df.astype(&#123;<span class="string">&#x27;team&#x27;</span>: <span class="built_in">str</span>,<span class="string">&#x27;W&#x27;</span>: <span class="built_in">int</span>, <span class="string">&#x27;L&#x27;</span>: <span class="built_in">int</span>&#125;)</span><br><span class="line">    _df[<span class="string">&#x27;W/L%&#x27;</span>] = _df[<span class="string">&#x27;W&#x27;</span>]/(_df[<span class="string">&#x27;W&#x27;</span>]+_df[<span class="string">&#x27;L&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    merge=pd.merge(team,_df,<span class="string">&#x27;inner&#x27;</span>, on = <span class="string">&#x27;team&#x27;</span>)</span><br><span class="line">    merge=merge.groupby(<span class="string">&#x27;Metropolitan area&#x27;</span>).agg(&#123;<span class="string">&#x27;W/L%&#x27;</span>: np.nanmean, <span class="string">&#x27;Population&#x27;</span>: np.nanmean&#125;)  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> merge[[<span class="string">&#x27;W/L%&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nba_df</span>():</span></span><br><span class="line">    Big4=<span class="string">&#x27;NBA&#x27;</span></span><br><span class="line">    team = cities[Big4].<span class="built_in">str</span>.extract(<span class="string">&#x27;([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)&#x27;</span>)</span><br><span class="line">    team[<span class="string">&#x27;Metropolitan area&#x27;</span>]=cities[<span class="string">&#x27;Metropolitan area&#x27;</span>]</span><br><span class="line">    team = pd.melt(team, id_vars=[<span class="string">&#x27;Metropolitan area&#x27;</span>]).drop(columns=[<span class="string">&#x27;variable&#x27;</span>]).replace(<span class="string">&quot;&quot;</span>,np.nan).replace(<span class="string">&quot;—&quot;</span>,np.nan).dropna().reset_index().rename(columns = &#123;<span class="string">&quot;value&quot;</span>:<span class="string">&quot;team&quot;</span>&#125;)</span><br><span class="line">    team=pd.merge(team,cities,how=<span class="string">&#x27;left&#x27;</span>,on = <span class="string">&#x27;Metropolitan area&#x27;</span>).iloc[:,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">    team = team.astype(&#123;<span class="string">&#x27;Metropolitan area&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;team&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;Population&#x27;</span>: <span class="built_in">int</span>&#125;)</span><br><span class="line">    team[<span class="string">&#x27;team&#x27;</span>]=team[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[\w.]*\ &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    _df=pd.read_csv(<span class="string">&quot;assets/&quot;</span>+<span class="built_in">str</span>.lower(Big4)+<span class="string">&quot;.csv&quot;</span>)</span><br><span class="line">    _df = _df[_df[<span class="string">&#x27;year&#x27;</span>] == <span class="number">2018</span>]</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;[\*]&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;\(\d*\)&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;[\xa0]&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df = _df[[<span class="string">&#x27;team&#x27;</span>,<span class="string">&#x27;W/L%&#x27;</span>]]</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[\w.]* &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    _df = _df.astype(&#123;<span class="string">&#x27;team&#x27;</span>: <span class="built_in">str</span>,<span class="string">&#x27;W/L%&#x27;</span>: <span class="built_in">float</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    merge=pd.merge(team,_df,<span class="string">&#x27;outer&#x27;</span>, on = <span class="string">&#x27;team&#x27;</span>)</span><br><span class="line">    merge=merge.groupby(<span class="string">&#x27;Metropolitan area&#x27;</span>).agg(&#123;<span class="string">&#x27;W/L%&#x27;</span>: np.nanmean, <span class="string">&#x27;Population&#x27;</span>: np.nanmean&#125;)</span><br><span class="line">    <span class="keyword">return</span> merge[[<span class="string">&#x27;W/L%&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mlb_df</span>():</span> </span><br><span class="line">    Big4=<span class="string">&#x27;MLB&#x27;</span></span><br><span class="line">    team = cities[Big4].<span class="built_in">str</span>.extract(<span class="string">&#x27;([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)&#x27;</span>)</span><br><span class="line">    team[<span class="string">&#x27;Metropolitan area&#x27;</span>]=cities[<span class="string">&#x27;Metropolitan area&#x27;</span>]</span><br><span class="line">    team = pd.melt(team, id_vars=[<span class="string">&#x27;Metropolitan area&#x27;</span>]).drop(columns=[<span class="string">&#x27;variable&#x27;</span>]).replace(<span class="string">&quot;&quot;</span>,np.nan).replace(<span class="string">&quot;—&quot;</span>,np.nan).dropna().reset_index().rename(columns = &#123;<span class="string">&quot;value&quot;</span>:<span class="string">&quot;team&quot;</span>&#125;)</span><br><span class="line">    team=pd.merge(team,cities,how=<span class="string">&#x27;left&#x27;</span>,on = <span class="string">&#x27;Metropolitan area&#x27;</span>).iloc[:,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">    team = team.astype(&#123;<span class="string">&#x27;Metropolitan area&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;team&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;Population&#x27;</span>: <span class="built_in">int</span>&#125;)</span><br><span class="line">    team[<span class="string">&#x27;team&#x27;</span>]=team[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;\ Sox&#x27;</span>,<span class="string">&#x27;Sox&#x27;</span>)</span><br><span class="line">    team[<span class="string">&#x27;team&#x27;</span>]=team[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[\w.]*\ &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    _df=pd.read_csv(<span class="string">&quot;assets/&quot;</span>+<span class="built_in">str</span>.lower(Big4)+<span class="string">&quot;.csv&quot;</span>)</span><br><span class="line">    _df = _df[_df[<span class="string">&#x27;year&#x27;</span>] == <span class="number">2018</span>]</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;[\*]&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;\(\d*\)&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;[\xa0]&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df = _df[[<span class="string">&#x27;team&#x27;</span>,<span class="string">&#x27;W-L%&#x27;</span>]]</span><br><span class="line">    _df.rename(columns=&#123;<span class="string">&quot;W-L%&quot;</span>: <span class="string">&quot;W/L%&quot;</span>&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>]=_df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;\ Sox&#x27;</span>,<span class="string">&#x27;Sox&#x27;</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[\w.]* &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    _df = _df.astype(&#123;<span class="string">&#x27;team&#x27;</span>: <span class="built_in">str</span>,<span class="string">&#x27;W/L%&#x27;</span>: <span class="built_in">float</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    merge=pd.merge(team,_df,<span class="string">&#x27;outer&#x27;</span>, on = <span class="string">&#x27;team&#x27;</span>)</span><br><span class="line">    merge=merge.groupby(<span class="string">&#x27;Metropolitan area&#x27;</span>).agg(&#123;<span class="string">&#x27;W/L%&#x27;</span>: np.nanmean, <span class="string">&#x27;Population&#x27;</span>: np.nanmean&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> merge[[<span class="string">&#x27;W/L%&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nfl_df</span>():</span> </span><br><span class="line">    Big4=<span class="string">&#x27;NFL&#x27;</span></span><br><span class="line">    team = cities[Big4].<span class="built_in">str</span>.extract(<span class="string">&#x27;([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)([A-Z]&#123;0,2&#125;[a-z0-9]*\ [A-Z]&#123;0,2&#125;[a-z0-9]*|[A-Z]&#123;0,2&#125;[a-z0-9]*)&#x27;</span>)</span><br><span class="line">    team[<span class="string">&#x27;Metropolitan area&#x27;</span>]=cities[<span class="string">&#x27;Metropolitan area&#x27;</span>]</span><br><span class="line">    team = pd.melt(team, id_vars=[<span class="string">&#x27;Metropolitan area&#x27;</span>]).drop(columns=[<span class="string">&#x27;variable&#x27;</span>]).replace(<span class="string">&quot;&quot;</span>,np.nan).replace(<span class="string">&quot;—&quot;</span>,np.nan).dropna().reset_index().rename(columns = &#123;<span class="string">&quot;value&quot;</span>:<span class="string">&quot;team&quot;</span>&#125;)</span><br><span class="line">    team=pd.merge(team,cities,how=<span class="string">&#x27;left&#x27;</span>,on = <span class="string">&#x27;Metropolitan area&#x27;</span>).iloc[:,<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">    team = team.astype(&#123;<span class="string">&#x27;Metropolitan area&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;team&#x27;</span>: <span class="built_in">str</span>, <span class="string">&#x27;Population&#x27;</span>: <span class="built_in">int</span>&#125;)</span><br><span class="line">    team[<span class="string">&#x27;team&#x27;</span>]=team[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[\w.]*\ &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    _df=pd.read_csv(<span class="string">&quot;assets/&quot;</span>+<span class="built_in">str</span>.lower(Big4)+<span class="string">&quot;.csv&quot;</span>)</span><br><span class="line">    _df = _df[_df[<span class="string">&#x27;year&#x27;</span>] == <span class="number">2018</span>]</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;[\*]&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;\(\d*\)&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">r&#x27;[\xa0]&#x27;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    _df = _df[[<span class="string">&#x27;team&#x27;</span>,<span class="string">&#x27;W-L%&#x27;</span>]]</span><br><span class="line">    _df.rename(columns=&#123;<span class="string">&quot;W-L%&quot;</span>: <span class="string">&quot;W/L%&quot;</span>&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line">    dropList=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(_df.shape[<span class="number">0</span>]):</span><br><span class="line">        row=_df.iloc[i]</span><br><span class="line">        <span class="keyword">if</span> row[<span class="string">&#x27;team&#x27;</span>]==row[<span class="string">&#x27;W/L%&#x27;</span>]:</span><br><span class="line">            dropList.append(i)</span><br><span class="line">    _df=_df.drop(dropList)</span><br><span class="line"></span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[\w.]* &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    _df[<span class="string">&#x27;team&#x27;</span>] = _df[<span class="string">&#x27;team&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    _df = _df.astype(&#123;<span class="string">&#x27;team&#x27;</span>: <span class="built_in">str</span>,<span class="string">&#x27;W/L%&#x27;</span>: <span class="built_in">float</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    merge=pd.merge(team,_df,<span class="string">&#x27;outer&#x27;</span>, on = <span class="string">&#x27;team&#x27;</span>)</span><br><span class="line">    merge=merge.groupby(<span class="string">&#x27;Metropolitan area&#x27;</span>).agg(&#123;<span class="string">&#x27;W/L%&#x27;</span>: np.nanmean, <span class="string">&#x27;Population&#x27;</span>: np.nanmean&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> merge[[<span class="string">&#x27;W/L%&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_df</span>(<span class="params">sport</span>):</span></span><br><span class="line">    <span class="keyword">if</span> sport ==<span class="string">&#x27;NFL&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> nfl_df()</span><br><span class="line">    <span class="keyword">elif</span> sport ==<span class="string">&#x27;NBA&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> nba_df()</span><br><span class="line">    <span class="keyword">elif</span> sport ==<span class="string">&#x27;NHL&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> nhl_df()</span><br><span class="line">    <span class="keyword">elif</span> sport ==<span class="string">&#x27;MLB&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> mlb_df()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;ERROR with intput!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sports_team_performance</span>():</span></span><br><span class="line">    <span class="comment"># Note: p_values is a full dataframe, so df.loc[&quot;NFL&quot;,&quot;NBA&quot;] should be the same as df.loc[&quot;NBA&quot;,&quot;NFL&quot;] and</span></span><br><span class="line">    <span class="comment"># df.loc[&quot;NFL&quot;,&quot;NFL&quot;] should return np.nan</span></span><br><span class="line">    sports = [<span class="string">&#x27;NFL&#x27;</span>, <span class="string">&#x27;NBA&#x27;</span>, <span class="string">&#x27;NHL&#x27;</span>, <span class="string">&#x27;MLB&#x27;</span>]</span><br><span class="line">    p_values = pd.DataFrame(&#123;k:np.nan <span class="keyword">for</span> k <span class="keyword">in</span> sports&#125;, index=sports)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sports:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> sports:</span><br><span class="line">            <span class="keyword">if</span> i !=j :</span><br><span class="line">                merge=pd.merge(create_df(i),create_df(j),<span class="string">&#x27;inner&#x27;</span>, on = [<span class="string">&#x27;Metropolitan area&#x27;</span>])</span><br><span class="line">                p_values.loc[i, j]=stats.ttest_rel(merge[<span class="string">&#x27;W/L%_x&#x27;</span>],merge[<span class="string">&#x27;W/L%_y&#x27;</span>])[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">abs</span>(p_values.loc[<span class="string">&quot;NBA&quot;</span>, <span class="string">&quot;NHL&quot;</span>] - <span class="number">0.02</span>) &lt;= <span class="number">1e-2</span>, <span class="string">&quot;The NBA-NHL p-value should be around 0.02&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">abs</span>(p_values.loc[<span class="string">&quot;MLB&quot;</span>, <span class="string">&quot;NFL&quot;</span>] - <span class="number">0.80</span>) &lt;= <span class="number">1e-2</span>, <span class="string">&quot;The MLB-NFL p-value should be around 0.80&quot;</span></span><br><span class="line">    <span class="keyword">return</span> p_values</span><br></pre></td></tr></table></figure>

<h3 id="结果-4"><a href="#结果-4" class="headerlink" title="结果"></a>结果</h3><div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style><p></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>NFL</th>
      <th>NBA</th>
      <th>NHL</th>
      <th>MLB</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>NFL</th>
      <td>NaN</td>
      <td>0.937509</td>
      <td>0.030318</td>
      <td>0.803459</td>
    </tr>
    <tr>
      <th>NBA</th>
      <td>0.937509</td>
      <td>NaN</td>
      <td>0.022386</td>
      <td>0.949566</td>
    </tr>
    <tr>
      <th>NHL</th>
      <td>0.030318</td>
      <td>0.022386</td>
      <td>NaN</td>
      <td>0.000703</td>
    </tr>
    <tr>
      <th>MLB</th>
      <td>0.803459</td>
      <td>0.949566</td>
      <td>0.000703</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>




<br>
<br>

<p>&emsp;&emsp; 所有assignment就这样结束啦，希望大家有所收获~<br>&emsp;&emsp; 大家其他还有需要的就在评论留言哦 :)  欢迎讨论分享~</p>]]></content>
      <categories>
        <category>DataScience</category>
        <category>Coursera</category>
        <category>Intro2DS</category>
      </categories>
      <tags>
        <tag>Coursera</tag>
        <tag>DataScience</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Coursera | Introduction to Data Science in Python（University of Michigan）| Quiz和Assignment1-4答案</title>
    <url>/2020/11/09/Intro2DS/Quiz+Assignment1-4/</url>
    <content><![CDATA[<p>&emsp;&emsp;最后还是把assignment代码放出来了，u1s1,这门课的assignment还是有点难度的，特别是assigment4（哀怨），放给大家参考啦~<br>&emsp;&emsp; 有时间（需求）就把所有代码放到github上（好担心被河蟹啊）<br>&emsp;&emsp; 相关链接：<br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Quiz/">Coursera | Introduction to Data Science in Python（University of Michigan）| Quiz答案</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment1/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment1</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment2/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment2</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment3/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment3</a><br>&emsp;&emsp; <a href="https://ycchen00.github.io/2020/11/09/Intro2DS/Assignment4/">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment4</a><br>&emsp;&emsp; CSDN链接：<br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109544058">Coursera | Introduction to Data Science in Python（University of Michigan）| Quiz答案</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109583609">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment1</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109577773">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment2</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109583813">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment3</a><br>&emsp;&emsp; <a href="https://blog.csdn.net/weixin_43360896/article/details/109584609">Coursera | Introduction to Data Science in Python（University of Michigan）| Assignment4</a></p>
<p>&emsp;&emsp;继续Coursera学习哈，有助学金申请还是比较爽的（有需求下次放个助学金申请模板？）。因为打算往DS靠，找到密歇根大学的 Applied Data Science with Python 专项课程，共有5门课程，目前用了5天薅完了第一门Introduction to Data Science in Python。<br><img src="https://img-blog.csdnimg.cn/20201107110233146.png"></p>
<p><img src="https://img-blog.csdnimg.cn/20201107110218196.png"></p>
<p>&emsp;&emsp; 不愧是密歇根大学，感觉质量很高，原本还打算和离散数学那个一样划水摸鱼过的，结果被编程assignment按在地上摩擦，还是很刺激的。这里放上每个quiz的答案。assignment的代码嘛，看情况，想要的可以评论区留言，多的话我就把整个上课资源上传到Github，包括Quiz编程实现，Assignment代码，上课代码等，貌似容易被和谐掉。因为比起前不久，quiz和assignment都更新了挺多，不知道放上来会不会被和谐(特别是最后一个assignment，新题，没有往届参考快猝死了)，讨论参考肯定没问题 :)<br>&emsp;&emsp; Anway，想自学的推荐哈，Introduction to Data Science in Python这门课程学完能学会很多，包括Pandas的用法以及实例实践等。</p>]]></content>
      <categories>
        <category>DataScience</category>
        <category>Coursera</category>
        <category>Intro2DS</category>
      </categories>
      <tags>
        <tag>Coursera</tag>
        <tag>DataScience</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>GEE实战 | 窗口拆分(split panel)可视化</title>
    <url>/2020/10/27/GEE/GEE%E5%AE%9E%E6%88%98%20%E7%AA%97%E5%8F%A3%E6%8B%86%E5%88%86(split%20panel)%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<p>&emsp;&emsp;Split panel适合在可视化时同时对比效果，而且可以通过拖动，改变两边图像显示范围，可谓高大上可视化以及分析结果的利器。先看效果：<br><img src="https://img-blog.csdnimg.cn/20200826173134877.png?x-oss-process"></p>
<p>&emsp;&emsp;左边是高分辨率土地分类图，右边是重采样后的，可以拖动中间的部件来改变显示范围，同时两边的按钮可以选择显示不同的图片。</p>
<p>&emsp;&emsp;不多说，直接JavaScript放代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test_c3_30 = ee.Image(<span class="string">&quot;users/daviddoyle1/test_c3_30&quot;</span>),</span><br><span class="line"><span class="keyword">var</span> test_c3 = ee.Image(<span class="string">&quot;users/daviddoyle1/test_c3&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> coverVis = &#123;</span><br><span class="line">  <span class="comment">// bands:&#x27;landcover&#x27;,</span></span><br><span class="line">  min: <span class="number">0.0</span>,</span><br><span class="line">  max: <span class="number">3.0</span>,</span><br><span class="line">  palette: [</span><br><span class="line">    <span class="string">&quot;000000&quot;</span>,<span class="string">&quot;0000ff&quot;</span>,<span class="string">&quot;00ff00&quot;</span>,<span class="string">&quot;0000ff&quot;</span> <span class="comment">//   水 建筑 空地</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无split panel可视化</span></span><br><span class="line"><span class="comment">// Map.addLayer(test_c3,coverVis, &#x27;test_c3&#x27;);</span></span><br><span class="line"><span class="comment">// Map.addLayer(test_c3_30,coverVis, &#x27;test_c3_30&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Split panel可视化</span></span><br><span class="line"><span class="keyword">var</span> images =&#123;</span><br><span class="line">  <span class="string">&#x27;high resolution&#x27;</span>:test_c3.visualize(coverVis),</span><br><span class="line">  <span class="string">&#x27;30m resolution&#x27;</span>:test_c3_30.visualize(coverVis),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Set up the maps and control widgets</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the left map, and have it display layer 0.</span></span><br><span class="line"><span class="keyword">var</span> leftMap = ui.Map();</span><br><span class="line">leftMap.setControlVisibility(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> leftSelector = addLayerSelector(leftMap, <span class="number">0</span>, <span class="string">&#x27;top-left&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the right map, and have it display layer 1.</span></span><br><span class="line"><span class="keyword">var</span> rightMap = ui.Map();</span><br><span class="line">rightMap.setControlVisibility(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> rightSelector = addLayerSelector(rightMap, <span class="number">1</span>, <span class="string">&#x27;top-right&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Adds a layer selection widget to the given map, to allow users to change</span></span><br><span class="line"><span class="comment">// which image is displayed in the associated map.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLayerSelector</span>(<span class="params">mapToChange, defaultValue, position</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> label = ui.Label(<span class="string">&#x27;Choose an image to visualize&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This function changes the given map to show the selected image.</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updateMap</span>(<span class="params">selection</span>) </span>&#123;</span><br><span class="line">    mapToChange.layers().set(<span class="number">0</span>, ui.Map.Layer(images[selection]));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Configure a selection dropdown to allow the user to choose between images,</span></span><br><span class="line">  <span class="comment">// and set the map to update when a user makes a selection.</span></span><br><span class="line">  <span class="keyword">var</span> select = ui.Select(&#123;<span class="attr">items</span>: <span class="built_in">Object</span>.keys(images), <span class="attr">onChange</span>: updateMap&#125;);</span><br><span class="line">  select.setValue(<span class="built_in">Object</span>.keys(images)[defaultValue], <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> controlPanel =</span><br><span class="line">      ui.Panel(&#123;<span class="attr">widgets</span>: [label, select], <span class="attr">style</span>: &#123;<span class="attr">position</span>: position&#125;&#125;);</span><br><span class="line"></span><br><span class="line">  mapToChange.add(controlPanel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Tie everything together</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a SplitPanel to hold the adjacent, linked maps.</span></span><br><span class="line"><span class="keyword">var</span> splitPanel = ui.SplitPanel(&#123;</span><br><span class="line">  firstPanel: leftMap,</span><br><span class="line">  secondPanel: rightMap,</span><br><span class="line">  wipe: <span class="literal">true</span>,</span><br><span class="line">  style: &#123;<span class="attr">stretch</span>: <span class="string">&#x27;both&#x27;</span>&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the SplitPanel as the only thing in the UI root.</span></span><br><span class="line">ui.root.widgets().reset([splitPanel]);</span><br><span class="line"><span class="keyword">var</span> linker = ui.Map.Linker([leftMap, rightMap]);</span><br><span class="line"><span class="comment">// leftMap.setCenter(-122.32, 37.7413, 12);</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GEE</category>
        <category>GEE实战</category>
      </categories>
      <tags>
        <tag>Google Earth Engine</tag>
        <tag>Remote sensing</tag>
      </tags>
  </entry>
  <entry>
    <title>GEE入门[2] | 上传、导出</title>
    <url>/2020/10/27/GEE/GEE%E5%85%A5%E9%97%A8%E3%80%902%E3%80%91%E4%B8%8A%E4%BC%A0%E3%80%81%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<h1 id="GEE数据库"><a href="#GEE数据库" class="headerlink" title="GEE数据库"></a>GEE数据库</h1><p>&emsp;&emsp;GEE自带了非常多的各种影像矢量文件等资源。包括卫星影像，气候、地形数据，以及各种处理后的数据，比如土地覆盖分类，NDVI，水体检测等。详见<a href="https://developers.google.com/earth-engine/datasets/catalog">数据库列表</a><br><img src="https://img-blog.csdnimg.cn/20200826171606563.png?x-oss-process" width="600px"><br>&emsp; &emsp;顺带列下整理的GEE提供的LULC相关的数据库：<br><img src="https://img-blog.csdnimg.cn/20200826171658572.png?x-oss-process"></p>
<h1 id="Upload资源"><a href="#Upload资源" class="headerlink" title="Upload资源"></a>Upload资源</h1><p>&emsp; &emsp;一方面我们可以使用GEE自带的各种影像矢量文件等资源，另外一方面我们可以上传我们自己的资源。GEE的Assets提供了250G的空间。</p>
<ol>
<li>在GEE在线平台左侧任务栏，选择Assets，点击”New”按钮。<br><img src="https://img-blog.csdnimg.cn/20200826162300714.png?x-oss-process"></li>
</ol>
<ol start="2">
<li>选择要上传的文件类型。本教程以tfrecord和json为例上传图片数据。</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200826162255879.png?x-oss-process"></p>
<ol start="3">
<li>选择本地资源，填写相关信息。上传TFRecord数据时，需要上传mixer.json文件。<img src="https://img-blog.csdnimg.cn/20200826162034771.png?x-oss-process" width="400px">


</li>
</ol>
<ol start="4">
<li><p>通过“Task”标签可以看到资源上传进度。资源上传成功后显示蓝色，失败显示红色。左侧任务栏”Assets”可以看到成功导入的数据。其中上传TFRecord图像比较迷，经常会出现mixer unreadable问题，多上传几次就好了。<br><img src="https://img-blog.csdnimg.cn/20200826162016986.png"><br>注：Google Cloud Storage可以通过python代码直接上传，Google Drive尚未实现。</p>
</li>
<li><p>接着在“Assets”点击想要import的数据，选择“import”即可。</p>
<img src="https://img-blog.csdnimg.cn/20200826163326655.png?x-oss-process" width="600px">

</li>
</ol>
<p>接着可以在JavaScript在线平台看见import的数据。<br><img src="https://img-blog.csdnimg.cn/20200826163336282.png"><br>python同理：<br>    <code>image = ee.Image(&quot;users/daviddoyle1/test_c3&quot;)</code></p>
<h1 id="Export资源"><a href="#Export资源" class="headerlink" title="Export资源"></a>Export资源</h1><p>&emsp; &emsp;GEE主要可以导出如下类型资源，分别是image影像类型、map地图地图类、table矢量文件类和video视频类。导出函数主要可以直接将数据存放于3个地方，Google Drive、Assets和Google Cloud Storage。由于Google Cloud Storage激活需要信用卡，略过不讲。<br>&emsp; &emsp;Google Drive（drive.google.com/drive）前文已介绍过，通过谷歌账号可以直接获取15G免费存储空间，而且可以通过Colab使用免费GPU，适合硬件条件不好的情况。<br>&emsp; &emsp;Assests是GEE资源存放位置，里面的资源是可以直接在GEE工作空间中使用，每个用户空间限制是250G。<br>&emsp; &emsp;GEE下载文件主要有两个方式，一个是getDownloadURL，一个是Export方式。本教程主要介绍Export方法。Export相关方法如下，其中红色的是废弃的方法。[参考无形的风]<br><img src="https://img-blog.csdnimg.cn/20200826162734735.png?x-oss-process" width="400px"><br>&emsp; &emsp;以image为例，介绍各个参数，具体见文档。</p>
<ol>
<li>导出到Asset方法简介：<br>Export.image.toAsset(image, description, assetId, pyramidingPolicy, dimensions, region, scale, crs, crsTransform, maxPixels) <br>
常用参数说明：  

</li>
</ol>
<p>&emsp; &emsp;image 需要导出的影像；   </p>
<p>&emsp; &emsp;description 导出任务描述；   </p>
<p>&emsp; &emsp;assetId 资源名称，也就是在Asset文件夹中看到的资源名称；</p>
<p>&emsp; &emsp;pyramidingPolicy 波段值计算方式，是一个对象值。计算方式包括：mean、sample、min、max、mode，默认是mean。这个值通常不会设置，都是采用默认值。示例：{‘B4’: ‘mean’} 意思是波段名称为B4的波段采用mean的方式计算；</p>
<p>&emsp; &emsp;dimensions 导出Image的宽和高；</p>
<p>&emsp; &emsp;region 导出的区域，是一个Geomtry；</p>
<p>&emsp; &emsp;scale 分辨率，单位米，比如：30；</p>
<p>&emsp; &emsp;crs 投影信息，一般是采用默认方式，通常可以设置为EPSG:4326；</p>
<p>&emsp; &emsp;maxPixels 导出影像的最大像素个数可以设置为 1e13 防止导出时候报错。</p>
<ol start="2">
<li>导出到Drive方法简介<br>Export.image.toDrive(image, description, folder, fileNamePrefix, dimensions, region, scale, crs, crsTransform, maxPixels, shardSize, fileDimensions, skipEmptyTiles, fileFormat, formatOptions)  <br>
常用参数说明：

</li>
</ol>
<p>&emsp; &emsp;image 需要导出的影像；</p>
<p>&emsp; &emsp;description 导出任务描述；</p>
<p>&emsp; &emsp;folder 在Assets中的文件夹名称，也就是用户自己创建的文件夹。如果不传此参数，那么导出的文件会直接放在Assets根目录下，通常都不会传此参数；fileNamePrefix 导出的资源名称，如果默认的不传，那么会直接采用description来作为导出的文件名称；</p>
<p>&emsp; &emsp;dimensions 导出Image的宽和高；</p>
<p>&emsp; &emsp;region 导出的区域，是一个Geomtry；</p>
<p>&emsp; &emsp;scale 分辨率，单位米，比如：30；</p>
<p>&emsp; &emsp;crs 投影信息，一般是采用默认方式，通常可以设置为EPSG:4326；</p>
<p>&emsp; &emsp;maxPixels 导出影像的最大像素个数可以设置为 1e13 防止导出时候报错。</p>
<p>&emsp; &emsp;导出矢量文件类似，可以直接看文档介绍。</p>
<h2 id="导出实例"><a href="#导出实例" class="headerlink" title="导出实例"></a>导出实例</h2><ol>
<li>导出矢量数据到”Assets”<br>&emsp; &emsp;这里的矢量数据为在线平台选取的区域，红色为trainingPolys，紫色的为evalPolys。<img src="https://img-blog.csdnimg.cn/20200826163954517.png?x-oss-process" width="500px">

</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> desc=<span class="string">&#x27;trainingPolys&#x27;</span>; </span><br><span class="line"><span class="keyword">var</span> assetId=desc</span><br><span class="line">Export.table.toAsset(&#123;</span><br><span class="line">  collection: trainingPolys,</span><br><span class="line">  description: desc,</span><br><span class="line">  assetId:assetId</span><br><span class="line">&#125;); </span><br><span class="line"><span class="keyword">var</span> desc=<span class="string">&#x27;evalPolys&#x27;</span></span><br><span class="line"><span class="keyword">var</span> assetId=desc</span><br><span class="line">Export.table.toAsset(&#123;</span><br><span class="line">  collection: evalPolys,</span><br><span class="line">  description: desc,</span><br><span class="line">  assetId:assetId</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>导出成功</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2020082616500953.png#pic_center"></p>
<ul>
<li>import</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> evalPolys = ee.FeatureCollection(<span class="string">&quot;users/daviddoyle1/Predict_muliti_6/evalPolys&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> trainingPolys = ee.FeatureCollection(<span class="string">&quot;users/daviddoyle1/Predict_muliti_6/trainingPolys&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">evalPolys = ee.FeatureCollection(<span class="string">&quot;users/daviddoyle1/Predict_muliti_6/evalPolys&quot;</span>)</span><br><span class="line">trainingPolys = ee.FeatureCollection(<span class="string">&quot;users/daviddoyle1/Predict_muliti_6/trainingPolys&quot;</span>)</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>导出影像数据到“Assets”（重采样）</li>
</ol>
<ul>
<li>将高分辨率影像导出时重采样成30m分辨率的。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Export.image.toAsset(&#123;</span><br><span class="line">  image: test_c3,</span><br><span class="line">  description: <span class="string">&#x27;test_c3_30&#x27;</span>,</span><br><span class="line">  scale: <span class="number">30</span>,<span class="comment">//定义导出图像的分辨率</span></span><br><span class="line">  maxPixels: <span class="number">1e13</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li>结果对比<br><img src="https://img-blog.csdnimg.cn/20200826170400167.png?x-oss-process"></li>
</ul>
<ol start="3">
<li>导出矢量数据到Drive（格式为TFRecord）<br>一同导出的还有mixer.json文件。<br>偷懒中，只放Python代码：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">task = ee.batch.Export.table.toDrive(</span><br><span class="line">    collection = geomSample,</span><br><span class="line">    description = desc,</span><br><span class="line">    folder = FOLDER,</span><br><span class="line">    fileNamePrefix = desc,</span><br><span class="line">    fileFormat = <span class="string">&#x27;TFRecord&#x27;</span>,</span><br><span class="line">    selectors = BANDS + LABELS</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p>Anyway，JavaScript和python相差不大。</p>]]></content>
      <categories>
        <category>GEE</category>
        <category>GEE入门</category>
      </categories>
      <tags>
        <tag>Google Earth Engine</tag>
        <tag>Remote sensing</tag>
      </tags>
  </entry>
  <entry>
    <title>GEE实战 | LULC获取与处理</title>
    <url>/2020/10/27/GEE/GEE%E5%AE%9E%E6%88%98%20LULC%E8%8E%B7%E5%8F%96%E4%B8%8E%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="LULC数据库"><a href="#LULC数据库" class="headerlink" title="LULC数据库"></a>LULC数据库</h1><p>&emsp;&emsp;LULC百度百科：LULC（the land-use/land-cover 土地利用和土地覆盖）数据包括城市和建筑区、农田、牧场、林地、水、湿地、荒地、冻土带和终年积雪或终年结冰地带的有关信息。<br>&emsp;&emsp;GEE提供了大量LULC数据库，搜索相关结果如下：<br><img src="https://img-blog.csdnimg.cn/20200906170719813.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20200906170732699.png?x-oss-process"><br>&emsp;&emsp;点击进去皆有相关介绍和导入方式以及用法示例等。下面简单介绍下前几个数据库导入方式并重点介绍美国的NLCD数据库。</p>
<p><img src="https://img-blog.csdnimg.cn/2020090617101157.png?x-oss-process"><br><br></p>
<h2 id="MCD12Q1-006"><a href="#MCD12Q1-006" class="headerlink" title="MCD12Q1.006"></a>MCD12Q1.006</h2><p>&emsp;&emsp;MCD12Q1 V6产品按六种不同的分类方案按年间隔（2001-2016年）提供全球土地覆盖类型。它是使用MODIS Terra和Aqua反射数据的监督分类得出的。然后，对受监管的分类进行额外的后处理，这些后处理结合了先前的知识和辅助信息以进一步完善特定的类别。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MCD12Q1.006</span></span><br><span class="line"><span class="keyword">var</span> dataset = ee.ImageCollection(<span class="string">&#x27;MODIS/006/MCD12Q1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> igbpLandCover = dataset.select(<span class="string">&#x27;LC_Type1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> igbpLandCoverVis = &#123;</span><br><span class="line">  min: <span class="number">1.0</span>,</span><br><span class="line">  max: <span class="number">17.0</span>,</span><br><span class="line">  palette: [</span><br><span class="line">    <span class="string">&#x27;05450a&#x27;</span>, <span class="string">&#x27;086a10&#x27;</span>, <span class="string">&#x27;54a708&#x27;</span>, <span class="string">&#x27;78d203&#x27;</span>, <span class="string">&#x27;009900&#x27;</span>, <span class="string">&#x27;c6b044&#x27;</span>, <span class="string">&#x27;dcd159&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dade48&#x27;</span>, <span class="string">&#x27;fbff13&#x27;</span>, <span class="string">&#x27;b6ff05&#x27;</span>, <span class="string">&#x27;27ff87&#x27;</span>, <span class="string">&#x27;c24f44&#x27;</span>, <span class="string">&#x27;a5a5a5&#x27;</span>, <span class="string">&#x27;ff6d4c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;69fff8&#x27;</span>, <span class="string">&#x27;f9ffa4&#x27;</span>, <span class="string">&#x27;1c0dff&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span>.setCenter(<span class="number">6.746</span>, <span class="number">46.529</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(igbpLandCover, igbpLandCoverVis, <span class="string">&#x27;IGBP Land Cover&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200906181312303.png?x-oss-process"></p>
<br>

<h2 id="GlobCover"><a href="#GlobCover" class="headerlink" title="GlobCover"></a>GlobCover</h2><p>&emsp;&emsp;GlobCover 2009是基于ENVISAT中分辨率成像光谱仪（MERIS）1B级数据的全球土地覆盖图，该数据以全分辨率模式获取，空间分辨率约为300米。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//GlobCover</span></span><br><span class="line"><span class="keyword">var</span> dataset = ee.Image(<span class="string">&#x27;ESA/GLOBCOVER_L4_200901_200912_V2_3&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> landcover = dataset.select(<span class="string">&#x27;landcover&#x27;</span>);</span><br><span class="line"><span class="built_in">Map</span>.setCenter(-<span class="number">88.6</span>, <span class="number">26.4</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(landcover, &#123;&#125;, <span class="string">&#x27;Landcover&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200906173246181.png?x-oss-process"></p>
<br>

<h2 id="CGLS-LC100-collection-2"><a href="#CGLS-LC100-collection-2" class="headerlink" title="CGLS-LC100 collection 2"></a>CGLS-LC100 collection 2</h2><p>&emsp;&emsp;The Copernicus Global Land Service（CGLS）在全球范围内针对陆地表面的状况和演变提供一系列生物地球物理产品。 100 m分辨率的动态土地覆盖图（CGLS-LC100）是CGLS产品组合中的新产品，可提供100 m空间分辨率的全球土地覆盖图。<br> &emsp;&emsp;CGLS土地覆盖产品除了提供了主要的土地覆盖分类，还包括所有基本土地覆盖类别的连续田地层，从而为土地覆盖类型的植被/地面覆盖提供比例估计。这种连续的分类方案可能比标准分类方案更好地描述了异类土地覆盖的区域，因此，可以针对应用进行量身定制（例如森林监测，作物监测，生物多样性和保护，监测非洲的环境和安全，气候模拟等等）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Copernicus</span></span><br><span class="line"><span class="keyword">var</span> dataset = ee.ImageCollection(<span class="string">&quot;COPERNICUS/Landcover/100m/Proba-V/Global&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> visualization = &#123;</span><br><span class="line">  bands: [<span class="string">&#x27;discrete_classification&#x27;</span>],</span><br><span class="line">  min: <span class="number">0.0</span>,</span><br><span class="line">  max: <span class="number">200.0</span>,</span><br><span class="line">  palette: [</span><br><span class="line">    <span class="string">&quot;032f7e&quot;</span>,<span class="string">&quot;02740b&quot;</span>,<span class="string">&quot;02740b&quot;</span>,<span class="string">&quot;8cf502&quot;</span>,<span class="string">&quot;8cf502&quot;</span>,<span class="string">&quot;a4da01&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ffbd05&quot;</span>,<span class="string">&quot;ffbd05&quot;</span>,<span class="string">&quot;7a5a02&quot;</span>,<span class="string">&quot;f0ff0f&quot;</span>,<span class="string">&quot;869b36&quot;</span>,<span class="string">&quot;6091b4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;999999&quot;</span>,<span class="string">&quot;ff4e4e&quot;</span>,<span class="string">&quot;ff4e4e&quot;</span>,<span class="string">&quot;ffffff&quot;</span>,<span class="string">&quot;feffc0&quot;</span>,<span class="string">&quot;020202&quot;</span>,</span><br><span class="line">    <span class="string">&quot;020202&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.setCenter(-<span class="number">88.6</span>, <span class="number">26.4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.addLayer(dataset, visualization, <span class="string">&quot;Land Cover&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200906172354362.png?x-oss-process"></p>
<br>

<h2 id="Copernicus-CORINE-Land-Cover"><a href="#Copernicus-CORINE-Land-Cover" class="headerlink" title="Copernicus CORINE Land Cover"></a>Copernicus CORINE Land Cover</h2><p>&emsp;&emsp;Copernicus CORINE Land Cover始于1985年，以标准化欧洲土地数据收集以支持环境政策制定。该项目由欧洲环境局（EEA）在欧盟哥白尼计划的框架内进行协调，并由国家团队实施。<br>&emsp;&emsp;时间段为：<br>&emsp;&emsp;* 1990年asset：1989年至1998年<br>&emsp;&emsp;* 2000年asset：1999年至2001年<br>&emsp;&emsp;* 2006年asset：2005年至2007年<br>&emsp;&emsp;* 2012年asset：2011年至2012年<br>&emsp;&emsp;* 2018年asset：2017年至2018年</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataset = ee.Image(<span class="string">&#x27;COPERNICUS/CORINE/V20/100m/2012&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> landCover = dataset.select(<span class="string">&#x27;landcover&#x27;</span>);</span><br><span class="line"><span class="built_in">Map</span>.setCenter(<span class="number">16.436</span>, <span class="number">39.825</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(landCover, &#123;&#125;, <span class="string">&#x27;Land Cover&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200906172933962.png?x-oss-process"></p>
<h2 id="NLCD"><a href="#NLCD" class="headerlink" title="NLCD"></a>NLCD</h2><p>&emsp;&emsp;NLCD（国家土地覆盖数据库）是一个基于Landsat的30米土地覆盖数据库，涵盖8个时间段（1992、2001、2004、2006、2008、2011、2013和2016）。其中， 1992年的图像无法与NLCD的其他时间段直接比较。 该数据集包含八个时期中每个时期的美国大陆图像，以及2001和2011年分别位于阿拉斯加，夏威夷和波多黎各的图像。<br>&emsp;&emsp;NLCD共有20类，分类如下。<a href="https://www.mrlc.gov/data/legends/national-land-cover-database-2016-nlcd2016-legend">更多信息</a><br><img src="https://img-blog.csdnimg.cn/20200906171340267.png?x-oss-process=200x600"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataset = ee.ImageCollection(<span class="string">&#x27;USGS/NLCD&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> landcover = dataset.select(<span class="string">&#x27;landcover&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> landcoverVis = &#123;</span><br><span class="line">  min: <span class="number">0.0</span>,</span><br><span class="line">  max: <span class="number">95.0</span>,</span><br><span class="line">  palette: [</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;466b9f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d1def8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dec5c5&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d99282&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;eb0000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ab0000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b3ac9f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;68ab5f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1c5f2c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b5c58f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;af963c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ccb879&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dfdfc2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d1d182&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a3cc51&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;82ba9e&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dcd939&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ab6c28&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b8d9eb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;000000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;6c9fb8&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span>.setCenter(-<span class="number">95</span>, <span class="number">38</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(landcover, landcoverVis, <span class="string">&#x27;Landcover&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200906181816875.png?x-oss-process"></p>
<h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>&emsp;&emsp;从分类图和代码可以看出，多分类对应的像素值并不是连续的。所以有时候为了方便处理，比如训练监督分类模型，最好将其元素值映射为连续的，那么该如何做呢，先上一个简单的例子，根据多分类结果提取水体，这里我们将11和12类都定义为水体。<br>&emsp;&emsp;通过使用remap函数可以将像素值映射到其他像素值，完成映射、合并等操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> LULC = ee.Image(<span class="string">&quot;USGS/NLCD/NLCD2016&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> landcover_water= LULC.select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">                      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">                            ,[ <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">                            .rename(<span class="string">&#x27;landcover&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wcoverVis = &#123;</span><br><span class="line">  bands:<span class="string">&#x27;landcover&#x27;</span>,</span><br><span class="line">  min: <span class="number">0.0</span>,</span><br><span class="line">  max: <span class="number">1.0</span>,</span><br><span class="line">  palette: [</span><br><span class="line">    <span class="string">&quot;000000&quot;</span>,<span class="string">&quot;00ff&quot;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.addLayer(landcover_water,wcoverVis, <span class="string">&#x27;water&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;结果如图，水体对应像素值为1，非水体为0。可视化中，水体显示为蓝色，非水体为黑色。</p>
<p><img src="https://img-blog.csdnimg.cn/20200906190009604.png?x-oss-process"></p>
<p>&emsp;&emsp;接下来映射为8类地物。同理也可以映射为20类（本数），6类等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> LULC = ee.Image(<span class="string">&quot;USGS/NLCD/NLCD2016&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> landcover_8= LULC.select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">                 .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">                            ,[ <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>],<span class="number">7</span>)</span><br><span class="line">                            .rename(<span class="string">&#x27;landcover&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c8coverVis = &#123;</span><br><span class="line">  bands:<span class="string">&#x27;landcover&#x27;</span>,</span><br><span class="line">  min: <span class="number">0.0</span>,</span><br><span class="line">  max: <span class="number">7.0</span>,</span><br><span class="line">  palette: [</span><br><span class="line">    <span class="string">&quot;ff0000&quot;</span>,<span class="string">&quot;00ff00&quot;</span>,<span class="string">&quot;0000ff&quot;</span>,<span class="string">&quot;ffff00&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ff00ff&quot;</span>,<span class="string">&quot;00ffff&quot;</span>,<span class="string">&quot;ffffff&quot;</span>,<span class="string">&quot;000000&quot;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.addLayer(landcover_8,c8coverVis, <span class="string">&#x27;gourndtruth&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;可视化结果如图。<br><img src="https://img-blog.csdnimg.cn/20200906190252559.png?x-oss-process"></p>
<h3 id="单独映射"><a href="#单独映射" class="headerlink" title="单独映射"></a>单独映射</h3><p>&emsp;&emsp;其中，如果不希望映射到一张图上，可以单独映射然后合并。以8分类为例。最后合成仍然是一张图，但是具有8个波段属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var LULC = ee.Image(&quot;USGS/NLCD/NLCD2016&quot;);</span></span><br><span class="line"><span class="keyword">var</span> nlcd_0 = ee.Image(<span class="string">&#x27;USGS/NLCD/NLCD2016&#x27;</span>)</span><br><span class="line">      .select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">          ,[<span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">      .rename(<span class="string">&#x27;LABEL_0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nlcd_1 = ee.Image(<span class="string">&#x27;USGS/NLCD/NLCD2016&#x27;</span>)</span><br><span class="line">      .select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">          ,[<span class="number">0</span>,<span class="number">0</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">      .rename(<span class="string">&#x27;LABEL_1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nlcd_2 = ee.Image(<span class="string">&#x27;USGS/NLCD/NLCD2016&#x27;</span>)</span><br><span class="line">      .select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">          ,[<span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">1</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">      .rename(<span class="string">&#x27;LABEL_2&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> nlcd_3 = ee.Image(<span class="string">&#x27;USGS/NLCD/NLCD2016&#x27;</span>)</span><br><span class="line">      .select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">          ,[<span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">1</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">      .rename(<span class="string">&#x27;LABEL_3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nlcd_4 = ee.Image(<span class="string">&#x27;USGS/NLCD/NLCD2016&#x27;</span>)</span><br><span class="line">      .select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">          ,[<span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">      .rename(<span class="string">&#x27;LABEL_4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nlcd_5 = ee.Image(<span class="string">&#x27;USGS/NLCD/NLCD2016&#x27;</span>)</span><br><span class="line">      .select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">          ,[<span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">      .rename(<span class="string">&#x27;LABEL_5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nlcd_6 = ee.Image(<span class="string">&#x27;USGS/NLCD/NLCD2016&#x27;</span>)</span><br><span class="line">      .select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">          ,[<span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">1</span>,<span class="number">1</span>, <span class="number">0</span>,<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">      .rename(<span class="string">&#x27;LABEL_6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nlcd_7 = ee.Image(<span class="string">&#x27;USGS/NLCD/NLCD2016&#x27;</span>)</span><br><span class="line">      .select(<span class="string">&#x27;landcover&#x27;</span>)</span><br><span class="line">      .remap([<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">71</span>,<span class="number">72</span>,<span class="number">73</span>,<span class="number">74</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">90</span>,<span class="number">95</span>]</span><br><span class="line">          ,[<span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">0</span>, <span class="number">1</span>,<span class="number">1</span>],<span class="number">0</span>)</span><br><span class="line">      .rename(<span class="string">&#x27;LABEL_7&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8类合成LULC</span></span><br><span class="line"><span class="keyword">var</span> featureStack = ee.Image.cat([</span><br><span class="line">  nlcd_0.select(<span class="string">&#x27;LABEL_0&#x27;</span>),</span><br><span class="line">  nlcd_1.select(<span class="string">&#x27;LABEL_1&#x27;</span>),</span><br><span class="line">  nlcd_2.select(<span class="string">&#x27;LABEL_2&#x27;</span>),</span><br><span class="line">  nlcd_3.select(<span class="string">&#x27;LABEL_3&#x27;</span>),</span><br><span class="line">  nlcd_4.select(<span class="string">&#x27;LABEL_4&#x27;</span>),</span><br><span class="line">  nlcd_5.select(<span class="string">&#x27;LABEL_5&#x27;</span>),</span><br><span class="line">  nlcd_6.select(<span class="string">&#x27;LABEL_6&#x27;</span>),</span><br><span class="line">  nlcd_7.select(<span class="string">&#x27;LABEL_7&#x27;</span>)</span><br><span class="line">]).float()</span><br><span class="line"></span><br><span class="line"><span class="comment">// print(featureStack,&#x27;featureStack&#x27;)</span></span><br><span class="line"><span class="keyword">var</span> LABEL=[<span class="string">&#x27;LABEL_0&#x27;</span>, <span class="string">&#x27;LABEL_1&#x27;</span>, <span class="string">&#x27;LABEL_2&#x27;</span>, <span class="string">&#x27;LABEL_3&#x27;</span>, <span class="string">&#x27;LABEL_4&#x27;</span>, <span class="string">&#x27;LABEL_5&#x27;</span>, <span class="string">&#x27;LABEL_6&#x27;</span>, <span class="string">&#x27;LABEL_7&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和输入数据合成</span></span><br><span class="line"><span class="keyword">var</span> featureStacks = ee.Image.cat([</span><br><span class="line">  image.select(Bands),</span><br><span class="line">  featureStack.select(LABEL),</span><br><span class="line">]).float()</span><br><span class="line"><span class="comment">// print(featureStacks,&#x27;featureStacks&#x27;)</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GEE</category>
        <category>GEE实战</category>
      </categories>
      <tags>
        <tag>Google Earth Engine</tag>
        <tag>Remote sensing</tag>
      </tags>
  </entry>
  <entry>
    <title>GEE入门[4] | 矢量数据FeatureCollection（行政区划分）</title>
    <url>/2020/10/27/GEE/GEE%E5%85%A5%E9%97%A8%E3%80%904%E3%80%91%E7%9F%A2%E9%87%8F%E6%95%B0%E6%8D%AEFeatureCollection%EF%BC%88%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%88%92%E5%88%86%EF%BC%89/</url>
    <content><![CDATA[<p>&emsp;&emsp;这节介绍下FeatureCollection相关操作。以行政区域矢量数据为例，介绍如何导入行政区域矢量数据并进行相关操作~</p>
<h2 id="FeatureCollection数据"><a href="#FeatureCollection数据" class="headerlink" title="FeatureCollection数据"></a>FeatureCollection数据</h2><p>&emsp;&emsp;首先导入行政矢量数据，在GEE中是FeatureCollection类型，大家可以自己在网上找到相关资源下载后自己upload到GEE平台上。这里提供麻辣GIS的<a href="https://malagis.com/gis-data-china-province.html">下载链接</a> 。<br>&emsp;&emsp;为了进一步展示效果，导入了夜光遥感数据进行后续处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> viirsnight = ee.ImageCollection(<span class="string">&quot;NOAA/VIIRS/DNB/MONTHLY_V1/VCMSLCFG&quot;</span>),</span><br><span class="line">    province = ee.FeatureCollection(<span class="string">&quot;users/daviddoyle1/Province_region&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;这是upload后属性界面：<br><img src="https://img-blog.csdnimg.cn/2020101117110632.png?x-oss-process"><br>&emsp;&emsp;有乱码貌似是因为中文问题，暂没有处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">print(province,<span class="string">&#x27;Province&#x27;</span>)    </span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;在javascript平台print出来，可以看到共34个省级行政区：</p>
<p><img src="https://img-blog.csdnimg.cn/20201011171456710.png?x-oss-process"></p>
<h2 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h2><p>&emsp;&emsp;接着举几个筛选的例子。先上代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// filterMetadata()通过属性筛选</span></span><br><span class="line"><span class="keyword">var</span> XJ=province.filterMetadata(<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;equals&#x27;</span>,<span class="string">&#x27;Xinjiang&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;XinJiang&#x27;</span>,XJ)     </span><br><span class="line"></span><br><span class="line"><span class="comment">// .limit(筛选数量、筛选字段（可选）、排序方式（可选，默认从小到大True）)</span></span><br><span class="line"><span class="keyword">var</span> province_limit=province.limit(<span class="number">5</span>,<span class="string">&#x27;X&#x27;</span>,<span class="literal">false</span>) <span class="comment">// 根据X轴筛选</span></span><br><span class="line">print(<span class="string">&#x27;province_limit&#x27;</span>,province_limit)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据空间位置筛选</span></span><br><span class="line"><span class="keyword">var</span> CQ_Point =ee.Geometry.Point([<span class="number">106.92371845031437</span>, <span class="number">29.430312117372274</span>]);</span><br><span class="line"><span class="keyword">var</span> CQ = province.filterBounds(CQ_Point);</span><br><span class="line">print(<span class="string">&#x27;ChongQing&#x27;</span>,CQ) </span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;简而言之，可以通过属性、空间位置等信息进行筛选，然后也可以批量筛选。<br>&emsp;&emsp;print结果如下：<br><img src="https://img-blog.csdnimg.cn/20201011172411202.png?x-oss-process"></p>
<h2 id="要素信息"><a href="#要素信息" class="headerlink" title="要素信息"></a>要素信息</h2><p>&emsp;&emsp;当我们输错信息筛选时，比如将’Xinjiang’输成’XinJiang’，这时候不会报错，但是我们输出的结果就是0element，即没有任何元素通过筛选。<br>&emsp;&emsp;那么进行属性筛选时如何找到我们目标区域对应的属性呢，这个时候就需要掌握要素信息相关的函数了。<br>&emsp;&emsp;先放一大串代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//要素信息提取（复制）</span></span><br><span class="line"><span class="keyword">var</span> China_ID = province.select([<span class="string">&#x27;ID&#x27;</span>]);</span><br><span class="line"><span class="keyword">var</span> China_NAME = province.select([<span class="string">&#x27;NAME&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">print(China_ID,<span class="string">&quot;ID&quot;</span>);</span><br><span class="line">print(China_NAME,<span class="string">&quot;NAME&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//要素信息筛选（去除重复字段）</span></span><br><span class="line"><span class="keyword">var</span> China_ID2 = province.distinct([<span class="string">&#x27;ID&#x27;</span>]);</span><br><span class="line">print(China_ID2,<span class="string">&quot;ID2&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp; 我们提取出ID和NAME属性后，可以进行去除等操作。输出结果如下：<br>&emsp;&emsp;ID：<br><img src="https://img-blog.csdnimg.cn/20201011173457518.png?x-oss-process"><br>&emsp;&emsp; NAME（依然乱码中）：<br><img src="https://img-blog.csdnimg.cn/20201011173547887.png?x-oss-process"><br>&emsp;&emsp;由于该数据ID没有重复数据，即没省拼音一致，故结果没变：<br><img src="https://img-blog.csdnimg.cn/20201011173624419.png#pic_center"></p>
<p>&emsp;&emsp;既然我们能提取出属性信息，那就方便我们进一步搞事情:)<br>我们可以根据筛选到的元素进行合并生成新矢量区域，或者改属性内容也是so easy~如下，将西藏和新疆两个矢量数据合并并属性定义为西部：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//空间信息合并（合并后会丢失原有属性信息）</span></span><br><span class="line"><span class="keyword">var</span> China_Union = province.union();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> XJ=province.filterMetadata(<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;equals&#x27;</span>,<span class="string">&#x27;Xinjiang&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> XZ=province.filterMetadata(<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;equals&#x27;</span>,<span class="string">&#x27;Xizang&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> XJ_XZ_Merge=XJ.merge(XZ);</span><br><span class="line">print(XJ_XZ_Merge,<span class="string">&#x27;XJ_XZ_Merge&#x27;</span>);    </span><br><span class="line"></span><br><span class="line"><span class="comment">//信息更改重置</span></span><br><span class="line"><span class="keyword">var</span> XJ_XZ_Merge_Set=XJ.merge(XZ).set(<span class="string">&#x27;NAME&#x27;</span>,<span class="string">&#x27;Xibu&#x27;</span>);</span><br><span class="line">print(XJ_XZ_Merge_Set,<span class="string">&#x27;XJ_XZ_Merge reset&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;结果对比，可以看到合并后仍然有个两个矢量元素而且属性信息丢失了，自己再赋予就好了：<br><img src="https://img-blog.csdnimg.cn/20201011174324984.png?x-oss-process"><br>&emsp;&emsp;继续放代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对属性表进行排序</span></span><br><span class="line"><span class="keyword">var</span> China_Sort_X = province.sort(<span class="string">&#x27;X&#x27;</span>,<span class="literal">false</span>)</span><br><span class="line"><span class="comment">//根据X进行排序，默认都是True，从小到大，最后得到前五个的省份</span></span><br><span class="line"><span class="keyword">var</span> sort_test=China_Sort_X.limit(<span class="number">5</span>);</span><br><span class="line">print(sort_test)</span><br><span class="line"></span><br><span class="line"><span class="comment">//将多个属性字段形成新的属性字段</span></span><br><span class="line"><span class="keyword">var</span> China_Array = province.makeArray([<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>],<span class="string">&#x27;An_Array&#x27;</span>)</span><br><span class="line"><span class="comment">//将&#x27;OBJECTID&#x27;,&#x27;Shape_Area&#x27;,&#x27;Shape_Leng&#x27;三个字段结合为&#x27;An_Array&#x27;的一个字段</span></span><br><span class="line">print(China_Array)</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;btw.后续就不放太多结果图了，节省篇幅</p>
<h2 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h2><p>&emsp;&emsp;也可以将提取到的元素进行类型转换，比如提取geometry信息进行其他操作，转换成栅格数据等：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获得所有feature的Geometry信息</span></span><br><span class="line"><span class="keyword">var</span> China_Geometry = province.geometry();</span><br><span class="line">print(China_Geometry,<span class="string">&#x27;China_Geometry&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//矢量转栅格</span></span><br><span class="line"><span class="keyword">var</span> China_to_Image = province.reduceToImage([<span class="string">&#x27;X&#x27;</span>],ee.Reducer.first())</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;当然还有toList用于属性数据提取等操作，有机会会继续更新。</p>
<h2 id="夜光遥感数据提取"><a href="#夜光遥感数据提取" class="headerlink" title="夜光遥感数据提取"></a>夜光遥感数据提取</h2><p>&emsp;&emsp;提取出每个行政区矢量数据最直接的用法就是进行卫星影像的裁剪了，这里用夜光遥感数据为例，裁剪新疆区域影像：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test 夜光</span></span><br><span class="line"><span class="keyword">var</span> image=ee.ImageCollection(<span class="string">&quot;NOAA/VIIRS/DNB/MONTHLY_V1/VCMSLCFG&quot;</span>)</span><br><span class="line">                    .filterDate(<span class="string">&quot;2014-01-01&quot;</span>,<span class="string">&quot;2014-02-01&quot;</span>)</span><br><span class="line">                    .first()</span><br><span class="line">                    <span class="comment">// .clip(XJ)  // clip()针对geometry对象</span></span><br><span class="line">                    .clipToCollection(XJ)</span><br><span class="line">                    ;</span><br><span class="line"><span class="keyword">var</span> visParams = &#123;<span class="attr">bands</span>:[<span class="string">&#x27;avg_rad&#x27;</span>],<span class="attr">gain</span>:<span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.addLayer(image,visParams,<span class="string">&#x27;virrsnight1&#x27;</span>,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>


<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>&emsp;&emsp;最后附上整个完整代码以及可视化：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> viirsnight = ee.ImageCollection(<span class="string">&quot;NOAA/VIIRS/DNB/MONTHLY_V1/VCMSLCFG&quot;</span>),</span><br><span class="line">    province = ee.FeatureCollection(<span class="string">&quot;users/daviddoyle1/Province_region&quot;</span>);</span><br><span class="line"></span><br><span class="line">print(province,<span class="string">&#x27;Province&#x27;</span>)     </span><br><span class="line"></span><br><span class="line"><span class="comment">// filterMetadata()通过属性筛选</span></span><br><span class="line"><span class="keyword">var</span> XJ=province.filterMetadata(<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;equals&#x27;</span>,<span class="string">&#x27;Xinjiang&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;XinJiang&#x27;</span>,XJ)     </span><br><span class="line"></span><br><span class="line"><span class="comment">// .limit(筛选数量、筛选字段（可选）、排序方式（可选，默认从小到大True）)</span></span><br><span class="line"><span class="keyword">var</span> province_limit=province.limit(<span class="number">5</span>,<span class="string">&#x27;X&#x27;</span>,<span class="literal">false</span>) <span class="comment">// 根据X轴筛选</span></span><br><span class="line">print(<span class="string">&#x27;province_limit&#x27;</span>,province_limit)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据空间位置筛选</span></span><br><span class="line"><span class="keyword">var</span> CQ_Point =ee.Geometry.Point([<span class="number">106.92371845031437</span>, <span class="number">29.430312117372274</span>]);</span><br><span class="line"><span class="keyword">var</span> CQ = province.filterBounds(CQ_Point);</span><br><span class="line">print(<span class="string">&#x27;ChongQing&#x27;</span>,CQ) </span><br><span class="line"></span><br><span class="line"><span class="comment">//要素信息提取（复制）</span></span><br><span class="line"><span class="keyword">var</span> China_ID = province.select([<span class="string">&#x27;ID&#x27;</span>]);</span><br><span class="line"><span class="keyword">var</span> China_NAME = province.select([<span class="string">&#x27;NAME&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">print(China_ID,<span class="string">&quot;ID&quot;</span>);</span><br><span class="line">print(China_NAME,<span class="string">&quot;NAME&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//要素信息筛选（去除重复字段）</span></span><br><span class="line"><span class="keyword">var</span> China_ID2 = province.distinct([<span class="string">&#x27;ID&#x27;</span>]);</span><br><span class="line">print(China_ID2,<span class="string">&quot;ID2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//空间信息合并（合并后会丢失原有属性信息）</span></span><br><span class="line"><span class="keyword">var</span> China_Union = province.union();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> XJ=province.filterMetadata(<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;equals&#x27;</span>,<span class="string">&#x27;Xinjiang&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> XZ=province.filterMetadata(<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;equals&#x27;</span>,<span class="string">&#x27;Xizang&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> XJ_XZ_Merge=XJ.merge(XZ);</span><br><span class="line">print(XJ_XZ_Merge,<span class="string">&#x27;XJ_XZ_Merge&#x27;</span>);    </span><br><span class="line"></span><br><span class="line"><span class="comment">//信息更改重置</span></span><br><span class="line"><span class="keyword">var</span> XJ_XZ_Merge_Set=XJ.merge(XZ).set(<span class="string">&#x27;NAME&#x27;</span>,<span class="string">&#x27;Xibu&#x27;</span>);</span><br><span class="line">print(XJ_XZ_Merge_Set,<span class="string">&#x27;XJ_XZ_Merge reset&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对属性表进行排序</span></span><br><span class="line"><span class="keyword">var</span> China_Sort_X = province.sort(<span class="string">&#x27;X&#x27;</span>,<span class="literal">false</span>)</span><br><span class="line"><span class="comment">//根据X进行排序，默认都是True，从小到大，最后得到前五个的省份</span></span><br><span class="line"><span class="keyword">var</span> sort_test=China_Sort_X.limit(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将多个属性字段形成新的属性字段</span></span><br><span class="line"><span class="keyword">var</span> China_Array = province.makeArray([<span class="string">&#x27;ID&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>],<span class="string">&#x27;An_Array&#x27;</span>)</span><br><span class="line"><span class="comment">//将&#x27;OBJECTID&#x27;,&#x27;Shape_Area&#x27;,&#x27;Shape_Leng&#x27;三个字段结合为&#x27;An_Array&#x27;的一个字段</span></span><br><span class="line">print(China_Array)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得所有feature的Geometry信息</span></span><br><span class="line"><span class="keyword">var</span> China_Geometry = province.geometry();</span><br><span class="line">print(China_Geometry,<span class="string">&#x27;China_Geometry&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//矢量转栅格</span></span><br><span class="line"><span class="keyword">var</span> China_to_Image = province.reduceToImage([<span class="string">&#x27;X&#x27;</span>],ee.Reducer.first())</span><br><span class="line"></span><br><span class="line"><span class="comment">//toList命令（更便于属性数据的提取）</span></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test 夜光</span></span><br><span class="line"><span class="keyword">var</span> image=ee.ImageCollection(<span class="string">&quot;NOAA/VIIRS/DNB/MONTHLY_V1/VCMSLCFG&quot;</span>)</span><br><span class="line">                    .filterDate(<span class="string">&quot;2014-01-01&quot;</span>,<span class="string">&quot;2014-02-01&quot;</span>)</span><br><span class="line">                    .first()</span><br><span class="line">                    <span class="comment">// .clip(XJ)  // clip()针对geometry对象</span></span><br><span class="line">                    .clipToCollection(XJ)</span><br><span class="line">                    ;</span><br><span class="line"><span class="keyword">var</span> visParams = &#123;<span class="attr">bands</span>:[<span class="string">&#x27;avg_rad&#x27;</span>],<span class="attr">gain</span>:<span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>.centerObject(province,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(province,&#123;&#125;,<span class="string">&#x27;Province&#x27;</span>,<span class="literal">false</span>); </span><br><span class="line"><span class="built_in">Map</span>.addLayer(image,visParams,<span class="string">&#x27;virrsnight1&#x27;</span>,<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(XJ,&#123;<span class="attr">color</span>:<span class="string">&#x27;FF0000&#x27;</span>&#125;,<span class="string">&quot;XinJiang&quot;</span>,<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(province_limit,&#123;&#125;,<span class="string">&#x27;Province_part&#x27;</span>,<span class="literal">false</span>); </span><br><span class="line"><span class="built_in">Map</span>.addLayer(CQ,&#123;<span class="attr">color</span>:<span class="string">&#x27;FF0000&#x27;</span>&#125;,<span class="string">&quot;ChongQing&quot;</span>,<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(China_Union,&#123;<span class="attr">color</span>:<span class="string">&#x27;F00000&#x27;</span>&#125;,<span class="string">&#x27;union&#x27;</span>,<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(XJ_XZ_Merge,&#123;<span class="attr">color</span>:<span class="string">&#x27;F00000&#x27;</span>&#125;,<span class="string">&#x27;merge&#x27;</span>,<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(China_to_Image,&#123;<span class="string">&quot;min&quot;</span>:<span class="number">1</span>,<span class="string">&quot;max&quot;</span>:<span class="number">40</span>,<span class="string">&quot;palette&quot;</span>:[<span class="string">&quot;ff9c07&quot;</span>,<span class="string">&quot;f0ff1b&quot;</span>,<span class="string">&quot;1aff0b&quot;</span>]&#125;,<span class="string">&#x27;image&#x27;</span>,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>GEE</category>
        <category>GEE入门</category>
      </categories>
      <tags>
        <tag>Google Earth Engine</tag>
        <tag>Remote sensing</tag>
      </tags>
  </entry>
  <entry>
    <title>GEE入门[3] | 相关学习网站</title>
    <url>/2020/10/27/GEE/GEE%E5%85%A5%E9%97%A8%E3%80%903%E3%80%91%E7%9B%B8%E5%85%B3%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>&emsp;&emsp;好久没更新了，开学忙着瞎眼实习，这次全面介绍一些相关网站，会补充，之前第一篇<a href="https://blog.csdn.net/weixin_43360896/article/details/108174759"> GEE入门【1】| Python环境配置</a> 最后介绍了点相关网站，但是在实际运用中还是要不断线上找教程解决问题。GEE普遍度比起其他热门工具不算高，因此特此收集平时遇到的比较好的专栏、教程之类的相关网站。（如果认为侵权，请联系我删除~）<br>&nbsp; </p>
<h1 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h1><p>&emsp;&emsp;首先先放上几个官方网站，防丢失。<br>&emsp;&emsp;<a href="https://earthengine.google.com/">Google Earth Engine 官方地址</a><br>&emsp;&emsp;官方子网站系列：<br>&emsp;&emsp;<a href="https://earthengine.google.com/datasets/">GEE资源介绍</a> 或者这个<a href="https://developers.google.com/earth-engine/datasets">GEE资源列表</a>： 介绍了卫星影像和各种其他数据，放个大致图：<br><img src="https://img-blog.csdnimg.cn/20200826171606563.png?x-oss-process" width="600px"><br>&emsp;&emsp;<a href="https://earthengine.google.com/case_studies/">GEE研究项目介绍</a> ：里面挺多实际项目代码，可以看看学习下</p>
<p>&emsp;&emsp;<a href="https://code.earthengine.google.com/"><strong>JavaScript在线平台</strong></a>： 这个不用多说<br>&emsp;&emsp;<a href="https://explorer.earthengine.google.com/#workspace">GEE查看资源</a>： 一个可以自主导入显示资源的交互界面，用的比较少</p>
<p>&emsp;&emsp;接下来是GEE官方教程系列：<br>&emsp;&emsp;<a href="https://developers.google.com/earth-engine/">GEE入门介绍首页</a><br>&emsp;&emsp;<a href="https://developers.google.com/earth-engine/apidocs">API文档介绍</a>： 多看API文档！有时候比网上找教程快多了<br>&emsp;&emsp;<a href="https://developers.google.com/earth-engine/edu">官方培训资料</a>： 中英文资料都有，挺全的，下次直接补充个百度云链接<br>&emsp;&emsp;<a href="https://developers.google.com/earth-engine/guides">官方示例教程</a>： 硬核教程，值得多翻翻</p>
<p>&emsp;&emsp;<a href="https://events.withgoogle.com/google-earth-engine-user-summit-2017/#content">17年GEE开发者大会</a>： 没怎么看过<br>&emsp;&emsp;<a href="https://groups.google.com/forum/#!forum/google-earth-engine-developers">GEE 开发者论坛</a>： 需申请，申请简单，可以在上面提问并查看别人解决方案，不过由于解决概率和时间不能解决比较急的问题，用的比较少<br>&emsp;&emsp;<a href="https://www.youtube.com/playlist?list=PLWw80tqUZ5J9_3E_9C_bK8zt0mGHfvOrj">官方YouTube学习视频</a>： 22个学习视频，每个平均一个多小时，可以看看<br>&emsp;&emsp;<a href="https://gis.stackexchange.com/questions/tagged/google-earth-engine?newreg=6844c858f8ae4f7ea6febaf5d472743b">stackflow相关网站</a>： 相当于英文CSDN</p>
<h2 id="Python-API"><a href="#Python-API" class="headerlink" title="Python API"></a>Python API</h2><p>&emsp;&emsp;Python系列当然也少不了，接下来会介绍一些相关Python教程以及想关包~<br>&emsp;&emsp;<a href="https://github.com/google/earthengine-api">GEE API</a>： JavaScript和Python语言都有，包含基本操作，决策树等机器学习代码，挺全的，但是无深度学习相关<br>&nbsp; </p>
<h1 id="大佬专栏"><a href="#大佬专栏" class="headerlink" title="大佬专栏"></a>大佬专栏</h1><p>&emsp;&emsp;这里列一些平时找教程遇到的大佬们的专栏或者相关平台、教程。当然，我也会争取自己出教程hhhh。</p>
<h2 id="dl1"><a href="#dl1" class="headerlink" title="dl1"></a>dl1</h2><p>&emsp;&emsp;首先学习入门是跟着dl无形的风，其CSDN和知乎都有专栏，不过貌似后来转到知乎了？教程多且全，包含挺多实践，挺好~<br>&emsp;&emsp;<a href="https://github.com/shiweihappy/GEE-Python-API">Github Python API</a><br>&emsp;&emsp;<a href="https://blog.csdn.net/shi_weihappy/category_9282574.html">博客专栏</a><br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/c_123993183">知乎专栏</a>： JavaScript和Python相关都有，多达90+。一个个学下来会很有收获，当然，即用即学也可</p>
<h2 id="dl2"><a href="#dl2" class="headerlink" title="dl2"></a>dl2</h2><p>&emsp;&emsp;吴秋生教授的Gtihub网站上有很多教程，其在bilibili和油管已经ResearchGate等平台都有教程。而且开发了geemap包。<br>&emsp;&emsp;<a href="https://www.researchgate.net/project/Google-Earth-Engine-4">ResearchGate专栏</a><br>&emsp;&emsp;<a href="https://space.bilibili.com/527404442/channel/detail?cid=132674">bilibli视频教程</a><br>&emsp;&emsp;<a href="https://www.youtube.com/c/QiushengWu">YouTube视频教程</a><br>&emsp;&emsp;<a href="https://github.com/giswqs/earthengine-py-notebooks">Github教程</a>： jupyter Python notebook，包含javascript在线平台教程以及python结合深度学习代码，主要结合TensorFlow以及Google Colab运行，代码需要适当修改<br>&emsp;&emsp;<a href="https://github.com/giswqs/geemap/tree/master/examples">geemap包_Github专栏</a>： geemap包Github介绍，ps. geemap包有些功能在jupyter notebook 和 Google Colab两个平台无法通用。<br><img src="https://img-blog.csdnimg.cn/20200822222103455.png?x-oss-process" width="300px"></p>
<h2 id="dl3"><a href="#dl3" class="headerlink" title="dl3"></a>dl3</h2><p>&emsp;&emsp;王Mike:<a href="https://zhuanlan.zhihu.com/c_1137998284927893504">知乎专栏</a><br>&emsp;&emsp;由于GEE中的参数不一样，所以很多函数需要新学习，该专栏提供的参数类型系列非常全面，特此列出：<br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/p/75260835">String, Number</a><br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/p/75823262">Dictionary，List，Array</a><br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/p/75944017">Geometry，Feature，Feature Collection </a><br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/p/76343298">Image,Image Collection</a><br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/p/76486116">Date, Date Range </a><br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/p/76487384">Filter，Join </a><br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/p/76488695">Reducer，Kernel，Algorithm </a></p>
<h2 id="dls"><a href="#dls" class="headerlink" title="dls"></a>dls</h2><p>&emsp;&emsp;当然还有很多其他dl们的专栏也很有用，就不一一举出来了，见谅（懒）<br>&emsp;&emsp;<a href="https://github.com/jupyter-widgets/ipyleaflet">ipyleaflet包_Github</a>：用于GEE python交互可视化<br>&emsp;&emsp;<a href="https://zhuanlan.zhihu.com/c_1098521918466109440">猿人充电站_知乎专栏</a><br>&emsp;&emsp;<a href="https://www.zhihu.com/column/c_1183690934108315648">Celia_知乎专栏</a></p>
<p>后续有新的会继续补充~</p>]]></content>
      <categories>
        <category>GEE</category>
        <category>GEE入门</category>
      </categories>
      <tags>
        <tag>Google Earth Engine</tag>
        <tag>Remote sensing</tag>
      </tags>
  </entry>
  <entry>
    <title>GEE实战 | 计算NDVI &amp; NDWI</title>
    <url>/2020/10/27/GEE/GEE%E5%AE%9E%E6%88%98%20%E8%AE%A1%E7%AE%97NDVI&amp;NDWI/</url>
    <content><![CDATA[<h1 id="NDVI"><a href="#NDVI" class="headerlink" title="NDVI"></a>NDVI</h1><h2 id="NDVI数据库"><a href="#NDVI数据库" class="headerlink" title="NDVI数据库"></a>NDVI数据库</h2><p>&emsp;&emsp;GEE自身提供了相当多的NDVI资源可以直接导入使用。<br><img src="https://img-blog.csdnimg.cn/20200901162210648.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20200901162216594.png?x-oss-process"></p>
<p>&emsp;&emsp;以Landsat 8 8天周期NDVI产品为例，导入及可视化代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataset = ee.ImageCollection(<span class="string">&#x27;LANDSAT/LC08/C01/T1_8DAY_NDVI&#x27;</span>)</span><br><span class="line">                  .filterDate(<span class="string">&#x27;2017-01-01&#x27;</span>, <span class="string">&#x27;2017-12-31&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> colorized = dataset.select(<span class="string">&#x27;NDVI&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> colorizedVis = &#123;</span><br><span class="line">  min: <span class="number">0.0</span>,</span><br><span class="line">  max: <span class="number">1.0</span>,</span><br><span class="line">  palette: [</span><br><span class="line">    <span class="string">&#x27;FFFFFF&#x27;</span>, <span class="string">&#x27;CE7E45&#x27;</span>, <span class="string">&#x27;DF923D&#x27;</span>, <span class="string">&#x27;F1B555&#x27;</span>, <span class="string">&#x27;FCD163&#x27;</span>, <span class="string">&#x27;99B718&#x27;</span>, <span class="string">&#x27;74A901&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;66A000&#x27;</span>, <span class="string">&#x27;529400&#x27;</span>, <span class="string">&#x27;3E8601&#x27;</span>, <span class="string">&#x27;207401&#x27;</span>, <span class="string">&#x27;056201&#x27;</span>, <span class="string">&#x27;004C00&#x27;</span>, <span class="string">&#x27;023B01&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;012E01&#x27;</span>, <span class="string">&#x27;011D01&#x27;</span>, <span class="string">&#x27;011301&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span>.setCenter(<span class="number">6.746</span>, <span class="number">46.529</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(colorized, colorizedVis, <span class="string">&#x27;Colorized&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="计算NDVI"><a href="#计算NDVI" class="headerlink" title="计算NDVI"></a>计算NDVI</h2><p>&emsp;&emsp;当然，有时候产品无法满足要求，需要根据波段信息运算。GEE可以方便的使用几行代码完成运算。<br>&emsp;&emsp;首先放上NDVI的计算公式：<br>&emsp;&emsp;NDVI = (近红外波段 - 红波段) / (近红外波段 + 红波段)<br>&emsp;&emsp;针对每种卫星的波段，选用的波段都有所不同，公式如下：<br>&emsp;&emsp;Landsat8: NDVI = (band5 - band4) / (band5 + band4)<br>&emsp;&emsp;Sentinel2: NDVI = (band8 - band4) / (band8 + band4)<br>&emsp;&emsp;Modis: NDVI = (band2 - band1) / (band2 + band1)<br>&emsp;&emsp;ETM/TM: NDVI = (band4 - band3) / (band4 + band3)<br>&emsp;&emsp;AVHRR: NDVI = (CH2 - CH1) / (CH2 + CH1) </p>
<p>&emsp;&emsp;接下来以Landsat 8和Sentinel 2为例，计算NDVI，摘自某位网友，侵删。</p>
<p>&emsp;&emsp;Landsat 8：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//landsat 8 NDVI Demo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法一：普通方式，通过将数学公式翻译为代码直接计算</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDVI_V1</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> nir = img.select(<span class="string">&quot;B5&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> red = img.select(<span class="string">&quot;B4&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> ndvi = nir.subtract(red).divide(nir.add(red));</span><br><span class="line"> <span class="keyword">return</span> ndvi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：将计算公式直接带入，通过解析字符串实现计算。这种方式更加灵活，在某些特殊情况下非常好用，而且非常直观。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDVI_V2</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> nir = img.select(<span class="string">&quot;B5&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> red = img.select(<span class="string">&quot;B4&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> ndvi = img.expression(</span><br><span class="line">   <span class="string">&quot;(B5 - B4)/(B5 + B4)&quot;</span>,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">&quot;B5&quot;</span>: nir,</span><br><span class="line">     <span class="string">&quot;B4&quot;</span>: red</span><br><span class="line">   &#125;</span><br><span class="line"> );</span><br><span class="line"> <span class="keyword">return</span> ndvi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三：GEE将计算公式封装为一个方法可以直接调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDVI_V3</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> ndvi = img.normalizedDifference([<span class="string">&quot;B5&quot;</span>,<span class="string">&quot;B4&quot;</span>]);</span><br><span class="line"> <span class="keyword">return</span> ndvi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//landsat8 and roi 我们这里使用的2017年全部的Landsat8影像，地点是沧州附近 </span></span><br><span class="line"><span class="keyword">var</span> l8_col = ee.ImageCollection(<span class="string">&quot;LANDSAT/LC08/C01/T1_RT_TOA&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> roi = ee.Geometry.Point([<span class="number">117.0703125</span>,<span class="number">38.09133660751176</span>]);</span><br><span class="line"><span class="keyword">var</span> img = ee.Image(l8_col.filterBounds(roi)</span><br><span class="line">                       .filterDate(<span class="string">&quot;2017-01-01&quot;</span>, <span class="string">&quot;2017-09-24&quot;</span>)</span><br><span class="line">                       .first());</span><br><span class="line"><span class="keyword">var</span> ndvi1 = NDVI_V1(img);</span><br><span class="line"><span class="keyword">var</span> ndvi2 = NDVI_V2(img);</span><br><span class="line"><span class="keyword">var</span> ndvi3 = NDVI_V3(img);</span><br><span class="line"><span class="comment">//NDVI显示配置，NDVI值范围是-1到1</span></span><br><span class="line"><span class="keyword">var</span> visParam = &#123;</span><br><span class="line"> min: -<span class="number">0.2</span>,</span><br><span class="line"> max: <span class="number">0.8</span>,</span><br><span class="line"> palette: <span class="string">&#x27;FFFFFF, CE7E45, DF923D, F1B555, FCD163, 99B718, 74A901, 66A000, 529400,&#x27;</span> +</span><br><span class="line">   <span class="string">&#x27;3E8601, 207401, 056201, 004C00, 023B01, 012E01, 011D01, 011301&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//原始影像真彩色</span></span><br><span class="line"><span class="built_in">Map</span>.addLayer(img, &#123;<span class="attr">bands</span>:[<span class="string">&quot;B4&quot;</span>, <span class="string">&quot;B3&quot;</span>, <span class="string">&quot;B2&quot;</span>], <span class="attr">max</span>:<span class="number">0.3</span>&#125;, <span class="string">&quot;raw_img&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndvi1, visParam, <span class="string">&quot;ndvi_1&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndvi2, visParam, <span class="string">&quot;ndvi_2&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndvi3, visParam, <span class="string">&quot;ndvi_3&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.centerObject(roi, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面只是展示了图像，我们在分析的时候还需要查看我们所筛选的影像NDVI值</span></span><br><span class="line"><span class="keyword">var</span> ndvi_list = l8_col.filterDate(<span class="string">&quot;2017-01-01&quot;</span>, <span class="string">&quot;2017-09-24&quot;</span>)</span><br><span class="line">   .map(<span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//通过云筛选landsat8</span></span><br><span class="line">   <span class="keyword">var</span> cloud = ee.Algorithms.Landsat.simpleCloudScore(image).select(<span class="string">&quot;cloud&quot;</span>);</span><br><span class="line">   <span class="keyword">var</span> mask = cloud.lte(<span class="number">20</span>);</span><br><span class="line">   <span class="keyword">var</span> ndvi = image.normalizedDifference([<span class="string">&#x27;B5&#x27;</span>, <span class="string">&#x27;B4&#x27;</span>]).rename(<span class="string">&#x27;NDVI&#x27;</span>);</span><br><span class="line">   <span class="keyword">return</span> image.addBands(ndvi).updateMask(mask);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//展示每一张影像NDVI值 </span></span><br><span class="line"><span class="keyword">var</span> chart1 = ui.Chart.image.series(&#123;</span><br><span class="line"> <span class="comment">//影像集合</span></span><br><span class="line"> imageCollection: ndvi_list.select(<span class="string">&#x27;NDVI&#x27;</span>),</span><br><span class="line"> <span class="comment">//关心区域</span></span><br><span class="line"> region: roi,</span><br><span class="line"> <span class="comment">//关心区域计算方式，这里采用的是均值。也就是比如roi是一个矩形，</span></span><br><span class="line"> <span class="comment">//那么在图表中这个点的值就是矩形内所有像素值求平均。</span></span><br><span class="line"> reducer: ee.Reducer.mean(),</span><br><span class="line"> <span class="comment">//分辨率</span></span><br><span class="line"> scale: <span class="number">30</span></span><br><span class="line">&#125;).setOptions(&#123;<span class="attr">title</span>: <span class="string">&#x27;NDVI IMAGE SERIES&#x27;</span>&#125;);</span><br><span class="line">print(chart1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//展示每一天所关心区域的NDVI值</span></span><br><span class="line"><span class="keyword">var</span> chart2 = ui.Chart.image.doySeries(&#123;</span><br><span class="line"> imageCollection: ndvi_list.select(<span class="string">&#x27;NDVI&#x27;</span>),</span><br><span class="line"> region:roi,</span><br><span class="line"> regionReducer: ee.Reducer.mean(),</span><br><span class="line"> scale:<span class="number">30</span></span><br><span class="line">&#125;).setOptions(&#123;<span class="attr">title</span>: <span class="string">&quot;ROI NDVI EACH DAY SERIES&quot;</span>&#125;)</span><br><span class="line">print(chart2)</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp; Sentinel 2:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sentinel2 NDVI Demo</span></span><br><span class="line"><span class="comment">//方法一：普通方式，通过将数学公式翻译为代码直接计算</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDVI_V1</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> nir = img.select(<span class="string">&quot;B8&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> red = img.select(<span class="string">&quot;B4&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> ndvi = nir.subtract(red).divide(nir.add(red));</span><br><span class="line"> <span class="keyword">return</span> ndvi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：将计算公式直接带入，通过解析字符串实现计算。这种方式更加灵活，在某些特殊情况下非常好用，而且非常直观。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDVI_V2</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> nir = img.select(<span class="string">&quot;B8&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> red = img.select(<span class="string">&quot;B4&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> ndvi = img.expression(</span><br><span class="line">   <span class="string">&quot;(B5 - B4)/(B5 + B4)&quot;</span>,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">&quot;B5&quot;</span>: nir,</span><br><span class="line">     <span class="string">&quot;B4&quot;</span>: red</span><br><span class="line">   &#125;</span><br><span class="line"> );</span><br><span class="line"> <span class="keyword">return</span> ndvi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法三：GEE将计算公式封装为一个方法可以直接调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDVI_V3</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> ndvi = img.normalizedDifference([<span class="string">&quot;B8&quot;</span>,<span class="string">&quot;B4&quot;</span>]);</span><br><span class="line"> <span class="keyword">return</span> ndvi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//sentinel2 and roi</span></span><br><span class="line"><span class="keyword">var</span> s2_col = ee.ImageCollection(<span class="string">&quot;COPERNICUS/S2&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> roi = ee.Geometry.Point([<span class="number">117.0703125</span>,<span class="number">38.09133660751176</span>]);</span><br><span class="line"><span class="keyword">var</span> img = ee.Image(s2_col.filterBounds(roi)</span><br><span class="line">                       .filterDate(<span class="string">&quot;2017-01-01&quot;</span>, <span class="string">&quot;2017-09-24&quot;</span>)</span><br><span class="line">                       .first());</span><br><span class="line"><span class="keyword">var</span> ndvi1 = NDVI_V1(img);</span><br><span class="line"><span class="keyword">var</span> ndvi2 = NDVI_V2(img);</span><br><span class="line"><span class="keyword">var</span> ndvi3 = NDVI_V3(img);</span><br><span class="line"><span class="keyword">var</span> visParam = &#123;</span><br><span class="line"> min: -<span class="number">0.2</span>,</span><br><span class="line"> max: <span class="number">0.8</span>,</span><br><span class="line"> palette: <span class="string">&#x27;FFFFFF, CE7E45, DF923D, F1B555, FCD163, 99B718, 74A901, 66A000, 529400,&#x27;</span> +</span><br><span class="line">   <span class="string">&#x27;3E8601, 207401, 056201, 004C00, 023B01, 012E01, 011D01, 011301&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span>.addLayer(img, &#123;<span class="attr">bands</span>:[<span class="string">&quot;B8&quot;</span>, <span class="string">&quot;B4&quot;</span>, <span class="string">&quot;B3&quot;</span>], <span class="attr">max</span>:<span class="number">3048</span>&#125;, <span class="string">&quot;raw_img&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndvi1, visParam, <span class="string">&quot;ndvi_1&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndvi2, visParam, <span class="string">&quot;ndvi_2&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndvi3, visParam, <span class="string">&quot;ndvi_3&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.centerObject(roi, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//show charts</span></span><br><span class="line"><span class="keyword">var</span> ndvi_list = s2_col.filterDate(<span class="string">&quot;2017-01-01&quot;</span>, <span class="string">&quot;2017-09-24&quot;</span>)</span><br><span class="line">   .map(<span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> ndvi = image.normalizedDifference([<span class="string">&#x27;B8&#x27;</span>, <span class="string">&#x27;B4&#x27;</span>]).rename(<span class="string">&#x27;NDVI&#x27;</span>);</span><br><span class="line">   <span class="keyword">return</span> image.addBands(ndvi);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//展示每一张影像NDVI值 </span></span><br><span class="line"><span class="keyword">var</span> chart1 = ui.Chart.image.series(&#123;</span><br><span class="line"> <span class="comment">//影像集合</span></span><br><span class="line"> imageCollection: ndvi_list.select(<span class="string">&#x27;NDVI&#x27;</span>),</span><br><span class="line"> <span class="comment">//关心区域</span></span><br><span class="line"> region: roi,</span><br><span class="line"> <span class="comment">//关心区域计算方式，这里采用的是均值。也就是比如roi是一个矩形，</span></span><br><span class="line"> <span class="comment">//那么在图表中这个点的值就是矩形内所有像素值求平均。</span></span><br><span class="line"> reducer: ee.Reducer.mean(),</span><br><span class="line"> <span class="comment">//分辨率</span></span><br><span class="line"> scale: <span class="number">30</span></span><br><span class="line">&#125;).setOptions(&#123;<span class="attr">title</span>: <span class="string">&#x27;NDVI IMAGE SERIES&#x27;</span>&#125;);</span><br><span class="line">print(chart1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//展示每一天所关心区域的NDVI值</span></span><br><span class="line"><span class="keyword">var</span> chart2 = ui.Chart.image.doySeries(&#123;</span><br><span class="line"> imageCollection: ndvi_list.select(<span class="string">&#x27;NDVI&#x27;</span>),</span><br><span class="line"> region:roi,</span><br><span class="line"> regionReducer: ee.Reducer.mean(),</span><br><span class="line"> scale:<span class="number">30</span></span><br><span class="line">&#125;).setOptions(&#123;<span class="attr">title</span>: <span class="string">&quot;ROI NDVI EACH DAY SERIES&quot;</span>&#125;)</span><br><span class="line">print(chart2)</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<h1 id="NDWI"><a href="#NDWI" class="headerlink" title="NDWI"></a>NDWI</h1><h2 id="NDWI数据库"><a href="#NDWI数据库" class="headerlink" title="NDWI数据库"></a>NDWI数据库</h2><p>&emsp;&emsp;GEE自身提供了相当多的NDVI资源可以直接导入使用。<br><img src="https://img-blog.csdnimg.cn/20200901162231806.png?x-oss-process"></p>
<p>&emsp;&emsp;以Landsat 8 32天周期NDWI产品为例，导入及可视化代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataset = ee.ImageCollection(<span class="string">&#x27;LANDSAT/LC08/C01/T1_32DAY_NDWI&#x27;</span>)</span><br><span class="line">                  .filterDate(<span class="string">&#x27;2017-01-01&#x27;</span>, <span class="string">&#x27;2017-12-31&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> colorized = dataset.select(<span class="string">&#x27;NDWI&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> colorizedVis = &#123;</span><br><span class="line">  min: <span class="number">0.0</span>,</span><br><span class="line">  max: <span class="number">1.0</span>,</span><br><span class="line">  palette: [<span class="string">&#x27;0000ff&#x27;</span>, <span class="string">&#x27;00ffff&#x27;</span>, <span class="string">&#x27;ffff00&#x27;</span>, <span class="string">&#x27;ff0000&#x27;</span>, <span class="string">&#x27;ffffff&#x27;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span>.setCenter(<span class="number">6.746</span>, <span class="number">46.529</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(colorized, colorizedVis, <span class="string">&#x27;Colorized&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="计算NDWI"><a href="#计算NDWI" class="headerlink" title="计算NDWI"></a>计算NDWI</h2><p>&emsp;&emsp;同理，NDWI的计算公式：<br>&emsp;&emsp;NDWI = (绿波段 - 近红外波段) / (绿波段 + 近红外波段)<br>&emsp;&emsp;针对每种卫星的波段，选用的波段都有所不同，公式如下：<br>&emsp;&emsp;landsat8: NDWI = (band3 - band5) / (band3 + band5)<br>&emsp;&emsp;landsat5/7: NDWI = (band2 - band4) / (band2 + band4)<br>&emsp;&emsp;sentinel2: NDWI = (band3 - band8) / (band3 + band8)</p>
<p>&emsp;&emsp;接下来以Landsat 8和Sentinel 2为例，计算NWVI，摘自某位网友，侵删。</p>
<p>&emsp;&emsp;Landsat 8：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//landsat 8 NDWI Demo</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDWI_V1</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> nir = img.select(<span class="string">&quot;B5&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> green = img.select(<span class="string">&quot;B3&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> ndwi = green.subtract(nir).divide(green.add(nir));</span><br><span class="line"> <span class="keyword">return</span> ndwi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDWI_V2</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> nir = img.select(<span class="string">&quot;B5&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> green = img.select(<span class="string">&quot;B3&quot;</span>);</span><br><span class="line"> <span class="keyword">var</span> ndwi = img.expression(</span><br><span class="line">   <span class="string">&quot;(B3 - B5)/(B3 + B5)&quot;</span>,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="string">&quot;B5&quot;</span>: nir,</span><br><span class="line">     <span class="string">&quot;B3&quot;</span>: green</span><br><span class="line">   &#125;</span><br><span class="line"> );</span><br><span class="line"> <span class="keyword">return</span> ndwi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NDWI_V3</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> ndwi = img.normalizedDifference([<span class="string">&quot;B3&quot;</span>,<span class="string">&quot;B5&quot;</span>]);</span><br><span class="line"> <span class="keyword">return</span> ndwi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//landsat8 and roi</span></span><br><span class="line"><span class="keyword">var</span> l8_col = ee.ImageCollection(<span class="string">&quot;LANDSAT/LC8_L1T_TOA&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> roi = ee.Geometry.Point([<span class="number">124.1455078125</span>,<span class="number">45.644768217751924</span>]);</span><br><span class="line"><span class="keyword">var</span> img = ee.Image(l8_col.filterBounds(roi)</span><br><span class="line">                       .filterDate(<span class="string">&quot;2017-02-01&quot;</span>, <span class="string">&quot;2017-09-23&quot;</span>)</span><br><span class="line">                       .first());</span><br><span class="line"><span class="keyword">var</span> ndwi1 = NDWI_V1(img);</span><br><span class="line"><span class="keyword">var</span> ndwi2 = NDWI_V2(img);</span><br><span class="line"><span class="keyword">var</span> ndwi3 = NDWI_V3(img);</span><br><span class="line"><span class="keyword">var</span> visParam = &#123;</span><br><span class="line"> min: -<span class="number">0.5</span>,</span><br><span class="line"> max: <span class="number">0.5</span>,</span><br><span class="line"> palette: [<span class="string">&#x27;00FFFF&#x27;</span>, <span class="string">&#x27;0000FF&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span>.addLayer(img, &#123;<span class="attr">bands</span>:[<span class="string">&quot;B4&quot;</span>, <span class="string">&quot;B3&quot;</span>, <span class="string">&quot;B2&quot;</span>], <span class="attr">max</span>:<span class="number">0.3</span>&#125;, <span class="string">&quot;raw_img&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndwi1, visParam, <span class="string">&quot;ndwi_1&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndwi2, visParam, <span class="string">&quot;ndwi_2&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndwi3, visParam, <span class="string">&quot;ndwi_3&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.centerObject(roi, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//show charts</span></span><br><span class="line"><span class="keyword">var</span> ndwi_list = l8_col.filterDate(<span class="string">&quot;2017-01-01&quot;</span>, <span class="string">&quot;2017-09-23&quot;</span>)</span><br><span class="line">   .map(<span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> cloud = ee.Algorithms.Landsat.simpleCloudScore(image).select(<span class="string">&quot;cloud&quot;</span>);</span><br><span class="line">   <span class="keyword">var</span> mask = cloud.lte(<span class="number">20</span>);</span><br><span class="line">   <span class="keyword">var</span> ndwi = image.normalizedDifference([<span class="string">&#x27;B3&#x27;</span>, <span class="string">&#x27;B5&#x27;</span>]).rename(<span class="string">&#x27;NDWI&#x27;</span>);</span><br><span class="line">   <span class="keyword">return</span> image.addBands(ndwi).updateMask(mask);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> chart1 = ui.Chart.image.series(&#123;</span><br><span class="line"> imageCollection: ndwi_list.select(<span class="string">&#x27;NDWI&#x27;</span>),</span><br><span class="line"> region: roi,</span><br><span class="line"> reducer: ee.Reducer.mean(),</span><br><span class="line"> scale: <span class="number">30</span></span><br><span class="line">&#125;).setOptions(&#123;<span class="attr">title</span>: <span class="string">&#x27;NDWI IMAGE SERIES&#x27;</span>&#125;);</span><br><span class="line">print(chart1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chart2 = ui.Chart.image.doySeries(&#123;</span><br><span class="line"> imageCollection: ndwi_list.select(<span class="string">&#x27;NDWI&#x27;</span>),</span><br><span class="line"> region:roi,</span><br><span class="line"> regionReducer: ee.Reducer.mean(),</span><br><span class="line"> scale:<span class="number">30</span></span><br><span class="line">&#125;).setOptions(&#123;<span class="attr">title</span>: <span class="string">&quot;ROI NDWI EACH DAY SERIES&quot;</span>&#125;)</span><br><span class="line">print(chart2)</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;Sentinel 2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sentinel2 ndwi</span></span><br><span class="line"><span class="comment">//哨兵2去云处理</span></span><br><span class="line"><span class="keyword">var</span> s2_rmcloud = <span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> quality = image.select(<span class="string">&quot;QA60&quot;</span>).unmask();</span><br><span class="line"> <span class="keyword">return</span> image.updateMask(quality.eq(<span class="number">0</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在原影像中加入一个新的波段，命名为NDWI</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2_ndwi = <span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> image.addBands(image.normalizedDifference([<span class="string">&quot;B3&quot;</span>, <span class="string">&quot;B8&quot;</span>]).rename(<span class="string">&quot;NDWI&quot;</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sentinel2 and roi 过滤筛选哨兵2影像</span></span><br><span class="line"><span class="keyword">var</span> s2_col = ee.ImageCollection(<span class="string">&quot;COPERNICUS/S2&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> roi = ee.Geometry.Point([<span class="number">117.0703125</span>,<span class="number">38.09133660751176</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2_nocloud = s2_col.map(s2_rmcloud)</span><br><span class="line">                       .filterBounds(roi)</span><br><span class="line">                       .filterDate(<span class="string">&quot;2017-01-01&quot;</span>, <span class="string">&quot;2017-09-24&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> ndwi = s2_nocloud.map(s2_ndwi).select(<span class="string">&quot;NDWI&quot;</span>).reduce(ee.Reducer.mean());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> visParam = &#123;</span><br><span class="line"> min: -<span class="number">0.5</span>,</span><br><span class="line"> max: <span class="number">0.5</span>,</span><br><span class="line"> palette: [<span class="string">&#x27;00FFFF&#x27;</span>, <span class="string">&#x27;0000FF&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Map</span>.addLayer(ndwi, visParam, <span class="string">&quot;ndwi&quot;</span>);</span><br><span class="line"><span class="built_in">Map</span>.centerObject(roi, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//展示关心区域roi在1.1-9.23日之间的的NDWI值序列</span></span><br><span class="line"><span class="keyword">var</span> ndwi_list = s2_nocloud.filterDate(<span class="string">&quot;2017-01-01&quot;</span>, <span class="string">&quot;2017-09-23&quot;</span>)</span><br><span class="line">   .map(<span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> ndwi = image.normalizedDifference([<span class="string">&#x27;B3&#x27;</span>, <span class="string">&#x27;B5&#x27;</span>]).rename(<span class="string">&#x27;NDWI&#x27;</span>);</span><br><span class="line">   <span class="keyword">return</span> image.addBands(ndwi);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> chart1 = ui.Chart.image.series(&#123;</span><br><span class="line"> imageCollection: ndwi_list.select(<span class="string">&#x27;NDWI&#x27;</span>),</span><br><span class="line"> region: roi,</span><br><span class="line"> reducer: ee.Reducer.mean(),</span><br><span class="line"> scale: <span class="number">30</span></span><br><span class="line">&#125;).setOptions(&#123;<span class="attr">title</span>: <span class="string">&#x27;NDWI IMAGE SERIES&#x27;</span>&#125;);</span><br><span class="line">print(chart1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chart2 = ui.Chart.image.doySeries(&#123;</span><br><span class="line"> imageCollection: ndwi_list.select(<span class="string">&#x27;NDWI&#x27;</span>),</span><br><span class="line"> region:roi,</span><br><span class="line"> regionReducer: ee.Reducer.mean(),</span><br><span class="line"> scale:<span class="number">30</span></span><br><span class="line">&#125;).setOptions(&#123;<span class="attr">title</span>: <span class="string">&quot;ROI NDWI EACH DAY SERIES&quot;</span>&#125;)</span><br><span class="line">print(chart2)</span><br></pre></td></tr></table></figure>

<h1 id="Landsat-8-NDVI-和-NDWI-添加波段"><a href="#Landsat-8-NDVI-和-NDWI-添加波段" class="headerlink" title="Landsat 8 NDVI 和 NDWI 添加波段"></a>Landsat 8 NDVI 和 NDWI 添加波段</h1><p>&emsp;&emsp;python代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use Landsat 8 surface reflectance data. 【使用Landsat8影像】</span></span><br><span class="line">l8sr = ee.ImageCollection(<span class="string">&#x27;LANDSAT/LC08/C01/T1_SR&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cloud masking function.【去云函数】</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maskL8sr</span>(<span class="params">image</span>):</span></span><br><span class="line">  cloudShadowBitMask = ee.Number(<span class="number">2</span>).<span class="built_in">pow</span>(<span class="number">3</span>).<span class="built_in">int</span>()</span><br><span class="line">  cloudsBitMask = ee.Number(<span class="number">2</span>).<span class="built_in">pow</span>(<span class="number">5</span>).<span class="built_in">int</span>()</span><br><span class="line">  qa = image.select(<span class="string">&#x27;pixel_qa&#x27;</span>)</span><br><span class="line">  mask = qa.bitwiseAnd(cloudShadowBitMask).eq(<span class="number">0</span>).And(</span><br><span class="line">    qa.bitwiseAnd(cloudsBitMask).eq(<span class="number">0</span>))</span><br><span class="line">  <span class="keyword">return</span> image.updateMask(mask).select(opticalBands).divide(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The image input data is a cloud-masked median composite.【选取16年影像】</span></span><br><span class="line">image = l8sr.filterDate(<span class="string">&#x27;2016-01-01&#x27;</span>, <span class="string">&#x27;2016-12-31&#x27;</span>).<span class="built_in">map</span>(maskL8sr).median()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addNDVI</span>(<span class="params">image</span>):</span></span><br><span class="line">  ndvi = image.normalizedDifference([<span class="string">&#x27;B5&#x27;</span>, <span class="string">&#x27;B4&#x27;</span>]).rename(<span class="string">&#x27;NDVI&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> image.addBands(ndvi)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addNDWI</span>(<span class="params">image</span>):</span></span><br><span class="line">  ndwi = image.normalizedDifference([<span class="string">&#x27;B3&#x27;</span>, <span class="string">&#x27;B5&#x27;</span>]).rename(<span class="string">&#x27;NDWI&#x27;</span>)</span><br><span class="line">  <span class="comment"># mndwi = image.normalizedDifference([&#x27;B3&#x27;, &#x27;B6&#x27;]).rename(&#x27;MNDWI&#x27;)</span></span><br><span class="line">  <span class="comment"># lswi = image.normalizedDifference([&#x27;B5&#x27;, &#x27;B6&#x27;]).rename(&#x27;LSWI&#x27;)</span></span><br><span class="line">  <span class="keyword">return</span> image.addBands(ndwi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 【增加信息】</span></span><br><span class="line">image = addNDVI(image)</span><br><span class="line">image = addNDWI(image)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use folium to visualize the imagery. 【可视化】</span></span><br><span class="line">mapid = image.getMapId(&#123;<span class="string">&#x27;bands&#x27;</span>: [<span class="string">&#x27;B4&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>], <span class="string">&#x27;min&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">0.3</span>&#125;)</span><br><span class="line"><span class="built_in">map</span> = folium.Map(location=[<span class="number">38.</span>, <span class="number">-122.5</span>])</span><br><span class="line">folium.TileLayer(</span><br><span class="line">    tiles=mapid[<span class="string">&#x27;tile_fetcher&#x27;</span>].url_format,</span><br><span class="line">    attr=<span class="string">&#x27;Map Data &amp;copy; &lt;a href=&quot;https://earthengine.google.com/&quot;&gt;Google Earth Engine&lt;/a&gt;&#x27;</span>,</span><br><span class="line">    overlay=<span class="literal">True</span>,</span><br><span class="line">    name=<span class="string">&#x27;median composite&#x27;</span>,</span><br><span class="line">  ).add_to(<span class="built_in">map</span>)</span><br><span class="line"></span><br><span class="line">mapid = image.getMapId(&#123;<span class="string">&#x27;bands&#x27;</span>: [<span class="string">&#x27;NDVI&#x27;</span>], <span class="string">&#x27;min&#x27;</span>: <span class="number">-0.2</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">0.8</span>, </span><br><span class="line">    <span class="string">&#x27;palette&#x27;</span>: [<span class="string">&#x27;FFFFFF&#x27;</span>, <span class="string">&#x27;CE7E45&#x27;</span>, <span class="string">&#x27;DF923D&#x27;</span>, <span class="string">&#x27;F1B555&#x27;</span>, <span class="string">&#x27;FCD163&#x27;</span>, <span class="string">&#x27;99B718&#x27;</span>, <span class="string">&#x27;74A901&#x27;</span>, <span class="string">&#x27;66A000&#x27;</span>, <span class="string">&#x27;529400&#x27;</span>]&#125;)</span><br><span class="line">folium.TileLayer(</span><br><span class="line">    tiles=mapid[<span class="string">&#x27;tile_fetcher&#x27;</span>].url_format,</span><br><span class="line">    attr=<span class="string">&#x27;Map Data &amp;copy; &lt;a href=&quot;https://earthengine.google.com/&quot;&gt;Google Earth Engine&lt;/a&gt;&#x27;</span>,</span><br><span class="line">    overlay=<span class="literal">True</span>,</span><br><span class="line">    name=<span class="string">&#x27;NDVI&#x27;</span>,</span><br><span class="line">  ).add_to(<span class="built_in">map</span>)</span><br><span class="line"><span class="comment"># map.add_child(folium.LayerControl())</span></span><br><span class="line"></span><br><span class="line">mapid = image.getMapId(&#123;<span class="string">&#x27;bands&#x27;</span>: [<span class="string">&#x27;NDWI&#x27;</span>], <span class="string">&#x27;min&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;max&#x27;</span>: <span class="number">1</span>, </span><br><span class="line">    <span class="string">&#x27;palette&#x27;</span>: [<span class="string">&#x27;0000ff&#x27;</span>, <span class="string">&#x27;00ffff&#x27;</span>, <span class="string">&#x27;ffff00&#x27;</span>, <span class="string">&#x27;ff0000&#x27;</span>, <span class="string">&#x27;ffffff&#x27;</span>]&#125;)</span><br><span class="line">folium.TileLayer(</span><br><span class="line">    tiles=mapid[<span class="string">&#x27;tile_fetcher&#x27;</span>].url_format,</span><br><span class="line">    attr=<span class="string">&#x27;Map Data &amp;copy; &lt;a href=&quot;https://earthengine.google.com/&quot;&gt;Google Earth Engine&lt;/a&gt;&#x27;</span>,</span><br><span class="line">    overlay=<span class="literal">True</span>,</span><br><span class="line">    name=<span class="string">&#x27;NDWI&#x27;</span>,</span><br><span class="line">  ).add_to(<span class="built_in">map</span>)</span><br><span class="line"><span class="built_in">map</span>.add_child(folium.LayerControl())</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span></span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;可视化结果如下：<br>&emsp;&emsp;NDVI：<br><img src="https://img-blog.csdnimg.cn/20200901164955612.png?x-oss-process"></p>
<p>&emsp;&emsp;NDWI：<br><img src="https://img-blog.csdnimg.cn/20200901164930924.png?x-oss-process"></p>
<p>&emsp;&emsp;下次讲下如何利用水体指数提取潘阳湖面积今年变化~</p>]]></content>
      <categories>
        <category>GEE</category>
        <category>GEE实战</category>
      </categories>
      <tags>
        <tag>Google Earth Engine</tag>
        <tag>Remote sensing</tag>
      </tags>
  </entry>
  <entry>
    <title>Coursera | 离散数学概论（北大）| quiz答案</title>
    <url>/2020/10/23/Coursera%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E6%A6%82%E8%AE%BAquiz%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<p>&emsp;&emsp;先放下Coursera上找的离散数学部分相关课程：</p>
<p><img src="https://img-blog.csdnimg.cn/20201011161356603.png#pic_center"><br>&emsp;&emsp;btw.线上学习拿证书还有很多，MOOC、edm等都可。</p>
<p>&emsp;&emsp;博主选了北京大学离散数学概论Discrete Mathematics Generality。Mooc上貌似也有，但是上课时间貌似不如Coursera灵活，Coursera时间自己调度，规定时间上完即可。目前课程感觉良好，比较推荐，具体课程安排可上网站找。</p>
<h1 id="quiz答案"><a href="#quiz答案" class="headerlink" title="quiz答案"></a>quiz答案</h1><p>&emsp;&emsp;这里对每周的quiz答案做个记录，更新中…(emmm 不知道放答案有没有事，大家做个参考就好)<br>&emsp;&emsp;btw.选项顺序可能有不同，请对准选项内容！</p>
<h2 id="Week1-数理逻辑：基本概念"><a href="#Week1-数理逻辑：基本概念" class="headerlink" title="Week1:数理逻辑：基本概念"></a>Week1:数理逻辑：基本概念</h2><p><img src="https://img-blog.csdnimg.cn/20201011163102777.png?x-oss-process"></p>
<h2 id="Week2-数理逻辑：命题逻辑及形式系统"><a href="#Week2-数理逻辑：命题逻辑及形式系统" class="headerlink" title="Week2:数理逻辑：命题逻辑及形式系统"></a>Week2:数理逻辑：命题逻辑及形式系统</h2><p><img src="https://img-blog.csdnimg.cn/20201011162628215.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201011162639811.png?x-oss-process"></p>
<h2 id="Week3-数理逻辑：谓词逻辑及形式系统"><a href="#Week3-数理逻辑：谓词逻辑及形式系统" class="headerlink" title="Week3:数理逻辑：谓词逻辑及形式系统"></a>Week3:数理逻辑：谓词逻辑及形式系统</h2><p><img src="https://img-blog.csdnimg.cn/20201011162508828.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201011162525258.png?x-oss-process"></p>
<h2 id="Week4-集合论：集合代数"><a href="#Week4-集合论：集合代数" class="headerlink" title="Week4:集合论：集合代数"></a>Week4:集合论：集合代数</h2><p><img src="https://img-blog.csdnimg.cn/20201011162326593.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201011162347178.png?x-oss-process"></p>
<h2 id="Week5-集合论：关系基本概念"><a href="#Week5-集合论：关系基本概念" class="headerlink" title="Week5:集合论：关系基本概念"></a>Week5:集合论：关系基本概念</h2><p><img src="https://img-blog.csdnimg.cn/20201012212513840.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201012212842680.png?x-oss-process"></p>
<p><img src="https://img-blog.csdnimg.cn/20201012212548228.png#pic_center"></p>
<h2 id="Week6-集合论：特殊关系及函数"><a href="#Week6-集合论：特殊关系及函数" class="headerlink" title="Week6:集合论：特殊关系及函数"></a>Week6:集合论：特殊关系及函数</h2><p><img src="https://img-blog.csdnimg.cn/20201013211743866.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201013211752252.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/2020101321180692.png?x-oss-process"></p>
<h2 id="Week6-图论：图的定义"><a href="#Week6-图论：图的定义" class="headerlink" title="Week6:图论：图的定义"></a>Week6:图论：图的定义</h2><p><img src="https://img-blog.csdnimg.cn/20201014121204171.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201014121211493.png?x-oss-process"></p>
<h2 id="Week8-图论：特殊图"><a href="#Week8-图论：特殊图" class="headerlink" title="Week8:图论：特殊图"></a>Week8:图论：特殊图</h2><p><img src="https://img-blog.csdnimg.cn/20201014202701175.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201014202711729.png?x-oss-process"></p>
<h2 id="Week9-抽象代数"><a href="#Week9-抽象代数" class="headerlink" title="Week9:抽象代数"></a>Week9:抽象代数</h2><p><img src="https://img-blog.csdnimg.cn/20201015161014123.png?x-oss-process"></p>
<p><img src="https://img-blog.csdnimg.cn/2020101516102858.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201015161037701.png?x-oss-process"></p>
<h2 id="Week10-形式语言与自动机：基本概念"><a href="#Week10-形式语言与自动机：基本概念" class="headerlink" title="Week10:形式语言与自动机：基本概念"></a>Week10:形式语言与自动机：基本概念</h2><p><img src="https://img-blog.csdnimg.cn/20201015173558247.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/202010151736060.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201015173617589.png?x-oss-process"></p>
<h2 id="Week11-形式语言与自动机：有限状态机"><a href="#Week11-形式语言与自动机：有限状态机" class="headerlink" title="Week11:形式语言与自动机：有限状态机"></a>Week11:形式语言与自动机：有限状态机</h2><p><img src="https://img-blog.csdnimg.cn/20201015222037136.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201015222045940.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201015222052882.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201015222100400.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201015222105285.png?x-oss-process"></p>
<h2 id="Week12-形式语言与自动机：图灵机与计算理论"><a href="#Week12-形式语言与自动机：图灵机与计算理论" class="headerlink" title="Week12:形式语言与自动机：图灵机与计算理论"></a>Week12:形式语言与自动机：图灵机与计算理论</h2><p><img src="https://img-blog.csdnimg.cn/20201016193658316.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201016193735658.png?x-oss-process"></p>
<p><img src="https://img-blog.csdnimg.cn/20201016193718272.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201016193751471.png?x-oss-process"></p>
<h2 id="Week13-期末测试"><a href="#Week13-期末测试" class="headerlink" title="Week13:期末测试"></a>Week13:期末测试</h2><p><img src="https://img-blog.csdnimg.cn/20201016203518392.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201016203526219.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201016203534413.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201016203541890.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201016203550692.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201016203602649.png?x-oss-process"><br><img src="https://img-blog.csdnimg.cn/20201016203610291.png?x-oss-process"></p>]]></content>
      <categories>
        <category>数学</category>
        <category>离散数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>离散数学</tag>
        <tag>Coursera</tag>
      </tags>
  </entry>
  <entry>
    <title>GEE入门[1] | Python环境配置</title>
    <url>/2020/10/23/GEE/GEE%E5%85%A5%E9%97%A8%E3%80%901%E3%80%91Python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="GEE简介"><a href="#GEE简介" class="headerlink" title="GEE简介"></a>GEE简介</h2><p>&emsp;&emsp;GEE（Google Earth Engine）是谷歌的一个可以批量处理卫星影像数据的工具，属于Google Earth一系列的工具。相比于ENVI等传统的处理影像工具，GEE可以快速、批量处理数量“巨大”的影像，比如可以快速计算NDVI植被指数等。GEE数据集包括Landsat4、5、7、8、Modis、Sentinel、Atmospheric等超过 200 个公共的数据集，超过500万张影像，具有免费、云计算、数据获取方便等优点，缺点是需要科学上网，以及下载速度和tz质量有关。<br>&emsp;&emsp;GEE提供了两个平台，分别是在线的JavaScript API和离线的Python API。通过这些API可以快速的建立基于Google Earth Engine 以及 Google云的Web服务。在线JavaScript API平台无需环境搭配，可直接线上下载处理卫星影像（<a href="https://code.earthengine.google.com/">https://code.earthengine.google.com</a>），如图。JavaScript平台使用方便，图形交互体验较强，但是如果需要进行深度学习的训练以及测试等时需要将线下使用python等完成训练。<br><img src="https://img-blog.csdnimg.cn/2020082221443350.png?x-oss-process" alt="1"></p>
 <br>

<h2 id="python-API配置相关"><a href="#python-API配置相关" class="headerlink" title="python API配置相关"></a>python API配置相关</h2><p>&emsp;&emsp;本教程以python API为平台，结合Google Colab与GEE完成深度学习。使用python运行GEE需要进行环境配置，分为云端环境配置和本地环境配置，本地环境配置的优点是配置一次即可，由于本教程使用Colab云端运行，所以需要进行云端配置，云端配置需要每次重新配置，所幸Colab配置简单。本教程先介绍Colab云端配置，GEE本地python环境配置见后续教程。</p>
<h3 id="Colab环境配置"><a href="#Colab环境配置" class="headerlink" title="Colab环境配置"></a>Colab环境配置</h3><p>&emsp;&emsp;Google Colab是一个 Google 研究项目，旨在帮助传播机器学习培训和研究成果。它是一个 Jupyter 笔记本环境，不需要进行任何设置就可以使用，并且完全在云端运行。Colaboratory 笔记本存储在 Google 云端硬盘 (<a href="https://drive.google.com/">https://drive.google.com/</a>) 中，并且可以共享。由于Google Colab在linux系统下，所以我们可以用linux系统命令来控制Colab。优点即可以免费试用各个谷歌应用，在无可用GPU时比较合适，缺点仍然是使用谷歌相关需要科学上网。<br>&emsp;&emsp;建议在Google drive中新建Colab。因为编辑运行完程序后，程序是存在Google drive里的，下一次可以直接进入。而Colab的硬盘是云端的，如果直接新建Colaboratory，那么下次打开colab可能上次编写的程序就没有了。具体步骤如下：</p>
<ol>
<li><p>首先登录谷歌云端硬盘（Google Drive），使用Google邮箱登入即可，由于需要使用GEE，因此需要与GEE邮箱一致。Google Drive免费提供了15GB的存储空间，拓宽空间需要购买。<br><img src="https://img-blog.csdnimg.cn/20200822214552414.png?x-oss-process" alt="2"></p>
</li>
<li><p>添加关联程序，本用户已经关联，未关联用户可以通过新建-更多-关联更多应用，然后搜索Colab关联，已关联用户可直接新建-更多-Colaboratory新建ipynb文件。ipynb文件格式即jupyter notebook格式，适合在线分段运行以及做注释，详细操作不做过多介绍。</p>
<img src="https://img-blog.csdnimg.cn/20200822214624840.png?x-oss-process#pic_center" width="300px">
</li>
<li><p>更改运行时类型。点击代码执行程序中的“更改运行时类型”，更改环境和CPU/GPU/TPU。，选择GPU会分配一个云端GPU，一般为K80或者P100。</p>
</li>
</ol>
<img src="https://img-blog.csdnimg.cn/20200822214755269.png?x-oss-process" width="300px">
&emsp;&emsp;选择None(CPU)/GPU/TPU，这里选择GPU。
<img src="https://img-blog.csdnimg.cn/20200822215349649.png?x-oss-process" width="300px">
&emsp;&emsp;通过代码查看分配的GPU型号。
<img src="https://img-blog.csdnimg.cn/20200822215458410.png?x-oss-process">

<ol start="4">
<li>挂载Google Drive。Colab的运行原理实际上就是给你分配一台远程的带GPU的主机，所以它的原始路径不是你的Google Drive所在的路径。所以要先把Google Drive挂载带到那台远程主机上。<br><img src="https://img-blog.csdnimg.cn/20200822215544497.png?x-oss-process" alt="3"><br> 也可通过左侧栏，选择装载或卸载云端硬盘。其中的My Drive中的文件即为Google Drive中的文件。<img src="https://img-blog.csdnimg.cn/20200822215621509.png?x-oss-process" width="200px">
 载入后，读入图片测试，如图。

</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200822215717923.png?x-oss-process" alt="4"></p>
<ol start="5">
<li>注：在Colab中，单元格不仅仅可以写代码，还可以当命令行使用。比如，!ls查看当前目录文件。<br><img src="https://img-blog.csdnimg.cn/20200822215735282.png#pic_center" alt="5"><br>同时，如果有一些包原始环境里没有，就可以直接在单元格里安装，但是注意需要在前面加入”!”。同时，也可直接运行py文件，如图。<img src="https://img-blog.csdnimg.cn/2020082221575378.png" width="200px">
具体其他操作可参考网上教程或者官方文档。


</li>
</ol>
<h3 id="GEE开发环境配置"><a href="#GEE开发环境配置" class="headerlink" title="GEE开发环境配置"></a>GEE开发环境配置</h3><p>具体步骤如下：</p>
<ol>
<li>安装必要的库 !pip install earthengine-api<br><img src="https://img-blog.csdnimg.cn/2020082222014432.png?x-oss-process" alt="12"></li>
<li>初始化验证消息，使用GEE等谷歌平台时需要验证信息，由于每次打开Colaboratory，它的后台会启动新的虚拟机器，所以这个验证步骤需要重新走一遍 。<br>首先点击验证网站。<br><img src="https://img-blog.csdnimg.cn/20200822220209893.png?x-oss-process" alt="13"><br>选择Google账号。<img src="https://img-blog.csdnimg.cn/20200822220229668.png?x-oss-process" width="200px">
允许访问。
<img src="https://img-blog.csdnimg.cn/20200822220302234.png?x-oss-process" width="200px">
点击右侧粘贴将复制代码放入Colab输入行，按回车即可验证。
<img src="https://img-blog.csdnimg.cn/20200822220437670.png?x-oss-process" width="300px">
<img src="https://img-blog.csdnimg.cn/20200822220504326.png?x-oss-process">
显示”Successfully saved authorization token”即验证通过。
<img src="https://img-blog.csdnimg.cn/20200822220521198.png?x-oss-process">


</li>
</ol>
<h3 id="GEE的本地python环境搭建"><a href="#GEE的本地python环境搭建" class="headerlink" title="GEE的本地python环境搭建"></a>GEE的本地python环境搭建</h3><p>本教程主要面向Windows系统，Mac或者Linux配置相对简单，出现的问题可能较少，网上有大量线上资源。主要步骤如下。</p>
<ol>
<li>安装python和pip（略</li>
<li>安装Google的 python API的客户端，命令行如下：<br>pip install google-api-python-client</li>
<li>安装鉴权验证依赖库：<br>pip install pyCrypto</li>
<li>安装GEE的python库：<br>pip install earthengine-api</li>
<li>第一次运行GEE需要先验证GEE账户，命令行运行如下：<br>earthengine authenticate<br>其中，如果运行缺少相关安装包，安装即可。<br>接下来同Colab线上验证。<br>1）选择Google账号。<img src="https://img-blog.csdnimg.cn/20200822220229668.png?x-oss-process" width="200px">
2）允许访问。
<img src="https://img-blog.csdnimg.cn/20200822220302234.png?x-oss-process" width="200px">
3）点击右侧粘贴将复制代码放入**命令行**，按回车即可验证。
<img src="https://img-blog.csdnimg.cn/20200822220437670.png?x-oss-process" width="300px"></li>
<li>运行、初始化GEE，检查本地环境是否搭建完成：<br>python -c “import ee; ee.Initialize()”  <br>
注：其中可能遇到“[WinError 10060] 由于连接方在一段时间没有正确答复…”问题。一方面检查注册账号是否授权，电脑用户名中文也有可能造成问题。另一方面，检查科学上网软件是否为全局模式。

</li>
</ol>
<h2 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h2><p>JavaScript在线平台： <a href="https://code.earthengine.google.com/">https://code.earthengine.google.com/</a><br>入门介绍文档：<a href="https://developers.google.com/earth-engine/">https://developers.google.com/earth-engine/</a></p>
<h3 id="Python-API相关资源"><a href="#Python-API相关资源" class="headerlink" title="Python API相关资源"></a>Python API相关资源</h3><p><a href="https://github.com/google/earthengine-api">https://github.com/google/earthengine-api</a><br>（包含基本操作，决策树等机器学习代码，无深度学习相关）<br><a href="https://github.com/shiweihappy/earthengine-py-notebooks">https://github.com/shiweihappy/earthengine-py-notebooks</a><br>（包含javascript在线平台教程以及python结合深度学习代码，主要结合TensorFlow以及Google Colab运行，代码需要适当修改）<br><img src="https://img-blog.csdnimg.cn/20200822222103455.png?x-oss-process" width="300px"></p>]]></content>
      <categories>
        <category>GEE</category>
        <category>GEE入门</category>
      </categories>
      <tags>
        <tag>Google Earth Engine</tag>
        <tag>Remote sensing</tag>
      </tags>
  </entry>
  <entry>
    <title>2020/10/18 20:20 第一篇博客正式诞生！</title>
    <url>/2020/10/19/201018first/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
</search>
